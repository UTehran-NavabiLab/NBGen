
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )


-- Executing script file `/Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/yosys_script.ys' --

1. Executing GHDL.
Importing module SAYAC_TOP.
Importing module dpu.
Importing module ccu.
Importing module inc_4.
Importing module mux2ofnbits_4.
Importing module mux8of16bits.
Importing module trf.
Importing module reg.
Importing module imm.
Importing module mux2ofnbits_16.
Importing module add_16.
Importing module mux3of16bits.
Importing module inc_16.
Importing module mdu.
Importing module cmp.
Importing module asu.
Importing module llu.
Importing module mux2ofnbits_5.
Importing module shu.
Importing module iff.
Importing module comp.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: comp                
root of   0 design levels: iff                 
root of   0 design levels: shu                 
root of   0 design levels: mux2ofnbits_5       
root of   1 design levels: llu                 
root of   0 design levels: asu                 
root of   0 design levels: cmp                 
root of   0 design levels: mdu                 
root of   0 design levels: inc_16              
root of   0 design levels: mux3of16bits        
root of   0 design levels: add_16              
root of   0 design levels: mux2ofnbits_16      
root of   0 design levels: imm                 
root of   0 design levels: reg                 
root of   1 design levels: trf                 
root of   0 design levels: mux8of16bits        
root of   0 design levels: mux2ofnbits_4       
root of   0 design levels: inc_4               
root of   0 design levels: ccu                 
root of   2 design levels: dpu                 
root of   3 design levels: SAYAC_TOP           
Automatically selected SAYAC_TOP as design top module.

2.2. Analyzing design hierarchy..
Top module:  \SAYAC_TOP
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \trf
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4

2.3. Analyzing design hierarchy..
Top module:  \SAYAC_TOP
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \trf
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \SAYAC_TOP
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \trf
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4

3.1.2. Analyzing design hierarchy..
Top module:  \SAYAC_TOP
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \trf
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module comp.
Optimizing module iff.
<suppressed ~1 debug messages>
Optimizing module shu.
<suppressed ~1 debug messages>
Optimizing module mux2ofnbits_5.
Optimizing module llu.
Optimizing module asu.
Optimizing module cmp.
Optimizing module mdu.
Optimizing module inc_16.
<suppressed ~2 debug messages>
Optimizing module mux3of16bits.
Optimizing module add_16.
Optimizing module mux2ofnbits_16.
Optimizing module imm.
Optimizing module reg.
Optimizing module trf.
<suppressed ~1 debug messages>
Optimizing module mux8of16bits.
Optimizing module mux2ofnbits_4.
Optimizing module inc_4.
<suppressed ~2 debug messages>
Optimizing module ccu.
<suppressed ~23 debug messages>
Optimizing module dpu.
<suppressed ~1 debug messages>
Optimizing module SAYAC_TOP.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module comp.
Optimizing module iff.
Optimizing module shu.
Optimizing module mux2ofnbits_5.
Optimizing module llu.
Optimizing module asu.
Optimizing module cmp.
Optimizing module mdu.
Optimizing module inc_16.
Optimizing module mux3of16bits.
Optimizing module add_16.
Optimizing module mux2ofnbits_16.
Optimizing module imm.
Optimizing module reg.
Optimizing module trf.
Optimizing module mux8of16bits.
Optimizing module mux2ofnbits_4.
Optimizing module inc_4.
Optimizing module ccu.
Optimizing module dpu.
Optimizing module SAYAC_TOP.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \trf..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \SAYAC_TOP..
Removed 10 unused cells and 290 unused wires.
<suppressed ~30 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module SAYAC_TOP...
Checking module add_16...
Checking module asu...
Checking module ccu...
Checking module cmp...
Checking module comp...
Checking module dpu...
Checking module iff...
Checking module imm...
Checking module inc_16...
Checking module inc_4...
Checking module llu...
Checking module mdu...
Checking module mux2ofnbits_16...
Checking module mux2ofnbits_4...
Checking module mux2ofnbits_5...
Checking module mux3of16bits...
Checking module mux8of16bits...
Checking module reg...
Checking module shu...
Warning: found logic loop in module shu:
    cell \2131 ($pmux)
    wire \right_shu_reg [0]
Warning: found logic loop in module shu:
    cell \2149 ($pmux)
    wire \right_shu_reg [1]
Warning: found logic loop in module shu:
    cell \2167 ($pmux)
    wire \right_shu_reg [2]
Warning: found logic loop in module shu:
    cell \2185 ($pmux)
    wire \right_shu_reg [3]
Warning: found logic loop in module shu:
    cell \2203 ($pmux)
    wire \right_shu_reg [4]
Warning: found logic loop in module shu:
    cell \2221 ($pmux)
    wire \right_shu_reg [5]
Warning: found logic loop in module shu:
    cell \2239 ($pmux)
    wire \right_shu_reg [6]
Warning: found logic loop in module shu:
    cell \2257 ($pmux)
    wire \right_shu_reg [7]
Warning: found logic loop in module shu:
    cell \2275 ($pmux)
    wire \right_shu_reg [8]
Warning: found logic loop in module shu:
    cell \2293 ($pmux)
    wire \right_shu_reg [9]
Warning: found logic loop in module shu:
    cell \2311 ($pmux)
    wire \right_shu_reg [10]
Warning: found logic loop in module shu:
    cell \2329 ($pmux)
    wire \right_shu_reg [11]
Warning: found logic loop in module shu:
    cell \2347 ($pmux)
    wire \right_shu_reg [12]
Warning: found logic loop in module shu:
    cell \2365 ($pmux)
    wire \right_shu_reg [13]
Warning: found logic loop in module shu:
    cell \2383 ($pmux)
    wire \right_shu_reg [14]
Warning: found logic loop in module shu:
    cell \2401 ($pmux)
    wire \right_shu_reg [15]
Warning: found logic loop in module shu:
    cell \2418 ($pmux)
    wire \right_shu_reg [16]
Warning: found logic loop in module shu:
    cell \2435 ($pmux)
    wire \left_shu_reg [0]
Warning: found logic loop in module shu:
    cell \2453 ($pmux)
    wire \left_shu_reg [1]
Warning: found logic loop in module shu:
    cell \2471 ($pmux)
    wire \left_shu_reg [2]
Warning: found logic loop in module shu:
    cell \2489 ($pmux)
    wire \left_shu_reg [3]
Warning: found logic loop in module shu:
    cell \2507 ($pmux)
    wire \left_shu_reg [4]
Warning: found logic loop in module shu:
    cell \2525 ($pmux)
    wire \left_shu_reg [5]
Warning: found logic loop in module shu:
    cell \2543 ($pmux)
    wire \left_shu_reg [6]
Warning: found logic loop in module shu:
    cell \2561 ($pmux)
    wire \left_shu_reg [7]
Warning: found logic loop in module shu:
    cell \2579 ($pmux)
    wire \left_shu_reg [8]
Warning: found logic loop in module shu:
    cell \2597 ($pmux)
    wire \left_shu_reg [9]
Warning: found logic loop in module shu:
    cell \2615 ($pmux)
    wire \left_shu_reg [10]
Warning: found logic loop in module shu:
    cell \2633 ($pmux)
    wire \left_shu_reg [11]
Warning: found logic loop in module shu:
    cell \2651 ($pmux)
    wire \left_shu_reg [12]
Warning: found logic loop in module shu:
    cell \2669 ($pmux)
    wire \left_shu_reg [13]
Warning: found logic loop in module shu:
    cell \2687 ($pmux)
    wire \left_shu_reg [14]
Warning: found logic loop in module shu:
    cell \2704 ($pmux)
    wire \left_shu_reg [15]
Warning: found logic loop in module shu:
    cell \2706 ($pmux)
    wire \left_shu_reg [16]
Checking module trf...
Found and reported 34 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~162 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
<suppressed ~45 debug messages>
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 69 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~126 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
    New ctrl vector for $pmux cell \1192: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$830 }
    New ctrl vector for $pmux cell \1196: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$832 }
    New ctrl vector for $pmux cell \1200: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$834 }
    New ctrl vector for $pmux cell \1204: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$836 }
    New ctrl vector for $pmux cell \1208: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$838 }
    New ctrl vector for $pmux cell \1212: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$840 }
    New ctrl vector for $pmux cell \1216: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$842 }
    New ctrl vector for $pmux cell \1220: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$844 }
    New ctrl vector for $pmux cell \1224: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$846 }
    New ctrl vector for $pmux cell \1228: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$848 }
    New ctrl vector for $pmux cell \1233: { $auto$opt_reduce.cc:134:opt_mux$850 $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 }
    New ctrl vector for $pmux cell \1237: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$852 }
    New ctrl vector for $pmux cell \1245: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$854 }
    New ctrl vector for $pmux cell \1249: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$856 }
    New ctrl vector for $pmux cell \1253: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$858 }
    New ctrl vector for $pmux cell \1257: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$860 }
    New ctrl vector for $pmux cell \1261: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$862 }
    New ctrl vector for $pmux cell \1265: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$864 }
    New ctrl vector for $pmux cell \1291: $auto$ghdl.cc:759:import_module$417
    New ctrl vector for $pmux cell \1001: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \1004: { }
    New ctrl vector for $pmux cell \1007: $auto$ghdl.cc:759:import_module$352
    New ctrl vector for $pmux cell \1356: { $auto$ghdl.cc:759:import_module$352 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \1010: { }
    New ctrl vector for $pmux cell \1013: { }
    New ctrl vector for $pmux cell \1015: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \1018: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \1021: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \1024: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \1027: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \212: { $auto$ghdl.cc:759:import_module$419 $auto$ghdl.cc:759:import_module$418 }
    New ctrl vector for $pmux cell \217: $auto$opt_reduce.cc:134:opt_mux$866
    New ctrl vector for $pmux cell \221: $auto$ghdl.cc:759:import_module$416
    New ctrl vector for $pmux cell \225: { $auto$ghdl.cc:759:import_module$419 $auto$ghdl.cc:759:import_module$418 }
    New ctrl vector for $pmux cell \229: { $auto$ghdl.cc:759:import_module$419 $auto$ghdl.cc:759:import_module$418 }
    New ctrl vector for $pmux cell \235: $auto$opt_reduce.cc:134:opt_mux$868
    New ctrl vector for $pmux cell \239: $auto$ghdl.cc:759:import_module$419
    New ctrl vector for $pmux cell \244: $auto$opt_reduce.cc:134:opt_mux$870
    New ctrl vector for $pmux cell \248: $auto$ghdl.cc:759:import_module$419
    New ctrl vector for $pmux cell \253: $auto$opt_reduce.cc:134:opt_mux$872
    New ctrl vector for $pmux cell \258: $auto$opt_reduce.cc:134:opt_mux$874
    New ctrl vector for $pmux cell \1055: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$876 }
    New ctrl vector for $pmux cell \1059: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$878 }
    New ctrl vector for $pmux cell \1063: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$880 }
    New ctrl vector for $pmux cell \1067: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$882 }
    New ctrl vector for $pmux cell \1071: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$884 }
    New ctrl vector for $pmux cell \1075: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$886 }
    New ctrl vector for $pmux cell \1079: { $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$888 }
    New ctrl vector for $pmux cell \1083: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$890 }
    New ctrl vector for $pmux cell \1087: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$892 }
    New ctrl vector for $pmux cell \1091: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$894 }
    New ctrl vector for $pmux cell \1095: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$896 }
    New ctrl vector for $pmux cell \1099: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$898 }
    New ctrl vector for $pmux cell \1103: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$900 }
    New ctrl vector for $pmux cell \397: $auto$opt_reduce.cc:134:opt_mux$902
    New ctrl vector for $pmux cell \1107: { $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$904 }
    New ctrl vector for $pmux cell \1115: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$906 }
    New ctrl vector for $pmux cell \1119: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$908 }
    New ctrl vector for $pmux cell \1123: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$910 }
    New ctrl vector for $pmux cell \1127: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$912 }
    New ctrl vector for $pmux cell \1136: { $auto$opt_reduce.cc:134:opt_mux$914 $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 }
    New ctrl vector for $pmux cell \1140: { $auto$ghdl.cc:759:import_module$349 $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$916 }
    New ctrl vector for $pmux cell \1144: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$918 }
    New ctrl vector for $pmux cell \1148: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$920 }
    New ctrl vector for $pmux cell \1152: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$922 }
    New ctrl vector for $pmux cell \505: { $auto$ghdl.cc:759:import_module$155 $auto$ghdl.cc:759:import_module$149 $auto$ghdl.cc:759:import_module$144 $auto$ghdl.cc:759:import_module$140 $auto$ghdl.cc:759:import_module$133 }
    New ctrl vector for $pmux cell \507: $auto$ghdl.cc:759:import_module$160
    New ctrl vector for $pmux cell \519: $auto$opt_reduce.cc:134:opt_mux$924
    New ctrl vector for $pmux cell \547: $auto$opt_reduce.cc:134:opt_mux$926
    New ctrl vector for $pmux cell \552: $auto$opt_reduce.cc:134:opt_mux$928
    New ctrl vector for $pmux cell \557: { $auto$ghdl.cc:759:import_module$209 $auto$ghdl.cc:759:import_module$165 $auto$opt_reduce.cc:134:opt_mux$930 }
    New ctrl vector for $pmux cell \560: { }
    New ctrl vector for $pmux cell \563: $auto$ghdl.cc:759:import_module$128
    New ctrl vector for $pmux cell \568: $auto$opt_reduce.cc:134:opt_mux$932
    New ctrl vector for $pmux cell \573: $auto$opt_reduce.cc:134:opt_mux$934
    New ctrl vector for $pmux cell \575: $auto$ghdl.cc:759:import_module$209
    New ctrl vector for $pmux cell \578: { $auto$ghdl.cc:759:import_module$209 $auto$ghdl.cc:759:import_module$165 }
    New ctrl vector for $pmux cell \581: $auto$ghdl.cc:759:import_module$209
    New ctrl vector for $pmux cell \587: { $auto$ghdl.cc:759:import_module$209 $auto$ghdl.cc:759:import_module$165 $auto$opt_reduce.cc:134:opt_mux$936 }
    New ctrl vector for $pmux cell \591: $auto$ghdl.cc:759:import_module$129
    New ctrl vector for $pmux cell \595: $auto$ghdl.cc:759:import_module$128
    New ctrl vector for $pmux cell \599: $auto$ghdl.cc:759:import_module$129
    New ctrl vector for $pmux cell \602: { $auto$ghdl.cc:759:import_module$217 $auto$ghdl.cc:759:import_module$213 }
    New ctrl vector for $pmux cell \605: { $auto$ghdl.cc:759:import_module$217 $auto$ghdl.cc:759:import_module$213 }
    New ctrl vector for $pmux cell \611: { $auto$ghdl.cc:759:import_module$209 $auto$ghdl.cc:759:import_module$165 $auto$opt_reduce.cc:134:opt_mux$938 }
    New ctrl vector for $pmux cell \616: $auto$opt_reduce.cc:134:opt_mux$940
    New ctrl vector for $pmux cell \621: $auto$opt_reduce.cc:134:opt_mux$942
    New ctrl vector for $pmux cell \1156: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$944 }
    New ctrl vector for $pmux cell \627: { }
    New ctrl vector for $pmux cell \630: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \635: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$946 }
    New ctrl vector for $pmux cell \640: $auto$opt_reduce.cc:134:opt_mux$948
    New ctrl vector for $pmux cell \647: $auto$opt_reduce.cc:134:opt_mux$950
    New ctrl vector for $pmux cell \650: { }
    New ctrl vector for $pmux cell \653: { }
    New ctrl vector for $pmux cell \658: $auto$opt_reduce.cc:134:opt_mux$952
    New ctrl vector for $pmux cell \668: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$954 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \675: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$956 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \685: $auto$opt_reduce.cc:134:opt_mux$958
    New ctrl vector for $pmux cell \688: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \701: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$960 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \704: { }
    New ctrl vector for $pmux cell \717: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$962 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \720: { $auto$ghdl.cc:759:import_module$446 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \723: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \726: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \729: { $auto$ghdl.cc:759:import_module$446 $auto$ghdl.cc:759:import_module$422 }
    New ctrl vector for $pmux cell \744: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$964 }
    New ctrl vector for $pmux cell \747: { }
    New ctrl vector for $pmux cell \750: { }
    New ctrl vector for $pmux cell \753: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \756: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \760: $auto$ghdl.cc:759:import_module$424
    New ctrl vector for $pmux cell \766: $auto$opt_reduce.cc:134:opt_mux$966
    New ctrl vector for $pmux cell \769: $auto$ghdl.cc:759:import_module$428
    New ctrl vector for $pmux cell \775: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$968 }
    New ctrl vector for $pmux cell \781: { $auto$ghdl.cc:759:import_module$446 $auto$opt_reduce.cc:134:opt_mux$970 }
    New ctrl vector for $pmux cell \786: $auto$opt_reduce.cc:134:opt_mux$972
    New ctrl vector for $pmux cell \791: $auto$opt_reduce.cc:134:opt_mux$974
    New ctrl vector for $pmux cell \796: $auto$opt_reduce.cc:134:opt_mux$976
    New ctrl vector for $pmux cell \799: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \802: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \807: $auto$opt_reduce.cc:134:opt_mux$978
    New ctrl vector for $pmux cell \810: { }
    New ctrl vector for $pmux cell \814: $auto$ghdl.cc:759:import_module$430
    New ctrl vector for $pmux cell \818: $auto$ghdl.cc:759:import_module$432
    New ctrl vector for $pmux cell \821: { $auto$ghdl.cc:759:import_module$351 $auto$ghdl.cc:759:import_module$350 }
    New ctrl vector for $pmux cell \824: { }
    New ctrl vector for $pmux cell \828: $auto$ghdl.cc:759:import_module$350
    New ctrl vector for $pmux cell \832: $auto$ghdl.cc:759:import_module$351
    New ctrl vector for $pmux cell \835: { $auto$ghdl.cc:759:import_module$351 $auto$ghdl.cc:759:import_module$350 }
    New ctrl vector for $pmux cell \838: { }
    New ctrl vector for $pmux cell \841: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \856: { $auto$ghdl.cc:759:import_module$446 $auto$ghdl.cc:759:import_module$422 $auto$opt_reduce.cc:134:opt_mux$980 }
    New ctrl vector for $pmux cell \859: { }
    New ctrl vector for $pmux cell \862: { }
    New ctrl vector for $pmux cell \865: { }
    New ctrl vector for $pmux cell \868: { }
    New ctrl vector for $pmux cell \870: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \872: $auto$ghdl.cc:759:import_module$446
    New ctrl vector for $pmux cell \1160: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$982 }
    New ctrl vector for $pmux cell \1164: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$984 }
    New ctrl vector for $pmux cell \1168: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$986 }
    New ctrl vector for $pmux cell \1172: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$988 }
    New ctrl vector for $pmux cell \936: $auto$ghdl.cc:759:import_module$415
    New ctrl vector for $pmux cell \939: $auto$ghdl.cc:759:import_module$416
    New ctrl vector for $pmux cell \943: $auto$ghdl.cc:759:import_module$415
    New ctrl vector for $pmux cell \946: $auto$ghdl.cc:759:import_module$415
    New ctrl vector for $pmux cell \950: $auto$opt_reduce.cc:134:opt_mux$990
    New ctrl vector for $pmux cell \954: $auto$opt_reduce.cc:134:opt_mux$992
    New ctrl vector for $pmux cell \957: $auto$ghdl.cc:759:import_module$416
    New ctrl vector for $pmux cell \962: $auto$ghdl.cc:759:import_module$415
    New ctrl vector for $pmux cell \965: $auto$ghdl.cc:759:import_module$416
    New ctrl vector for $pmux cell \968: $auto$ghdl.cc:759:import_module$415
    New ctrl vector for $pmux cell \971: $auto$ghdl.cc:759:import_module$416
    New ctrl vector for $pmux cell \1176: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$994 }
    New ctrl vector for $pmux cell \1180: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$996 }
    New ctrl vector for $pmux cell \1184: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$998 }
    New ctrl vector for $pmux cell \1188: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$1000 }
    New ctrl vector for $pmux cell \981: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \985: $auto$ghdl.cc:759:import_module$352
    New ctrl vector for $pmux cell \987: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \995: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \998: $auto$ghdl.cc:759:import_module$422
    New ctrl vector for $pmux cell \1212: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$1002 }
    New ctrl vector for $pmux cell \1216: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1004 }
    New ctrl vector for $pmux cell \1220: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$1006 }
    New ctrl vector for $pmux cell \1224: { $auto$ghdl.cc:759:import_module$450 $auto$opt_reduce.cc:134:opt_mux$1008 }
    New ctrl vector for $pmux cell \1233: { $auto$opt_reduce.cc:134:opt_mux$1010 $auto$ghdl.cc:759:import_module$412 }
    New ctrl vector for $pmux cell \1245: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1012 }
    New ctrl vector for $pmux cell \1249: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1014 }
    New ctrl vector for $pmux cell \1253: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1016 }
    New ctrl vector for $pmux cell \1257: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1018 }
    New ctrl vector for $pmux cell \1055: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1020 }
    New ctrl vector for $pmux cell \1075: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1022 }
    New ctrl vector for $pmux cell \1079: { $auto$ghdl.cc:759:import_module$358 $auto$opt_reduce.cc:134:opt_mux$1024 }
    New ctrl vector for $pmux cell \1107: { $auto$ghdl.cc:759:import_module$358 $auto$opt_reduce.cc:134:opt_mux$1026 }
    New ctrl vector for $pmux cell \1136: { $auto$opt_reduce.cc:134:opt_mux$1028 $auto$ghdl.cc:759:import_module$412 }
    New ctrl vector for $pmux cell \1140: { $auto$ghdl.cc:759:import_module$349 $auto$opt_reduce.cc:134:opt_mux$1030 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1001: { $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1003: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1005: { $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1007: { $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1009: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1011: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1013: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1015: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1017: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1019: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1021: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1023: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1025: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1027: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$358 $auto$ghdl.cc:759:import_module$349 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$1029: { $auto$ghdl.cc:759:import_module$450 $auto$ghdl.cc:759:import_module$412 $auto$ghdl.cc:759:import_module$358 }
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
    New ctrl vector for $pmux cell \2167: { $auto$opt_reduce.cc:134:opt_mux$1032 $auto$ghdl.cc:759:import_module$714 $auto$ghdl.cc:759:import_module$713 $auto$ghdl.cc:759:import_module$712 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2185: { $auto$opt_reduce.cc:134:opt_mux$1034 $auto$ghdl.cc:759:import_module$713 $auto$ghdl.cc:759:import_module$712 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2203: { $auto$opt_reduce.cc:134:opt_mux$1036 $auto$ghdl.cc:759:import_module$712 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2221: { $auto$opt_reduce.cc:134:opt_mux$1038 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2239: { $auto$opt_reduce.cc:134:opt_mux$1040 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2257: { $auto$opt_reduce.cc:134:opt_mux$1042 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2275: { $auto$opt_reduce.cc:134:opt_mux$1044 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2293: { $auto$opt_reduce.cc:134:opt_mux$1046 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2311: { $auto$opt_reduce.cc:134:opt_mux$1048 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2329: { $auto$opt_reduce.cc:134:opt_mux$1050 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2347: { $auto$opt_reduce.cc:134:opt_mux$1052 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2365: { $auto$opt_reduce.cc:134:opt_mux$1054 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2383: { $auto$opt_reduce.cc:134:opt_mux$1056 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2401: { $auto$opt_reduce.cc:134:opt_mux$1058 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2418: $auto$opt_reduce.cc:134:opt_mux$1060
    New ctrl vector for $pmux cell \2435: { $auto$opt_reduce.cc:134:opt_mux$1062 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2453: { $auto$opt_reduce.cc:134:opt_mux$1064 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2471: { $auto$opt_reduce.cc:134:opt_mux$1066 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2489: { $auto$opt_reduce.cc:134:opt_mux$1068 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2507: { $auto$opt_reduce.cc:134:opt_mux$1070 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2525: { $auto$opt_reduce.cc:134:opt_mux$1072 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2543: { $auto$opt_reduce.cc:134:opt_mux$1074 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2561: { $auto$opt_reduce.cc:134:opt_mux$1076 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2579: { $auto$opt_reduce.cc:134:opt_mux$1078 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2597: { $auto$opt_reduce.cc:134:opt_mux$1080 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2615: { $auto$opt_reduce.cc:134:opt_mux$1082 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2633: { $auto$opt_reduce.cc:134:opt_mux$1084 $auto$ghdl.cc:759:import_module$712 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2651: { $auto$opt_reduce.cc:134:opt_mux$1086 $auto$ghdl.cc:759:import_module$713 $auto$ghdl.cc:759:import_module$712 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2669: { $auto$opt_reduce.cc:134:opt_mux$1088 $auto$ghdl.cc:759:import_module$714 $auto$ghdl.cc:759:import_module$713 $auto$ghdl.cc:759:import_module$712 $auto$ghdl.cc:759:import_module$711 $auto$ghdl.cc:759:import_module$710 $auto$ghdl.cc:759:import_module$709 $auto$ghdl.cc:759:import_module$708 $auto$ghdl.cc:759:import_module$707 $auto$ghdl.cc:759:import_module$706 $auto$ghdl.cc:759:import_module$705 $auto$ghdl.cc:759:import_module$704 $auto$ghdl.cc:759:import_module$703 $auto$ghdl.cc:759:import_module$702 $auto$ghdl.cc:759:import_module$701 }
    New ctrl vector for $pmux cell \2706: $auto$opt_reduce.cc:134:opt_mux$1090
    New ctrl vector for $pmux cell \2720: { $auto$opt_reduce.cc:134:opt_mux$1094 $auto$opt_reduce.cc:134:opt_mux$1092 }
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 225 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~462 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
<suppressed ~45 debug messages>
Finding identical cells in module `\trf'.
Removed a total of 169 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 12 unused cells and 262 unused wires.
<suppressed ~15 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~143 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
    New ctrl vector for $pmux cell \557: { $auto$opt_reduce.cc:134:opt_mux$1096 $auto$opt_reduce.cc:134:opt_mux$930 }
    New ctrl vector for $pmux cell \587: { $auto$opt_reduce.cc:134:opt_mux$1098 $auto$opt_reduce.cc:134:opt_mux$936 }
    New ctrl vector for $pmux cell \602: $auto$opt_reduce.cc:134:opt_mux$1100
    New ctrl vector for $pmux cell \605: $auto$opt_reduce.cc:134:opt_mux$1102
    New ctrl vector for $pmux cell \611: { $auto$opt_reduce.cc:134:opt_mux$1104 $auto$opt_reduce.cc:134:opt_mux$936 }
    New ctrl vector for $pmux cell \821: $auto$opt_reduce.cc:134:opt_mux$1106
    New ctrl vector for $pmux cell \959: $auto$opt_reduce.cc:134:opt_mux$1108
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 7 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~15 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 5 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~143 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.6.20. Executing OPT_DFF pass (perform DFF optimizations).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking ccu.pstate as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~143 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \2738 ($adff) from module iff (D = \inflag, Q = \outflag_ff).
Adding EN signal on \1903 ($adff) from module mdu (D = \outmdu_reg [31:16], Q = \outmdu2).
Adding EN signal on \1892 ($adff) from module mdu (D = \outmdu_reg [15:0], Q = \outmdu1).
Adding EN signal on \1680 ($adff) from module reg (D = \inreg, Q = \outreg).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [15:0]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [31:16]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [47:32]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [63:48]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [79:64]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [95:80]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [111:96]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [127:112]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [143:128]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [159:144]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [175:160]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [191:176]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [207:192]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [223:208]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [239:224]).
Adding EN signal on \1487 ($adff) from module trf (D = \write_data, Q = \memtrf [255:240]).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 21 unused cells and 21 unused wires.
<suppressed ~26 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 32) from port A of cell add_16.\1745 ($add).
Removed top 16 bits (of 32) from port B of cell add_16.\1745 ($add).
Removed top 16 bits (of 32) from port Y of cell add_16.\1745 ($add).
Removed top 16 bits (of 32) from port A of cell asu.\1934 ($add).
Removed top 16 bits (of 32) from port B of cell asu.\1934 ($add).
Removed top 16 bits (of 32) from port Y of cell asu.\1934 ($add).
Removed top 16 bits (of 32) from port A of cell asu.\1942 ($sub).
Removed top 16 bits (of 32) from port B of cell asu.\1942 ($sub).
Removed top 16 bits (of 32) from port Y of cell asu.\1942 ($sub).
Removed top 16 bits (of 32) from wire asu.$auto$ghdl.cc:759:import_module$687.
Removed top 16 bits (of 32) from wire asu.$auto$ghdl.cc:759:import_module$689.
Removed top 2 bits (of 3) from port B of cell ccu.\300 ($eq).
Removed top 2 bits (of 3) from port B of cell ccu.\328 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\340 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\354 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\399 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\521 ($eq).
Removed top 2 bits (of 8) from mux cell ccu.\621 ($mux).
Removed top 2 bits (of 8) from mux cell ccu.\872 ($mux).
Removed top 2 bits (of 8) from mux cell ccu.\1265 ($pmux).
Removed top 3 bits (of 4) from port B of cell ccu.\1276 ($eq).
Removed top 1 bits (of 2) from port B of cell ccu.\1280 ($eq).
Removed top 2 bits (of 4) from port B of cell ccu.\1293 ($eq).
Removed top 2 bits (of 4) from port B of cell ccu.\1295 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1297 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1300 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1303 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1306 ($eq).
Removed top 1 bits (of 2) from port B of cell ccu.\1363 ($eq).
Removed top 2 bits (of 8) from wire ccu.$auto$ghdl.cc:759:import_module$236.
Removed top 2 bits (of 8) from wire ccu.$auto$ghdl.cc:759:import_module$289.
Removed top 15 bits (of 32) from port A of cell cmp.\1919 ($gt).
Removed top 15 bits (of 32) from port B of cell cmp.\1919 ($gt).
Converting cell cmp.\1919 ($gt) from signed to unsigned.
Removed top 1 bits (of 17) from port A of cell cmp.\1919 ($gt).
Removed top 1 bits (of 17) from port B of cell cmp.\1919 ($gt).
Removed top 1 bits (of 16) from wire comp.carry.
Removed top 2 bits (of 8) from wire dpu.inflag.
Removed top 1 bits (of 16) from wire inc_16.carry.
Removed top 1 bits (of 4) from wire inc_4.carry.
Removed top 15 bits (of 32) from port A of cell mdu.\1867 ($mod).
Removed top 15 bits (of 32) from port B of cell mdu.\1867 ($mod).
Removed top 15 bits (of 32) from port A of cell mdu.\1874 ($div).
Removed top 15 bits (of 32) from port B of cell mdu.\1874 ($div).
Removed top 15 bits (of 32) from port A of cell mdu.\1859 ($mul).
Removed top 15 bits (of 32) from port B of cell mdu.\1859 ($mul).
Converting cell mdu.\1859 ($mul) from signed to unsigned.
Removed top 1 bits (of 32) from port Y of cell mdu.\1859 ($mul).
Removed top 1 bits (of 17) from port A of cell mdu.\1859 ($mul).
Removed top 1 bits (of 17) from port B of cell mdu.\1859 ($mul).
Removed top 1 bits (of 32) from wire mdu.$auto$ghdl.cc:759:import_module$671.
Removed top 3 bits (of 32) from wire mdu.outmdu_reg.
Removed top 3 bits (of 4) from port B of cell shu.\1982 ($eq).
Removed top 2 bits (of 4) from port B of cell shu.\1989 ($eq).
Removed top 2 bits (of 4) from port B of cell shu.\1996 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\2004 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\2013 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\2022 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\2031 ($eq).
Removed top 2 bits (of 3) from port B of cell shu.\2711 ($eq).
Removed top 1 bits (of 3) from port B of cell shu.\2713 ($eq).
Removed top 1 bits (of 17) from mux cell shu.\2720 ($pmux).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 3 unused cells and 11 unused wires.
<suppressed ~12 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module SAYAC_TOP:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module add_16:
  creating $macc model for \1745 ($add).
  creating $alu model for $macc \1745.
  creating $alu cell for \1745: $auto$alumacc.cc:485:replace_alu$1141
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module asu:
  creating $macc model for \1934 ($add).
  creating $macc model for \1942 ($sub).
  creating $alu model for $macc \1942.
  creating $alu model for $macc \1934.
  creating $alu cell for \1934: $auto$alumacc.cc:485:replace_alu$1144
  creating $alu cell for \1942: $auto$alumacc.cc:485:replace_alu$1147
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ccu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cmp:
  creating $alu model for \1919 ($gt): new $alu
  creating $alu model for \1914 ($eq): merged with \1919.
  creating $alu cell for \1919, \1914: $auto$alumacc.cc:485:replace_alu$1151
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module comp:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module iff:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module inc_16:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module inc_4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module llu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mdu:
  creating $macc model for \1859 ($mul).
  creating $macc cell for \1859: $auto$alumacc.cc:365:replace_macc$1162
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module mux2ofnbits_16:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2ofnbits_4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2ofnbits_5:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux3of16bits:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux8of16bits:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module shu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module trf:
  creating $macc model for \1479 ($sub).
  creating $macc model for \1490 ($sub).
  creating $macc model for \1500 ($sub).
  creating $alu model for $macc \1500.
  creating $alu model for $macc \1490.
  creating $alu model for $macc \1479.
  creating $alu cell for \1479: $auto$alumacc.cc:485:replace_alu$1163
  creating $alu cell for \1490: $auto$alumacc.cc:485:replace_alu$1166
  creating $alu cell for \1500: $auto$alumacc.cc:485:replace_alu$1169
  created 3 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module mdu that may be considered for resource sharing.
  Analyzing resource sharing options for \1874 ($div):
    Found 1 activation_patterns using ctrl signal { $auto$ghdl.cc:759:import_module$675 \arithmul }.
    No candidates found.
  Analyzing resource sharing options for \1867 ($mod):
    Found 1 activation_patterns using ctrl signal { $auto$ghdl.cc:759:import_module$675 \arithmul }.
    No candidates found.

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
<suppressed ~1 debug messages>
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~121 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~121 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
<suppressed ~130 debug messages>
Optimizing module cmp.
<suppressed ~2 debug messages>
Optimizing module comp.
Optimizing module dpu.
<suppressed ~1 debug messages>
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
<suppressed ~1 debug messages>
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
<suppressed ~3 debug messages>
Optimizing module trf.
<suppressed ~46 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 3 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 9 unused cells and 72 unused wires.
<suppressed ~13 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~102 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
    Consolidated identical input bits for $mux cell \1291:
      Old ports: A=2'00, B=2'10, Y=$auto$ghdl.cc:759:import_module$421
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:759:import_module$421 [1]
      New connections: $auto$ghdl.cc:759:import_module$421 [0] = 1'0
    Consolidated identical input bits for $mux cell \1367:
      Old ports: A=2'10, B=2'00, Y=$auto$ghdl.cc:759:import_module$451
      New ports: A=1'1, B=1'0, Y=$auto$ghdl.cc:759:import_module$451 [1]
      New connections: $auto$ghdl.cc:759:import_module$451 [0] = 1'0
    Consolidated identical input bits for $mux cell \621:
      Old ports: A=6'000000, B=6'110000, Y=$auto$ghdl.cc:759:import_module$236
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:759:import_module$236 [4]
      New connections: { $auto$ghdl.cc:759:import_module$236 [5] $auto$ghdl.cc:759:import_module$236 [3:0] } = { $auto$ghdl.cc:759:import_module$236 [4] 4'0000 }
  Optimizing cells in module \ccu.
    Consolidated identical input bits for $mux cell \1369:
      Old ports: A=$auto$ghdl.cc:759:import_module$451, B=2'00, Y=$auto$ghdl.cc:759:import_module$452
      New ports: A=$auto$ghdl.cc:759:import_module$451 [1], B=1'0, Y=$auto$ghdl.cc:759:import_module$452 [1]
      New connections: $auto$ghdl.cc:759:import_module$452 [0] = 1'0
    Consolidated identical input bits for $mux cell \872:
      Old ports: A=6'000000, B=$auto$ghdl.cc:759:import_module$236, Y=$auto$ghdl.cc:759:import_module$289
      New ports: A=1'0, B=$auto$ghdl.cc:759:import_module$236 [4], Y=$auto$ghdl.cc:759:import_module$289 [4]
      New connections: { $auto$ghdl.cc:759:import_module$289 [5] $auto$ghdl.cc:759:import_module$289 [3:0] } = { $auto$ghdl.cc:759:import_module$289 [4] 4'0000 }
  Optimizing cells in module \ccu.
    Consolidated identical input bits for $mux cell \1265:
      Old ports: A=$auto$ghdl.cc:759:import_module$289, B=6'000000, Y=\selflag [5:0]
      New ports: A=$auto$ghdl.cc:759:import_module$289 [4], B=1'0, Y=\selflag [4]
      New connections: { \selflag [5] \selflag [3:0] } = { \selflag [4] 4'0000 }
    Consolidated identical input bits for $mux cell \1376:
      Old ports: A=2'00, B=$auto$ghdl.cc:759:import_module$452, Y=$auto$ghdl.cc:759:import_module$456
      New ports: A=1'0, B=$auto$ghdl.cc:759:import_module$452 [1], Y=$auto$ghdl.cc:759:import_module$456 [1]
      New connections: $auto$ghdl.cc:759:import_module$456 [0] = 1'0
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 7 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
<suppressed ~5 debug messages>
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~103 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~6 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 2 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \trf..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~102 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
  Optimizing cells in module \trf.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$60e8138c14f9daeb5369878e57f9a804623b8bc8\_90_pmux for cells of type $pmux.
Using template $paramod$556548cb7038fa09465db9fdc5b10cb4e4ea85e6\_90_pmux for cells of type $pmux.
Using template $paramod$3ab9a015ab781a81f86ab59e92093de7732cf40e\_90_pmux for cells of type $pmux.
Using template $paramod$f1a1302b8e09c99a2717f99de3f6cd758facf154\_90_pmux for cells of type $pmux.
Using template $paramod$29b56fed7bdb16c8b09b02aa2858037931055703\_90_pmux for cells of type $pmux.
Using template $paramod$0e0051568375348277517457a77d9a6514e45e4f\_90_pmux for cells of type $pmux.
Using template $paramod$7433a73939f62b85caa06b2dbffe4eadcc0f64ca\_90_pmux for cells of type $pmux.
Using template $paramod$eb7b5fa594d21f32e2ff3bd05b81752f0f326d5f\_90_pmux for cells of type $pmux.
Using template $paramod$aa21a8cfcdb2d038c61c16c25c37cdf209d597be\_90_pmux for cells of type $pmux.
Using template $paramod$bf541dd3c0ba8228982b61e7bfbc350a2c253f4c\_90_pmux for cells of type $pmux.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$b3b6ac92d800c6f07aa48f510f923d86a674e5a7\_90_pmux for cells of type $pmux.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$0d149ffe75563ef6fcc1a3dddc59d00af28651a7\_90_pmux for cells of type $pmux.
Using template $paramod$73f03f2a046c2525d676de29570563a5b39716c2\_90_mod for cells of type $mod.
Using template $paramod$73f03f2a046c2525d676de29570563a5b39716c2\_90_div for cells of type $div.
Using extmapper simplemap for cells of type $or.
Using extmapper maccmap for cells of type $macc.
  add \in1 * \in2 (16x16 bits, unsigned)
Using template $paramod$73f03f2a046c2525d676de29570563a5b39716c2\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000011111 for cells of type $fa.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000100000 for cells of type $__div_mod_u.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$789c344356a154d2afc7b832b41d1067dbc946ba\_90_alu for cells of type $alu.
Using template $paramod$e39069e3f4ee35c1eea86993bd74689959babaab\_90_alu for cells of type $alu.
Using template $paramod$d7aca3dc44b07ff19908fb1a3b606577588c15f1\_90_alu for cells of type $alu.
Using template $paramod$f9e3a3c4b84f99cb56fad07743ec44ad55b11c8b\_90_alu for cells of type $alu.
Using template $paramod$dd5ba471f7dcf35707f23b88cfd15b9582f97277\_90_alu for cells of type $alu.
Using template $paramod$b7531bc0616f8d4cdd8159edd2237c9ddbb2ce01\_90_alu for cells of type $alu.
Using template $paramod$ff8ba121d2f8e85b775c9f35ef677a1a276e7e1b\_90_alu for cells of type $alu.
Using template $paramod$9a66d4bebbc4fab84566caffef9f094a1a467389\_90_alu for cells of type $alu.
Using template $paramod$57bc309a5d8a948cec8981d26d896ee1cbf54d58\_90_alu for cells of type $alu.
Using template $paramod$f94cfdb8ad389f4fc4515bcb65bccd7e2d189e95\_90_alu for cells of type $alu.
Using template $paramod$2a25669ccd39fe7c0fbfb2a4d17416fc78667f00\_90_alu for cells of type $alu.
Using template $paramod$d9397dfdf5f7cf5715aebc9527845402880218a0\_90_alu for cells of type $alu.
Using template $paramod$acc477ace2583cc2ee0cf651c72a385d2bbbe9f1\_90_alu for cells of type $alu.
Using template $paramod$415abdcadc251df4f0f033b62b8f3296b8461b4e\_90_alu for cells of type $alu.
Using template $paramod$6573c1c269218f299badf6e04ca86aa37fdb352c\_90_alu for cells of type $alu.
Using template $paramod$6a21b72c9c0b32e81b169c7e08a4d8b9c462448f\_90_alu for cells of type $alu.
Using template $paramod$324e0706ebb77f1915b22f4a136962ec3fd1d7ff\_90_alu for cells of type $alu.
Using template $paramod$461fc931d630cb01bec1fea87f37fbcc53f6f6a4\_90_alu for cells of type $alu.
Using template $paramod$fe074227b1c5fbaa1ea56076182c29dbcf3a782a\_90_alu for cells of type $alu.
Using template $paramod$85502450775e62e9c6a2fe29020b3433d4335647\_90_alu for cells of type $alu.
Using template $paramod$e32c921f95fe0e2350204f4ecefc9e296355521b\_90_alu for cells of type $alu.
Using template $paramod$05d913fba320393c7e943e625bef3af776153b60\_90_alu for cells of type $alu.
Using template $paramod$8e07e2c0a3efc148d2f3714f3901076678774ed1\_90_alu for cells of type $alu.
Using template $paramod$5b7e592b3c2951af6800b7fd597f66a79b72b91c\_90_alu for cells of type $alu.
Using template $paramod$90182783100594e2dd636a282c4723cfc9adaedd\_90_alu for cells of type $alu.
Using template $paramod$851c5c9b30913ea2deae68e3ca9e9c4e649723bc\_90_alu for cells of type $alu.
Using template $paramod$1445aacdb5f2a1ef9fedf1373097ffa45438211d\_90_alu for cells of type $alu.
Using template $paramod$7add42b712fe5bbbba521e93062103d6bf78a453\_90_alu for cells of type $alu.
Using template $paramod$b6f86f6a0c43c26b22ee55f51e05d5951f0e6562\_90_alu for cells of type $alu.
Using template $paramod$044fdceace8c449ec99f900b42120ac005ff4065\_90_alu for cells of type $alu.
Using template $paramod$b6b58933bcf3c8b9e3e5de18c2637bd0e12c7c47\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~38697 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
<suppressed ~20 debug messages>
Optimizing module asu.
<suppressed ~39 debug messages>
Optimizing module ccu.
<suppressed ~145 debug messages>
Optimizing module cmp.
<suppressed ~19 debug messages>
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
<suppressed ~35405 debug messages>
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
<suppressed ~102 debug messages>
Optimizing module trf.
<suppressed ~8 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~447 debug messages>
Finding identical cells in module `\cmp'.
<suppressed ~33 debug messages>
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
<suppressed ~87342 debug messages>
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
<suppressed ~1299 debug messages>
Finding identical cells in module `\trf'.
Removed a total of 29707 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 912 unused cells and 30448 unused wires.
<suppressed ~920 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\SAYAC_TOP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `\add_16' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

3.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:            ANDNOT cells:       23
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:       11
ABC RESULTS:                OR cells:       16
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       18
ABC RESULTS:               XOR cells:       13
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.3. Extracting gate netlist of module `\asu' to `<abc-temp-dir>/input.blif'..
Extracted 246 gates and 281 wires to a netlist network with 34 inputs and 16 outputs.

3.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       12
ABC RESULTS:            ANDNOT cells:       81
ABC RESULTS:               MUX cells:       16
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:       40
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:              XNOR cells:       20
ABC RESULTS:               XOR cells:       42
ABC RESULTS:        internal signals:      231
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.4. Extracting gate netlist of module `\ccu' to `<abc-temp-dir>/input.blif'..
Extracted 378 gates and 396 wires to a netlist network with 17 inputs and 49 outputs.

3.22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       21
ABC RESULTS:            ANDNOT cells:      124
ABC RESULTS:               MUX cells:        8
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       39
ABC RESULTS:               NOT cells:       10
ABC RESULTS:                OR cells:       88
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:        internal signals:      330
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       49
Removing temp directory.

3.22.5. Extracting gate netlist of module `\cmp' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 131 wires to a netlist network with 32 inputs and 2 outputs.

3.22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:       97
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        2
Removing temp directory.

3.22.6. Extracting gate netlist of module `\comp' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 64 wires to a netlist network with 17 inputs and 16 outputs.

3.22.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.6.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       14
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.7. Extracting gate netlist of module `\dpu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.8. Extracting gate netlist of module `\iff' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

3.22.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.8.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.9. Extracting gate netlist of module `\imm' to `<abc-temp-dir>/input.blif'..
Extracted 80 gates and 102 wires to a netlist network with 21 inputs and 16 outputs.

3.22.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:               MUX cells:       56
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOT cells:        2
ABC RESULTS:        internal signals:       65
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.10. Extracting gate netlist of module `\inc_16' to `<abc-temp-dir>/input.blif'..
Extracted 30 gates and 46 wires to a netlist network with 16 inputs and 16 outputs.

3.22.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.10.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:       13
ABC RESULTS:                OR cells:       12
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.11. Extracting gate netlist of module `\inc_4' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

3.22.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.11.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.12. Extracting gate netlist of module `\llu' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 102 wires to a netlist network with 51 inputs and 17 outputs.

3.22.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:               MUX cells:       16
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       17
Removing temp directory.

3.22.13. Extracting gate netlist of module `\mdu' to `<abc-temp-dir>/input.blif'..
Extracted 9033 gates and 9069 wires to a netlist network with 35 inputs and 33 outputs.

3.22.13.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.13.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      329
ABC RESULTS:            ANDNOT cells:     3162
ABC RESULTS:               MUX cells:      935
ABC RESULTS:              NAND cells:      150
ABC RESULTS:               NOR cells:      562
ABC RESULTS:               NOT cells:      460
ABC RESULTS:                OR cells:      744
ABC RESULTS:             ORNOT cells:      290
ABC RESULTS:              XNOR cells:      424
ABC RESULTS:               XOR cells:     1330
ABC RESULTS:        internal signals:     9001
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       33
Removing temp directory.

3.22.14. Extracting gate netlist of module `\mux2ofnbits_16' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 67 wires to a netlist network with 34 inputs and 16 outputs.

3.22.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.14.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.15. Extracting gate netlist of module `\mux2ofnbits_4' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 19 wires to a netlist network with 10 inputs and 4 outputs.

3.22.15.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:               MUX cells:        4
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.16. Extracting gate netlist of module `\mux2ofnbits_5' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 23 wires to a netlist network with 12 inputs and 5 outputs.

3.22.16.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:               MUX cells:        5
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        5
Removing temp directory.

3.22.17. Extracting gate netlist of module `\mux3of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 100 wires to a netlist network with 51 inputs and 16 outputs.

3.22.17.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.17.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.18. Extracting gate netlist of module `\mux8of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 128 gates and 265 wires to a netlist network with 136 inputs and 16 outputs.

3.22.18.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.18.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:      112
ABC RESULTS:        internal signals:      113
ABC RESULTS:           input signals:      136
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.19. Extracting gate netlist of module `\reg' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.20. Extracting gate netlist of module `\shu' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$104758: \2131.A -> \2720.B_OR[0].B_AND_BITS [0]
                                                \2131.A -> \2131.A
Breaking loop using new signal $abcloop$104759: \2149.A -> \2720.B_OR[1].B_AND_BITS [0]
                                                \2149.A -> \2149.A
Breaking loop using new signal $abcloop$104760: \2167.A -> \2720.B_OR[2].B_AND_BITS [0]
                                                \2167.A -> \2167.A
Breaking loop using new signal $abcloop$104761: \2185.A -> \2720.B_OR[3].B_AND_BITS [0]
                                                \2185.A -> \2185.A
Breaking loop using new signal $abcloop$104762: \2203.A -> \2720.B_OR[4].B_AND_BITS [0]
                                                \2203.A -> \2203.A
Breaking loop using new signal $abcloop$104763: \2221.A -> \2720.B_OR[5].B_AND_BITS [0]
                                                \2221.A -> \2221.A
Breaking loop using new signal $abcloop$104764: \2239.A -> \2720.B_OR[6].B_AND_BITS [0]
                                                \2239.A -> \2239.A
Breaking loop using new signal $abcloop$104765: \2257.A -> \2720.B_OR[7].B_AND_BITS [0]
                                                \2257.A -> \2257.A
Breaking loop using new signal $abcloop$104766: \2275.A -> \2720.B_OR[8].B_AND_BITS [0]
                                                \2275.A -> \2275.A
Breaking loop using new signal $abcloop$104767: \2293.A -> \2720.B_OR[9].B_AND_BITS [0]
                                                \2293.A -> \2293.A
Breaking loop using new signal $abcloop$104768: \2311.A -> \2720.B_OR[10].B_AND_BITS [0]
                                                \2311.A -> \2311.A
Breaking loop using new signal $abcloop$104769: \2329.A -> \2720.B_OR[11].B_AND_BITS [0]
                                                \2329.A -> \2329.A
Breaking loop using new signal $abcloop$104770: \2347.A -> \2720.B_OR[12].B_AND_BITS [0]
                                                \2347.A -> \2347.A
Breaking loop using new signal $abcloop$104771: \2365.A -> \2720.B_OR[13].B_AND_BITS [0]
                                                \2365.A -> \2365.A
Breaking loop using new signal $abcloop$104772: \2383.A -> \2720.B_OR[14].B_AND_BITS [0]
                                                \2383.A -> \2383.A
Breaking loop using new signal $abcloop$104773: \2401.A -> \2720.B_OR[15].B_AND_BITS [0]
                                                \2401.A -> \2401.A
Breaking loop using new signal $abcloop$104774: \2435.A -> \2720.B_OR[0].B_AND_BITS [1]
                                                \2435.A -> \2435.A
Breaking loop using new signal $abcloop$104775: \2453.A -> \2720.B_OR[1].B_AND_BITS [1]
                                                \2453.A -> \2453.A
Breaking loop using new signal $abcloop$104776: \2471.A -> \2720.B_OR[2].B_AND_BITS [1]
                                                \2471.A -> \2471.A
Breaking loop using new signal $abcloop$104777: \2489.A -> \2720.B_OR[3].B_AND_BITS [1]
                                                \2489.A -> \2489.A
Breaking loop using new signal $abcloop$104778: \2507.A -> \2720.B_OR[4].B_AND_BITS [1]
                                                \2507.A -> \2507.A
Breaking loop using new signal $abcloop$104779: \2525.A -> \2720.B_OR[5].B_AND_BITS [1]
                                                \2525.A -> \2525.A
Breaking loop using new signal $abcloop$104780: \2543.A -> \2720.B_OR[6].B_AND_BITS [1]
                                                \2543.A -> \2543.A
Breaking loop using new signal $abcloop$104781: \2561.A -> \2720.B_OR[7].B_AND_BITS [1]
                                                \2561.A -> \2561.A
Breaking loop using new signal $abcloop$104782: \2579.A -> \2720.B_OR[8].B_AND_BITS [1]
                                                \2579.A -> \2579.A
Breaking loop using new signal $abcloop$104783: \2597.A -> \2720.B_OR[9].B_AND_BITS [1]
                                                \2597.A -> \2597.A
Breaking loop using new signal $abcloop$104784: \2615.A -> \2720.B_OR[10].B_AND_BITS [1]
                                                \2615.A -> \2615.A
Breaking loop using new signal $abcloop$104785: \2633.A -> \2720.B_OR[11].B_AND_BITS [1]
                                                \2633.A -> \2633.A
Breaking loop using new signal $abcloop$104786: \2651.A -> \2720.B_OR[12].B_AND_BITS [1]
                                                \2651.A -> \2651.A
Breaking loop using new signal $abcloop$104787: \2669.A -> \2720.B_OR[13].B_AND_BITS [1]
                                                \2669.A -> \2669.A
Breaking loop using new signal $abcloop$104788: \2687.A -> \2720.B_OR[14].B_AND_BITS [1]
                                                \2687.A -> \2687.A
Breaking loop using new signal $abcloop$104789: \2704.A -> \2720.B_OR[15].B_AND_BITS [1]
                                                \2704.A -> \2704.A
Extracted 698 gates and 754 wires to a netlist network with 55 inputs and 48 outputs.

3.22.20.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.20.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       58
ABC RESULTS:            ANDNOT cells:      229
ABC RESULTS:               MUX cells:       32
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       11
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:      296
ABC RESULTS:             ORNOT cells:       27
ABC RESULTS:        internal signals:      651
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       48
Removing temp directory.

3.22.21. Extracting gate netlist of module `\trf' to `<abc-temp-dir>/input.blif'..
Extracted 578 gates and 856 wires to a netlist network with 277 inputs and 48 outputs.

3.22.21.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.21.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       36
ABC RESULTS:               MUX cells:      496
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:       24
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:      531
ABC RESULTS:           input signals:      277
ABC RESULTS:          output signals:       48
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
Optimizing module add_16.
Optimizing module asu.
<suppressed ~16 debug messages>
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
<suppressed ~16 debug messages>
Optimizing module mdu.
<suppressed ~30 debug messages>
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
Optimizing module trf.
<suppressed ~224 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\ccu'.
<suppressed ~12 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
<suppressed ~327 debug messages>
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Finding identical cells in module `\trf'.
Removed a total of 116 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \trf..
Removed 8 unused cells and 5131 unused wires.
<suppressed ~275 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \SAYAC_TOP
Used module:     \ccu
Used module:     \dpu
Used module:         \asu
Used module:         \reg
Used module:         \cmp
Used module:         \imm
Used module:         \llu
Used module:             \comp
Used module:         \mdu
Used module:         \mux2ofnbits_16
Used module:         \mux8of16bits
Used module:         \mux3of16bits
Used module:         \mux2ofnbits_4
Used module:         \mux2ofnbits_5
Used module:         \inc_16
Used module:         \add_16
Used module:         \inc_4
Used module:         \shu
Used module:         \trf
Used module:             \iff

3.24.2. Analyzing design hierarchy..
Top module:  \SAYAC_TOP
Used module:     \ccu
Used module:     \dpu
Used module:         \asu
Used module:         \reg
Used module:         \cmp
Used module:         \imm
Used module:         \llu
Used module:             \comp
Used module:         \mdu
Used module:         \mux2ofnbits_16
Used module:         \mux8of16bits
Used module:         \mux3of16bits
Used module:         \mux2ofnbits_4
Used module:         \mux2ofnbits_5
Used module:         \inc_16
Used module:         \add_16
Used module:         \inc_4
Used module:         \shu
Used module:         \trf
Used module:             \iff
Removed 0 unused modules.

3.25. Printing statistics.

=== SAYAC_TOP ===

   Number of wires:                 64
   Number of wire bits:            134
   Number of public wires:          64
   Number of public wire bits:     134
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     ccu                             1
     dpu                             1

=== add_16 ===

   Number of wires:                 85
   Number of wire bits:            130
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     $_ANDNOT_                      23
     $_AND_                          5
     $_NAND_                        10
     $_NOR_                         11
     $_ORNOT_                        2
     $_OR_                          16
     $_XNOR_                        18
     $_XOR_                         13

=== asu ===

   Number of wires:                221
   Number of wire bits:            266
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                232
     $_ANDNOT_                      81
     $_AND_                         12
     $_MUX_                         16
     $_NAND_                         6
     $_NOR_                          5
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          40
     $_XNOR_                        17
     $_XOR_                         42

=== ccu ===

   Number of wires:                418
   Number of wire bits:            544
   Number of public wires:         145
   Number of public wire bits:     271
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     $_ANDNOT_                     120
     $_AND_                         21
     $_DFF_PP0_                      2
     $_MUX_                          8
     $_NAND_                        17
     $_NOR_                         39
     $_NOT_                         10
     $_ORNOT_                       19
     $_OR_                          88

=== cmp ===

   Number of wires:                 81
   Number of wire bits:            111
   Number of public wires:           4
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_ANDNOT_                      32
     $_AND_                          1
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          1
     $_ORNOT_                       19
     $_OR_                           4
     $_XNOR_                        10
     $_XOR_                          6

=== comp ===

   Number of wires:                 18
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_ORNOT_                        1
     $_OR_                          14
     $_XNOR_                         1
     $_XOR_                         15

=== dpu ===

   Number of wires:                 87
   Number of wire bits:            442
   Number of public wires:          87
   Number of public wire bits:     442
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     add_16                          1
     asu                             1
     cmp                             1
     imm                             1
     inc_16                          1
     inc_4                           1
     llu                             1
     mdu                             1
     mux2ofnbits_16                  3
     mux2ofnbits_4                   3
     mux2ofnbits_5                   1
     mux3of16bits                    1
     mux8of16bits                    1
     reg                             3
     shu                             1
     trf                             1

=== iff ===

   Number of wires:                 10
   Number of wire bits:             10
   Number of public wires:           8
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFFE_PP0P_                    1
     $_NOR_                          1

=== imm ===

   Number of wires:                 74
   Number of wire bits:            103
   Number of public wires:           8
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                       8
     $_AND_                          8
     $_MUX_                         56
     $_NAND_                         8
     $_NOT_                          2

=== inc_16 ===

   Number of wires:                 29
   Number of wire bits:             73
   Number of public wires:           3
   Number of public wire bits:      47
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     $_ANDNOT_                       1
     $_NAND_                         1
     $_NOT_                         13
     $_OR_                          12
     $_XNOR_                         1
     $_XOR_                         14

=== inc_4 ===

   Number of wires:                  5
   Number of wire bits:             13
   Number of public wires:           3
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $_ANDNOT_                       1
     $_NAND_                         1
     $_NOT_                          1
     $_XNOR_                         1
     $_XOR_                          2

=== llu ===

   Number of wires:                 41
   Number of wire bits:            101
   Number of public wires:           8
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_ANDNOT_                      17
     $_AND_                         16
     $_MUX_                         16
     $_NOR_                          1
     comp                            1

=== mdu ===

   Number of wires:               8346
   Number of wire bits:          12964
   Number of public wires:          99
   Number of public wire bits:    4717
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8309
     $_ANDNOT_                    3064
     $_AND_                        329
     $_DFFE_PP0P_                   32
     $_MUX_                        934
     $_NAND_                       150
     $_NOR_                        557
     $_NOT_                        458
     $_ORNOT_                      290
     $_OR_                         741
     $_XNOR_                       424
     $_XOR_                       1330

=== mux2ofnbits_16 ===

   Number of wires:                 21
   Number of wire bits:             66
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $_AND_                         16
     $_MUX_                         16

=== mux2ofnbits_4 ===

   Number of wires:                  9
   Number of wire bits:             18
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $_AND_                          4
     $_MUX_                          4

=== mux2ofnbits_5 ===

   Number of wires:                 10
   Number of wire bits:             22
   Number of public wires:           5
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_AND_                          5
     $_MUX_                          5

=== mux3of16bits ===

   Number of wires:                 39
   Number of wire bits:             99
   Number of public wires:           7
   Number of public wire bits:      67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AND_                         16
     $_MUX_                         32

=== mux8of16bits ===

   Number of wires:                129
   Number of wire bits:            264
   Number of public wires:          17
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     $_AND_                         16
     $_MUX_                        112

=== reg ===

   Number of wires:                  5
   Number of wire bits:             35
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_DFFE_PP0P_                   16

=== shu ===

   Number of wires:                766
   Number of wire bits:           1421
   Number of public wires:         139
   Number of public wire bits:     794
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                675
     $_ANDNOT_                     229
     $_AND_                         58
     $_MUX_                         32
     $_NAND_                        18
     $_NOR_                         11
     $_NOT_                          4
     $_ORNOT_                       27
     $_OR_                         296

=== trf ===

   Number of wires:                551
   Number of wire bits:            888
   Number of public wires:          16
   Number of public wire bits:     353
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                831
     $_ANDNOT_                      36
     $_AND_                          3
     $_DFFE_NP0P_                  224
     $_DFFE_NP1P_                   32
     $_MUX_                        496
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        2
     $_OR_                          24
     iff                             8

=== design hierarchy ===

   SAYAC_TOP                         1
     ccu                             1
     dpu                             1
       add_16                        1
       asu                           1
       cmp                           1
       imm                           1
       inc_16                        1
       inc_4                         1
       llu                           1
         comp                        1
       mdu                           1
       mux2ofnbits_16                3
       mux2ofnbits_4                 3
       mux2ofnbits_5                 1
       mux3of16bits                  1
       mux8of16bits                  1
       reg                           3
       shu                           1
       trf                           1
         iff                         8

   Number of wires:              11149
   Number of wire bits:          18060
   Number of public wires:         725
   Number of public wire bits:    7636
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              11129
     $_ANDNOT_                    3620
     $_AND_                        550
     $_DFFE_NP0P_                  224
     $_DFFE_NP1P_                   32
     $_DFFE_PP0P_                   88
     $_DFF_PP0_                      2
     $_MUX_                       1767
     $_NAND_                       217
     $_NOR_                        636
     $_NOT_                        498
     $_ORNOT_                      366
     $_OR_                        1235
     $_XNOR_                       472
     $_XOR_                       1422

3.26. Executing CHECK pass (checking for obvious problems).
Checking module SAYAC_TOP...
Checking module add_16...
Checking module asu...
Checking module ccu...
Checking module cmp...
Checking module comp...
Checking module dpu...
Checking module iff...
Checking module imm...
Checking module inc_16...
Checking module inc_4...
Checking module llu...
Checking module mdu...
Checking module mux2ofnbits_16...
Checking module mux2ofnbits_4...
Checking module mux2ofnbits_5...
Checking module mux3of16bits...
Checking module mux8of16bits...
Checking module reg...
Checking module shu...
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$104860 ($_MUX_)
    wire \2131.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$104893 ($_MUX_)
    wire \2149.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$104924 ($_MUX_)
    wire \2167.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$104958 ($_MUX_)
    wire \2185.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$104984 ($_MUX_)
    wire \2203.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105014 ($_MUX_)
    wire \2221.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105040 ($_MUX_)
    wire \2239.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105065 ($_MUX_)
    wire \2257.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105083 ($_MUX_)
    wire \2275.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105106 ($_MUX_)
    wire \2293.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105125 ($_MUX_)
    wire \2311.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105143 ($_MUX_)
    wire \2329.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105156 ($_MUX_)
    wire \2347.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105171 ($_MUX_)
    wire \2365.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105181 ($_MUX_)
    wire \2383.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105190 ($_MUX_)
    wire \2401.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105191 ($_MUX_)
    wire \2435.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105194 ($_MUX_)
    wire \2453.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105198 ($_MUX_)
    wire \2471.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105204 ($_MUX_)
    wire \2489.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105211 ($_MUX_)
    wire \2507.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105220 ($_MUX_)
    wire \2525.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105230 ($_MUX_)
    wire \2543.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105242 ($_MUX_)
    wire \2561.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105255 ($_MUX_)
    wire \2579.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105270 ($_MUX_)
    wire \2597.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105286 ($_MUX_)
    wire \2615.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105304 ($_MUX_)
    wire \2633.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105323 ($_MUX_)
    wire \2651.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105344 ($_MUX_)
    wire \2669.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105366 ($_MUX_)
    wire \2687.A
Warning: found logic loop in module shu:
    cell $abc$104757$auto$blifparse.cc:381:parse_blif$105390 ($_MUX_)
    wire \2704.A
Checking module trf...
Found and reported 32 problems.

4. Executing FLATTEN pass (flatten design).
Deleting now unused module add_16.
Deleting now unused module asu.
Deleting now unused module ccu.
Deleting now unused module cmp.
Deleting now unused module comp.
Deleting now unused module dpu.
Deleting now unused module iff.
Deleting now unused module imm.
Deleting now unused module inc_16.
Deleting now unused module inc_4.
Deleting now unused module llu.
Deleting now unused module mdu.
Deleting now unused module mux2ofnbits_16.
Deleting now unused module mux2ofnbits_4.
Deleting now unused module mux2ofnbits_5.
Deleting now unused module mux3of16bits.
Deleting now unused module mux8of16bits.
Deleting now unused module reg.
Deleting now unused module shu.
Deleting now unused module trf.
<suppressed ~33 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.
<suppressed ~967 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

5.6. Executing OPT_SHARE pass.

5.7. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $flatten\datapath.\theregisterfile.\flagsff:0.ff_biti.$auto$simplemap.cc:377:simplemap_ff$84010 ($_DFFE_PP0P_) from module SAYAC_TOP.

5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Removed 3 unused cells and 34 unused wires.
<suppressed ~7 debug messages>

5.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

5.10. Rerunning OPT passes. (Maybe there is more to do..)

5.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

5.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

5.14. Executing OPT_SHARE pass.

5.15. Executing OPT_DFF pass (perform DFF optimizations).

5.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..

5.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

5.18. Finished OPT passes. (There is nothing left to do.)

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_N (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_N_.
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFF_NN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN0_.
  cell DFF_NN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN1_.
  cell DFF_NP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP0_.
  cell DFF_NP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP1_.
  cell DFF_PN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  cell DFF_PN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN1_.
  cell DFF_PP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP0_.
  cell DFF_PP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP1_.
  final dff cell mappings:
    \DFF_N _DFF_N_ (.C( C), .D( D), .Q( Q));
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    \DFF_NN0 _DFF_NN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NN1 _DFF_NN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP0 _DFF_NP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP1 _DFF_NP1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN0 _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN1 _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP0 _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP1 _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

6.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\SAYAC_TOP':
  mapped 224 $_DFF_NP0_ cells to \DFF_NP0 cells.
  mapped 32 $_DFF_NP1_ cells to \DFF_NP1 cells.
  mapped 84 $_DFF_PP0_ cells to \DFF_PP0 cells.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\SAYAC_TOP' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$106716: \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106200
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106232
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106264
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106296
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106328
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106360
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106392
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106424
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106456
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106488
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106520
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106552
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106584
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106616
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106648
                                                \datapath.muxindatatrf.outmux [0] -> $auto$rtlil.cc:2481:MuxGate$106680
Breaking loop using new signal $abcloop$106717: \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106202
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106234
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106266
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106298
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106330
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106362
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106394
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106426
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106458
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106490
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106522
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106554
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106586
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106618
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106650
                                                \datapath.muxindatatrf.outmux [1] -> $auto$rtlil.cc:2481:MuxGate$106682
Breaking loop using new signal $abcloop$106718: \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106204
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106236
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106268
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106300
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106332
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106364
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106396
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106428
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106460
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106492
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106524
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106556
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106588
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106620
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106652
                                                \datapath.muxindatatrf.outmux [2] -> $auto$rtlil.cc:2481:MuxGate$106684
Breaking loop using new signal $abcloop$106719: \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106206
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106238
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106270
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106302
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106334
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106366
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106398
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106430
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106462
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106494
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106526
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106558
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106590
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106622
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106654
                                                \datapath.muxindatatrf.outmux [3] -> $auto$rtlil.cc:2481:MuxGate$106686
Breaking loop using new signal $abcloop$106720: \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106208
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106240
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106272
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106304
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106336
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106368
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106400
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106432
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106464
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106496
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106528
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106560
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106592
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106624
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106656
                                                \datapath.muxindatatrf.outmux [4] -> $auto$rtlil.cc:2481:MuxGate$106688
Breaking loop using new signal $abcloop$106721: \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106210
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106242
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106274
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106306
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106338
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106370
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106402
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106434
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106466
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106498
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106530
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106562
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106594
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106626
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106658
                                                \datapath.muxindatatrf.outmux [5] -> $auto$rtlil.cc:2481:MuxGate$106690
Breaking loop using new signal $abcloop$106722: \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106212
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106244
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106276
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106308
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106340
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106372
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106404
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106436
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106468
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106500
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106532
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106564
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106596
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106628
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106660
                                                \datapath.muxindatatrf.outmux [6] -> $auto$rtlil.cc:2481:MuxGate$106692
Breaking loop using new signal $abcloop$106723: \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106214
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106246
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106278
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106310
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106342
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106374
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106406
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106438
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106470
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106502
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106534
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106566
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106598
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106630
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106662
                                                \datapath.muxindatatrf.outmux [7] -> $auto$rtlil.cc:2481:MuxGate$106694
Breaking loop using new signal $abcloop$106724: \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106216
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106248
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106280
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106312
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106344
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106376
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106408
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106440
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106472
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106504
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106536
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106568
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106600
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106632
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106664
                                                \datapath.muxindatatrf.outmux [8] -> $auto$rtlil.cc:2481:MuxGate$106696
Breaking loop using new signal $abcloop$106725: \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106218
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106250
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106282
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106314
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106346
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106378
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106410
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106442
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106474
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106506
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106538
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106570
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106602
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106634
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106666
                                                \datapath.muxindatatrf.outmux [9] -> $auto$rtlil.cc:2481:MuxGate$106698
Breaking loop using new signal $abcloop$106726: \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106220
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106252
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106284
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106316
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106348
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106380
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106412
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106444
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106476
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106508
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106540
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106572
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106604
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106636
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106668
                                                \datapath.muxindatatrf.outmux [10] -> $auto$rtlil.cc:2481:MuxGate$106700
Breaking loop using new signal $abcloop$106727: \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106222
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106254
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106286
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106318
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106350
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106382
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106414
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106446
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106478
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106510
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106542
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106574
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106606
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106638
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106670
                                                \datapath.muxindatatrf.outmux [11] -> $auto$rtlil.cc:2481:MuxGate$106702
Breaking loop using new signal $abcloop$106728: \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106224
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106256
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106288
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106320
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106352
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106384
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106416
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106448
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106480
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106512
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106544
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106576
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106608
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106640
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106672
                                                \datapath.muxindatatrf.outmux [12] -> $auto$rtlil.cc:2481:MuxGate$106704
Breaking loop using new signal $abcloop$106729: \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106226
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106258
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106290
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106322
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106354
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106386
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106418
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106450
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106482
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106514
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106546
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106578
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106610
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106642
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106674
                                                \datapath.muxindatatrf.outmux [13] -> $auto$rtlil.cc:2481:MuxGate$106706
Breaking loop using new signal $abcloop$106730: \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106228
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106260
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106292
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106324
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106356
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106388
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106420
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106452
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106484
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106516
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106548
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106580
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106612
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106644
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106676
                                                \datapath.muxindatatrf.outmux [14] -> $auto$rtlil.cc:2481:MuxGate$106708
Breaking loop using new signal $abcloop$106731: \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106230
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106262
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106294
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106326
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106358
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106390
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106422
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106454
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106486
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106518
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106550
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106582
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106614
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106646
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106678
                                                \datapath.muxindatatrf.outmux [15] -> $auto$rtlil.cc:2481:MuxGate$106710
Breaking loop using new signal $abcloop$106732: \datapath.shiftunit.2131.A -> \datapath.shiftunit.2131.A
                                                \datapath.shiftunit.2131.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n711_
Breaking loop using new signal $abcloop$106733: \datapath.shiftunit.2149.A -> \datapath.shiftunit.2149.A
                                                \datapath.shiftunit.2149.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n719_
Breaking loop using new signal $abcloop$106734: \datapath.shiftunit.2167.A -> \datapath.shiftunit.2167.A
                                                \datapath.shiftunit.2167.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n723_
Breaking loop using new signal $abcloop$106735: \datapath.shiftunit.2185.A -> \datapath.shiftunit.2185.A
                                                \datapath.shiftunit.2185.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n727_
Breaking loop using new signal $abcloop$106736: \datapath.shiftunit.2203.A -> \datapath.shiftunit.2203.A
                                                \datapath.shiftunit.2203.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n731_
Breaking loop using new signal $abcloop$106737: \datapath.shiftunit.2221.A -> \datapath.shiftunit.2221.A
                                                \datapath.shiftunit.2221.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n735_
Breaking loop using new signal $abcloop$106738: \datapath.shiftunit.2239.A -> \datapath.shiftunit.2239.A
                                                \datapath.shiftunit.2239.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n739_
Breaking loop using new signal $abcloop$106739: \datapath.shiftunit.2257.A -> \datapath.shiftunit.2257.A
                                                \datapath.shiftunit.2257.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n743_
Breaking loop using new signal $abcloop$106740: \datapath.shiftunit.2275.A -> \datapath.shiftunit.2275.A
                                                \datapath.shiftunit.2275.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n747_
Breaking loop using new signal $abcloop$106741: \datapath.shiftunit.2293.A -> \datapath.shiftunit.2293.A
                                                \datapath.shiftunit.2293.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n751_
Breaking loop using new signal $abcloop$106742: \datapath.shiftunit.2311.A -> \datapath.shiftunit.2311.A
                                                \datapath.shiftunit.2311.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n755_
Breaking loop using new signal $abcloop$106743: \datapath.shiftunit.2329.A -> \datapath.shiftunit.2329.A
                                                \datapath.shiftunit.2329.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n759_
Breaking loop using new signal $abcloop$106744: \datapath.shiftunit.2347.A -> \datapath.shiftunit.2347.A
                                                \datapath.shiftunit.2347.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n763_
Breaking loop using new signal $abcloop$106745: \datapath.shiftunit.2365.A -> \datapath.shiftunit.2365.A
                                                \datapath.shiftunit.2365.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n767_
Breaking loop using new signal $abcloop$106746: \datapath.shiftunit.2383.A -> \datapath.shiftunit.2383.A
                                                \datapath.shiftunit.2383.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n771_
Breaking loop using new signal $abcloop$106747: \datapath.shiftunit.2401.A -> \datapath.shiftunit.2401.A
                                                \datapath.shiftunit.2401.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n775_
Breaking loop using new signal $abcloop$106748: \datapath.shiftunit.2435.A -> \datapath.shiftunit.2435.A
                                                \datapath.shiftunit.2435.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n715_
Breaking loop using new signal $abcloop$106749: \datapath.shiftunit.2453.A -> \datapath.shiftunit.2453.A
                                                \datapath.shiftunit.2453.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n720_
Breaking loop using new signal $abcloop$106750: \datapath.shiftunit.2471.A -> \datapath.shiftunit.2471.A
                                                \datapath.shiftunit.2471.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n724_
Breaking loop using new signal $abcloop$106751: \datapath.shiftunit.2489.A -> \datapath.shiftunit.2489.A
                                                \datapath.shiftunit.2489.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n728_
Breaking loop using new signal $abcloop$106752: \datapath.shiftunit.2507.A -> \datapath.shiftunit.2507.A
                                                \datapath.shiftunit.2507.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n732_
Breaking loop using new signal $abcloop$106753: \datapath.shiftunit.2525.A -> \datapath.shiftunit.2525.A
                                                \datapath.shiftunit.2525.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n736_
Breaking loop using new signal $abcloop$106754: \datapath.shiftunit.2543.A -> \datapath.shiftunit.2543.A
                                                \datapath.shiftunit.2543.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n740_
Breaking loop using new signal $abcloop$106755: \datapath.shiftunit.2561.A -> \datapath.shiftunit.2561.A
                                                \datapath.shiftunit.2561.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n744_
Breaking loop using new signal $abcloop$106756: \datapath.shiftunit.2579.A -> \datapath.shiftunit.2579.A
                                                \datapath.shiftunit.2579.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n748_
Breaking loop using new signal $abcloop$106757: \datapath.shiftunit.2597.A -> \datapath.shiftunit.2597.A
                                                \datapath.shiftunit.2597.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n752_
Breaking loop using new signal $abcloop$106758: \datapath.shiftunit.2615.A -> \datapath.shiftunit.2615.A
                                                \datapath.shiftunit.2615.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n756_
Breaking loop using new signal $abcloop$106759: \datapath.shiftunit.2633.A -> \datapath.shiftunit.2633.A
                                                \datapath.shiftunit.2633.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n760_
Breaking loop using new signal $abcloop$106760: \datapath.shiftunit.2651.A -> \datapath.shiftunit.2651.A
                                                \datapath.shiftunit.2651.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n764_
Breaking loop using new signal $abcloop$106761: \datapath.shiftunit.2669.A -> \datapath.shiftunit.2669.A
                                                \datapath.shiftunit.2669.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n768_
Breaking loop using new signal $abcloop$106762: \datapath.shiftunit.2687.A -> \datapath.shiftunit.2687.A
                                                \datapath.shiftunit.2687.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n772_
Breaking loop using new signal $abcloop$106763: \datapath.shiftunit.2704.A -> \datapath.shiftunit.2704.A
                                                \datapath.shiftunit.2704.A -> $flatten\datapath.\shiftunit.$abc$104757$new_n776_
Extracted 11089 gates and 11495 wires to a netlist network with 405 inputs and 424 outputs.

8.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               BUF cells:       16
ABC RESULTS:              NAND cells:     5033
ABC RESULTS:               NOR cells:     3129
ABC RESULTS:               NOT cells:      494
ABC RESULTS:        internal signals:    10666
ABC RESULTS:           input signals:      405
ABC RESULTS:          output signals:      424
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Removed 0 unused cells and 11501 unused wires.
<suppressed ~232 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing HILOMAP pass (mapping to constant drivers).

11. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port SAYAC_TOP.addrBus using OBUF.
Mapping port SAYAC_TOP.clk using IBUF.
Mapping port SAYAC_TOP.dataBusIn using IBUF.
Mapping port SAYAC_TOP.dataBusOut using OBUF.
Mapping port SAYAC_TOP.readIO using OBUF.
Mapping port SAYAC_TOP.readMEM using OBUF.
Mapping port SAYAC_TOP.readyMEM using IBUF.
Mapping port SAYAC_TOP.rst using IBUF.
Mapping port SAYAC_TOP.writeIO using OBUF.
Mapping port SAYAC_TOP.writeMEM using OBUF.

12. Executing SPLITNETS pass (splitting up multi-bit signals).

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Removed 460 unused cells and 1074 unused wires.
<suppressed ~1020 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Removed 0 unused cells and 243 unused wires.
<suppressed ~243 debug messages>

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

13.16. Rerunning OPT passes. (Maybe there is more to do..)

13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SAYAC_TOP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SAYAC_TOP.
Performed a total of 0 changes.

13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SAYAC_TOP'.
Removed a total of 0 cells.

13.20. Executing OPT_DFF pass (perform DFF optimizations).

13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..

13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module SAYAC_TOP.

13.23. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 5544 unused wires.

14. Executing Verilog backend.
Dumping module `\SAYAC_TOP'.

15. Executing BLIF backend.

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/Logic_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/Logic_map.v' to AST representation.
Generating RTLIL representation for module `\BUF'.
Generating RTLIL representation for module `\TIELOM'.
Generating RTLIL representation for module `\TIEHIM'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\NOT'.
Generating RTLIL representation for module `\AND'.
Generating RTLIL representation for module `\NAND'.
Generating RTLIL representation for module `\OR'.
Generating RTLIL representation for module `\NOR'.
Generating RTLIL representation for module `\XOR'.
Generating RTLIL representation for module `\XNOR'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
Using template NOT for cells of type NOT.
Using template NOR for cells of type NOR.
Using template NAND for cells of type NAND.
Using template IBUF for cells of type IBUF.
Using template OBUF for cells of type OBUF.
Using template BUF for cells of type BUF.
No more expansions possible.
<suppressed ~8741 debug messages>

17. Executing TECHMAP pass (map to technology primitives).

17.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/DFF_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/examples/sayac_vhdl/lib/DFF_map.v' to AST representation.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFF_PP0'.
Generating RTLIL representation for module `\DFF_PP1'.
Successfully finished Verilog frontend.

17.2. Continuing TECHMAP pass.
Using template DFF_PP0 for cells of type DFF_PP0.
No more expansions possible.
<suppressed ~89 debug messages>

18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SAYAC_TOP..
Removed 0 unused cells and 26204 unused wires.
<suppressed ~1 debug messages>

19. Printing statistics.

=== SAYAC_TOP ===

   Number of wires:               9125
   Number of wire bits:           9170
   Number of public wires:         455
   Number of public wire bits:     500
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9067
     DFF_NP0                       224
     DFF_NP1                        32
     bufg                           16
     dff                            84
     nand_n                       5033
     nor_n                        3129
     notg                          494
     pin                            19
     pout                           36

20. Executing Verilog backend.
Dumping module `\SAYAC_TOP'.

Warnings: 66 unique messages, 66 total
End of script. Logfile hash: cd4285a4c0, CPU: user 378.12s system 2.31s
Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )
Time spent: 56% 63x opt_merge (214 sec), 18% 3x techmap (69 sec), ...
