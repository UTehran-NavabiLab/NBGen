Last login: Sun Sep  8 21:25:47 on ttys004
ebinouri@Ebis-MBP Omid-sayac-bench % yosys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36 (git sha1 8f07a0d8404, clang 15.0.0 -fPIC -Os)


yosys> script yosys_script.ys 

-- Executing script file `yosys_script.ys' --

1. Executing Verilog-2005 frontend: SAYAC_adder.v
Parsing Verilog input from `SAYAC_adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: SAYAC_adder_subtractor.v
Parsing Verilog input from `SAYAC_adder_subtractor.v' to AST representation.
Generating RTLIL representation for module `\adder_subtractor'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: SAYAC_counter.v
Parsing Verilog input from `SAYAC_counter.v' to AST representation.
Generating RTLIL representation for module `\Counter'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: SAYAC_MUX2to1.v
Parsing Verilog input from `SAYAC_MUX2to1.v' to AST representation.
Generating RTLIL representation for module `\mux2to1'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: SAYAC_REG.v
Parsing Verilog input from `SAYAC_REG.v' to AST representation.
Generating RTLIL representation for module `\REG'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: SAYAC_shift_register.v
Parsing Verilog input from `SAYAC_shift_register.v' to AST representation.
Generating RTLIL representation for module `\shift_register'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: SAYAC_shiftReg_17b.v
Parsing Verilog input from `SAYAC_shiftReg_17b.v' to AST representation.
Generating RTLIL representation for module `\shiftReg_17b'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: SAYAC_MDU.v
Parsing Verilog input from `SAYAC_MDU.v' to AST representation.
Generating RTLIL representation for module `\MDU'.
Generating RTLIL representation for module `\booth'.
Generating RTLIL representation for module `\booth_controller'.
Generating RTLIL representation for module `\booth_datapath'.
Generating RTLIL representation for module `\divider'.
Generating RTLIL representation for module `\divider_CU'.
Generating RTLIL representation for module `\divider_DP'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: SAYAC_MUX3to1.v
Parsing Verilog input from `SAYAC_MUX3to1.v' to AST representation.
Generating RTLIL representation for module `\mux3to1'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: SAYAC_MUX8to1.v
Parsing Verilog input from `SAYAC_MUX8to1.v' to AST representation.
Generating RTLIL representation for module `\mux8to1'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: SAYAC_ASU.v
Parsing Verilog input from `SAYAC_ASU.v' to AST representation.
Generating RTLIL representation for module `\ASU'.
Generating RTLIL representation for module `\adder1'.
Generating RTLIL representation for module `\FA'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: SAYAC_CMP.v
Parsing Verilog input from `SAYAC_CMP.v' to AST representation.
Generating RTLIL representation for module `\CMP'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: SAYAC_IMM.v
Parsing Verilog input from `SAYAC_IMM.v' to AST representation.
Generating RTLIL representation for module `\IMM'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: SAYAC_LLU.v
Parsing Verilog input from `SAYAC_LLU.v' to AST representation.
Generating RTLIL representation for module `\LLU'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: SAYAC_SHU.v
Parsing Verilog input from `SAYAC_SHU.v' to AST representation.
Generating RTLIL representation for module `\SHU'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: SAYAC_TRF.v
Parsing Verilog input from `SAYAC_TRF.v' to AST representation.
Generating RTLIL representation for module `\TRF'.
Generating RTLIL representation for module `\DFF_E'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: SAYAC_datapath.v
Parsing Verilog input from `SAYAC_datapath.v' to AST representation.
Generating RTLIL representation for module `\Datapath'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: SAYAC_controller.v
Parsing Verilog input from `SAYAC_controller.v' to AST representation.
Generating RTLIL representation for module `\Controller'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: SAYAC.v
Parsing Verilog input from `SAYAC.v' to AST representation.
Generating RTLIL representation for module `\SAYAC'.
Successfully finished Verilog frontend.

20. Executing HIERARCHY pass (managing design hierarchy).

20.1. Finding top of design hierarchy..
root of   6 design levels: SAYAC               
root of   0 design levels: Controller          
root of   5 design levels: Datapath            
root of   0 design levels: DFF_E               
root of   1 design levels: TRF                 
root of   0 design levels: SHU                 
root of   0 design levels: LLU                 
root of   0 design levels: IMM                 
root of   0 design levels: CMP                 
root of   0 design levels: FA                  
root of   1 design levels: adder1              
root of   2 design levels: ASU                 
root of   0 design levels: mux8to1             
root of   0 design levels: mux3to1             
root of   1 design levels: divider_DP          
root of   1 design levels: divider_CU          
root of   2 design levels: divider             
root of   2 design levels: booth_datapath      
root of   0 design levels: booth_controller    
root of   3 design levels: booth               
root of   4 design levels: MDU                 
root of   0 design levels: shiftReg_17b        
root of   0 design levels: shift_register      
root of   0 design levels: REG                 
root of   0 design levels: mux2to1             
root of   0 design levels: Counter             
root of   1 design levels: adder_subtractor    
root of   0 design levels: adder               
Automatically selected SAYAC as design top module.

20.2. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         \adder
Used module:         \mux2to1
Used module:         \mux3to1
Used module:         \IMM
Used module:         \REG
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             \adder1
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             \booth
Used module:                 \booth_controller
Used module:                 \booth_datapath
Used module:                     \adder_subtractor
Used module:                     \shift_register
Used module:             \divider
Used module:                 \divider_DP
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     \Counter
Used module:         \TRF
Used module:             \DFF_E
Used module:         \mux8to1
Parameter 1 (\size) = 4

20.3. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Parameter 1 (\size) = 4
Generating RTLIL representation for module `$paramod\adder\size=s32'00000000000000000000000000000100'.
Parameter 1 (\N) = 16

20.4. Executing AST frontend in derive mode using pre-parsed AST for module `\REG'.
Parameter 1 (\N) = 16
Generating RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Parameter 1 (\size) = 17

20.5. Executing AST frontend in derive mode using pre-parsed AST for module `\booth'.
Parameter 1 (\size) = 17
Generating RTLIL representation for module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 17

20.6. Executing AST frontend in derive mode using pre-parsed AST for module `\booth_controller'.
Parameter 1 (\size) = 17
Generating RTLIL representation for module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 17

20.7. Executing AST frontend in derive mode using pre-parsed AST for module `\booth_datapath'.
Parameter 1 (\size) = 17
Generating RTLIL representation for module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 17

20.8. Executing AST frontend in derive mode using pre-parsed AST for module `\adder_subtractor'.
Parameter 1 (\size) = 17
Generating RTLIL representation for module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Parameter 1 (\N) = 17

20.9. Executing AST frontend in derive mode using pre-parsed AST for module `\REG'.
Parameter 1 (\N) = 17
Generating RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 18

20.10. Executing AST frontend in derive mode using pre-parsed AST for module `\shift_register'.
Parameter 1 (\size) = 18
Generating RTLIL representation for module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Parameter 1 (\N) = 17
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Parameter 1 (\N) = 5

20.11. Executing AST frontend in derive mode using pre-parsed AST for module `\Counter'.
Parameter 1 (\N) = 5
Generating RTLIL representation for module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Parameter 1 (\N) = 17

20.12. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\N) = 17
Generating RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Parameter 1 (\N) = 17
Found cached RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Parameter 1 (\N) = 17
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 16

20.13. Executing AST frontend in derive mode using pre-parsed AST for module `\adder1'.
Parameter 1 (\size) = 16
Generating RTLIL representation for module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Parameter 1 (\size) = 16
Found cached RTLIL representation for module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Parameter 1 (\size) = 16

20.14. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Parameter 1 (\size) = 16
Generating RTLIL representation for module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Parameter 1 (\size) = 16
Found cached RTLIL representation for module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16

20.15. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\N) = 16
Generating RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16

20.16. Executing AST frontend in derive mode using pre-parsed AST for module `\mux3to1'.
Parameter 1 (\N) = 16
Generating RTLIL representation for module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 5

20.17. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\N) = 5
Generating RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 4

20.18. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2to1'.
Parameter 1 (\N) = 4
Generating RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Parameter 1 (\N) = 4
Found cached RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Parameter 1 (\N) = 4
Found cached RTLIL representation for module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.

20.19. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 \booth_controller
Used module:                 \booth_datapath
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         \adder
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:             \divider
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:         \TRF
Used module:             \DFF_E
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Used module:         \mux8to1
Parameter 1 (\size) = 17
Found cached RTLIL representation for module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 17
Found cached RTLIL representation for module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 17

20.20. Executing AST frontend in derive mode using pre-parsed AST for module `\adder'.
Parameter 1 (\size) = 17
Generating RTLIL representation for module `$paramod\adder\size=s32'00000000000000000000000000010001'.

20.21. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     \adder_subtractor
Used module:                         $paramod\adder\size=s32'00000000000000000000000000000100
Used module:                     \REG
Used module:                     \shift_register
Used module:             \divider
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:         \TRF
Used module:             \DFF_E
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Used module:         \mux8to1
Parameter 1 (\size) = 17
Found cached RTLIL representation for module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Parameter 1 (\N) = 17
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Parameter 1 (\size) = 18
Found cached RTLIL representation for module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Parameter 1 (\N) = 17
Found cached RTLIL representation for module `$paramod\REG\N=s32'00000000000000000000000000010001'.

20.22. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         $paramod\adder\size=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:             \divider
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:         \TRF
Used module:             \DFF_E
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Used module:         \mux8to1

20.23. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         $paramod\adder\size=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:             \divider
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:         \TRF
Used module:             \DFF_E
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Used module:         \mux8to1
Removing unused module `$paramod\adder\size=s32'00000000000000000000000000000100'.
Removing unused module `\adder1'.
Removing unused module `\mux3to1'.
Removing unused module `\booth_datapath'.
Removing unused module `\booth_controller'.
Removing unused module `\booth'.
Removing unused module `\shift_register'.
Removing unused module `\REG'.
Removing unused module `\mux2to1'.
Removing unused module `\Counter'.
Removing unused module `\adder_subtractor'.
Removing unused module `\adder'.
Removed 12 unused modules.
Mapping positional arguments of cell $paramod\booth_datapath\size=s32'00000000000000000000000000010001.P_REG ($paramod\REG\N=s32'00000000000000000000000000010001).
Mapping positional arguments of cell $paramod\booth_datapath\size=s32'00000000000000000000000000010001.M_REG ($paramod\REG\N=s32'00000000000000000000000000010001).
Mapping positional arguments of cell $paramod\booth\size=s32'00000000000000000000000000010001.CU ($paramod\booth_controller\size=s32'00000000000000000000000000010001).
Mapping positional arguments of cell $paramod\booth\size=s32'00000000000000000000000000010001.DP ($paramod\booth_datapath\size=s32'00000000000000000000000000010001).
Mapping positional arguments of cell SAYAC.CU (Controller).
Mapping positional arguments of cell SAYAC.DP (Datapath).
Mapping positional arguments of cell Datapath.PC1 ($paramod\adder\size=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.PCP ($paramod\adder\size=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.MUX9 ($paramod\mux2to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.MUX8 ($paramod\mux3to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.MUX7 ($paramod\mux2to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.ImmediateUnit (IMM).
Mapping positional arguments of cell Datapath.PC ($paramod\REG\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.ADR ($paramod\REG\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.IR ($paramod\REG\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.SHiftUnit (SHU).
Mapping positional arguments of cell Datapath.llu (LLU).
Mapping positional arguments of cell Datapath.asu (ASU).
Mapping positional arguments of cell Datapath.cmp (CMP).
Mapping positional arguments of cell Datapath.mdu (MDU).
Mapping positional arguments of cell Datapath.TRFU (TRF).
Mapping positional arguments of cell Datapath.MUX6 ($paramod\mux2to1\N=s32'00000000000000000000000000000101).
Mapping positional arguments of cell Datapath.mux5 ($paramod\mux2to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux4 ($paramod\mux2to1\N=s32'00000000000000000000000000000100).
Mapping positional arguments of cell Datapath.mux3 ($paramod\mux2to1\N=s32'00000000000000000000000000000100).
Mapping positional arguments of cell Datapath.mux2 ($paramod\mux2to1\N=s32'00000000000000000000000000000100).
Mapping positional arguments of cell Datapath.mux1 (mux8to1).
Mapping positional arguments of cell TRF.ins7 (DFF_E).
Mapping positional arguments of cell TRF.ins6 (DFF_E).
Mapping positional arguments of cell TRF.ins5 (DFF_E).
Mapping positional arguments of cell TRF.ins4 (DFF_E).
Mapping positional arguments of cell TRF.ins3 (DFF_E).
Mapping positional arguments of cell TRF.ins2 (DFF_E).
Mapping positional arguments of cell TRF.ins1 (DFF_E).
Mapping positional arguments of cell TRF.ins0 (DFF_E).
Mapping positional arguments of cell ASU.ASUSUBTR ($paramod\adder1\size=s32'00000000000000000000000000010000).
Mapping positional arguments of cell ASU.ASUADDER ($paramod\adder1\size=s32'00000000000000000000000000010000).
Mapping positional arguments of cell divider_DP.Mux2 ($paramod\mux2to1\N=s32'00000000000000000000000000010001).
Mapping positional arguments of cell divider_DP.Mux1 ($paramod\mux2to1\N=s32'00000000000000000000000000010001).
Mapping positional arguments of cell divider_DP.Reg_M ($paramod\REG\N=s32'00000000000000000000000000010001).
Mapping positional arguments of cell divider_DP.shReg_Q (shiftReg_17b).
Mapping positional arguments of cell divider_DP.shReg_R (shiftReg_17b).
Mapping positional arguments of cell divider_CU.counter ($paramod\Counter\N=s32'00000000000000000000000000000101).
Mapping positional arguments of cell divider.DP (divider_DP).
Mapping positional arguments of cell divider.CU (divider_CU).
Mapping positional arguments of cell MDU.reg2 ($paramod\REG\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell MDU.reg1 ($paramod\REG\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell MDU.mult ($paramod\booth\size=s32'00000000000000000000000000010001).
Mapping positional arguments of cell MDU.div (divider).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA15 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA14 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA13 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA12 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA11 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA10 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA9 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA8 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA7 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA6 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA5 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA4 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA3 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA2 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA1 (FA).
Mapping positional arguments of cell $paramod\adder1\size=s32'00000000000000000000000000010000.FA0 (FA).
Mapping positional arguments of cell $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.adder_1 ($paramod\adder\size=s32'00000000000000000000000000010001).

21. Executing SYNTH pass.

21.1. Executing HIERARCHY pass (managing design hierarchy).

21.1.1. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         $paramod\adder\size=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:             \divider
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:         \TRF
Used module:             \DFF_E
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Used module:         \mux8to1

21.1.2. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \LLU
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \MDU
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         $paramod\adder\size=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:             \divider
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:         \TRF
Used module:             \DFF_E
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Used module:         \mux8to1
Removed 0 unused modules.

21.2. Executing PROC pass (convert processes to netlists).

21.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

21.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$SAYAC_MDU.v:147$224 in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Marked 3 switch rules as full_case in process $proc$SAYAC_MDU.v:128$221 in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Marked 1 switch rules as full_case in process $proc$SAYAC_MDU.v:120$220 in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Marked 1 switch rules as full_case in process $proc$SAYAC_MDU.v:112$216 in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Marked 1 switch rules as full_case in process $proc$SAYAC_REG.v:26$215 in module $paramod\REG\N=s32'00000000000000000000000000010000.
Removed 3 dead cases from process $proc$SAYAC_controller.v:478$204 in module Controller.
Marked 15 switch rules as full_case in process $proc$SAYAC_controller.v:478$204 in module Controller.
Removed 3 dead cases from process $proc$SAYAC_controller.v:87$170 in module Controller.
Marked 34 switch rules as full_case in process $proc$SAYAC_controller.v:87$170 in module Controller.
Marked 1 switch rules as full_case in process $proc$SAYAC_controller.v:81$169 in module Controller.
Marked 1 switch rules as full_case in process $proc$SAYAC_TRF.v:78$165 in module DFF_E.
Marked 3 switch rules as full_case in process $proc$SAYAC_TRF.v:41$117 in module TRF.
Marked 1 switch rules as full_case in process $proc$SAYAC_MUX8to1.v:27$49 in module mux8to1.
Marked 1 switch rules as full_case in process $proc$SAYAC_MDU.v:286$40 in module divider_CU.
Marked 2 switch rules as full_case in process $proc$SAYAC_MDU.v:270$39 in module divider_CU.
Marked 1 switch rules as full_case in process $proc$SAYAC_MDU.v:263$38 in module divider_CU.
Marked 4 switch rules as full_case in process $proc$SAYAC_shiftReg_17b.v:32$13 in module shiftReg_17b.
Marked 3 switch rules as full_case in process $proc$SAYAC_counter.v:27$232 in module $paramod\Counter\N=s32'00000000000000000000000000000101.
Marked 3 switch rules as full_case in process $proc$SAYAC_shift_register.v:34$231 in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Marked 1 switch rules as full_case in process $proc$SAYAC_REG.v:26$230 in module $paramod\REG\N=s32'00000000000000000000000000010001.
Removed a total of 6 dead cases.

21.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 100 assignments to connections.

21.2.4. Executing PROC_INIT pass (extract init attributes).

21.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:120$220'.
Found async reset \cnt_rst in `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:112$216'.
Found async reset \rst in `$paramod\REG\N=s32'00000000000000000000000000010000.$proc$SAYAC_REG.v:26$215'.
Found async reset \rst in `\Controller.$proc$SAYAC_controller.v:81$169'.
Found async reset \rst in `\DFF_E.$proc$SAYAC_TRF.v:78$165'.
Found async reset \rst in `\divider_CU.$proc$SAYAC_MDU.v:263$38'.
Found async reset \rst in `\shiftReg_17b.$proc$SAYAC_shiftReg_17b.v:32$13'.
Found async reset \rst in `$paramod\Counter\N=s32'00000000000000000000000000000101.$proc$SAYAC_counter.v:27$232'.
Found async reset \rst in `$paramod\shift_register\size=s32'00000000000000000000000000010010.$proc$SAYAC_shift_register.v:34$231'.
Found async reset \rst in `$paramod\REG\N=s32'00000000000000000000000000010001.$proc$SAYAC_REG.v:26$230'.

21.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~73 debug messages>

21.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:147$224'.
     1/3: $3\next_state[2:0]
     2/3: $2\next_state[2:0]
     3/3: $1\next_state[2:0]
Creating decoders for process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
     1/14: $3\sel[0:0]
     2/14: $2\sel[0:0]
     3/14: $2\subsel[0:0]
     4/14: $1\cnt_rst[0:0]
     5/14: $1\ldM[0:0]
     6/14: $1\clrP[0:0]
     7/14: $1\ldQ[0:0]
     8/14: $1\Ready[0:0]
     9/14: $1\cnt_en[0:0]
    10/14: $1\sel[0:0]
    11/14: $1\ldP[0:0]
    12/14: $1\shrQ[0:0]
    13/14: $1\done[0:0]
    14/14: $1\subsel[0:0]
Creating decoders for process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:120$220'.
     1/1: $0\present_state[2:0]
Creating decoders for process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:112$216'.
     1/1: $0\count[5:0]
Creating decoders for process `$paramod\REG\N=s32'00000000000000000000000000010000.$proc$SAYAC_REG.v:26$215'.
     1/1: $0\outREG[15:0]
Creating decoders for process `\Controller.$proc$SAYAC_controller.v:478$204'.
     1/15: $15\nstate[1:0]
     2/15: $14\nstate[1:0]
     3/15: $13\nstate[1:0]
     4/15: $12\nstate[1:0]
     5/15: $11\nstate[1:0]
     6/15: $10\nstate[1:0]
     7/15: $9\nstate[1:0]
     8/15: $8\nstate[1:0]
     9/15: $7\nstate[1:0]
    10/15: $6\nstate[1:0]
    11/15: $5\nstate[1:0]
    12/15: $4\nstate[1:0]
    13/15: $3\nstate[1:0]
    14/15: $2\nstate[1:0]
    15/15: $1\nstate[1:0]
Creating decoders for process `\Controller.$proc$SAYAC_controller.v:87$170'.
     1/237: $14\ldPC[0:0]
     2/237: $21\selPC1_PC[0:0]
     3/237: $11\writeTRF[0:0]
     4/237: $3\selMDU1_TRF[0:0]
     5/237: $9\selrd0_TRF[0:0]
     6/237: $3\selrd1_TRF[0:0]
     7/237: $3\selMDU2_TRF[0:0]
     8/237: $13\ldPC[0:0]
     9/237: $12\ldPC[0:0]
    10/237: $4\writeIO[0:0]
    11/237: $4\writeMEM[0:0]
    12/237: $11\ldPC[0:0]
    13/237: $10\writeTRF[0:0]
    14/237: $10\ldPC[0:0]
    15/237: $9\writeTRF[0:0]
    16/237: $4\readIO[0:0]
    17/237: $4\readMEM[0:0]
    18/237: $3\readIO[0:0]
    19/237: $3\readMEM[0:0]
    20/237: $8\writeTRF[0:0]
    21/237: $9\ldPC[0:0]
    22/237: $8\selrd0_TRF[0:0]
    23/237: $20\selPC1_PC[0:0]
    24/237: $3\seldatabus_TRF[0:0]
    25/237: $3\selADR_MEM[0:0]
    26/237: $3\writeIO[0:0]
    27/237: $3\writeMEM[0:0]
    28/237: $6\selrs1_TRF[0:0]
    29/237: $2\writeIO[0:0]
    30/237: $2\readIO[0:0]
    31/237: $2\writeMEM[0:0]
    32/237: $2\readMEM[0:0]
    33/237: $7\writeTRF[0:0]
    34/237: $7\selrd0_TRF[0:0]
    35/237: $5\selrs1_TRF[0:0]
    36/237: $2\seldatabus_TRF[0:0]
    37/237: $2\selADR_MEM[0:0]
    38/237: $19\selPC1_PC[0:0]
    39/237: $8\ldPC[0:0]
    40/237: $2\selrd1_TRF[0:0]
    41/237: $2\selMDU2_TRF[0:0]
    42/237: $2\selMDU1_TRF[0:0]
    43/237: $4\ldMDU2[0:0]
    44/237: $4\ldMDU1[0:0]
    45/237: $3\arithDIV[0:0]
    46/237: $3\arithMUL[0:0]
    47/237: $4\logicSH[0:0]
    48/237: $4\arithSH[0:0]
    49/237: $3\arithSH[0:0]
    50/237: $3\logicSH[0:0]
    51/237: $7\ldPC[0:0]
    52/237: $18\selPC1_PC[0:0]
    53/237: $6\writeTRF[0:0]
    54/237: $3\selSHU_TRF[0:0]
    55/237: $6\selrd0_TRF[0:0]
    56/237: $2\selshim_SHU[0:0]
    57/237: $19\selrd_1_TRF[0:0]
    58/237: $5\onesComp[0:0]
    59/237: $5\twosComp[0:0]
    60/237: $4\onesComp[0:0]
    61/237: $4\twosComp[0:0]
    62/237: $11\selPCadd_PC[0:0]
    63/237: $11\selp1_PCP[0:0]
    64/237: $18\selrd_1_TRF[0:0]
    65/237: $17\selPC1_PC[0:0]
    66/237: $10\selPCadd_PC[0:0]
    67/237: $10\selp1_PCP[0:0]
    68/237: $17\selrd_1_TRF[0:0]
    69/237: $16\selPC1_PC[0:0]
    70/237: $9\selPCadd_PC[0:0]
    71/237: $9\selp1_PCP[0:0]
    72/237: $16\selrd_1_TRF[0:0]
    73/237: $15\selPC1_PC[0:0]
    74/237: $8\selPCadd_PC[0:0]
    75/237: $8\selp1_PCP[0:0]
    76/237: $15\selrd_1_TRF[0:0]
    77/237: $14\selPC1_PC[0:0]
    78/237: $7\selPCadd_PC[0:0]
    79/237: $7\selp1_PCP[0:0]
    80/237: $14\selrd_1_TRF[0:0]
    81/237: $13\selPC1_PC[0:0]
    82/237: $6\selPCadd_PC[0:0]
    83/237: $6\selp1_PCP[0:0]
    84/237: $13\selrd_1_TRF[0:0]
    85/237: $12\selPC1_PC[0:0]
    86/237: $12\selrd_1_TRF[0:0]
    87/237: $11\selPC1_PC[0:0]
    88/237: $5\selPCadd_PC[0:0]
    89/237: $5\selp1_PCP[0:0]
    90/237: $6\ldPC[0:0]
    91/237: $10\selp1_PC[0:0]
    92/237: $11\selrd_1_TRF[0:0]
    93/237: $10\selPC1_PC[0:0]
    94/237: $9\selp1_PC[0:0]
    95/237: $10\selrd_1_TRF[0:0]
    96/237: $9\selPC1_PC[0:0]
    97/237: $8\selp1_PC[0:0]
    98/237: $9\selrd_1_TRF[0:0]
    99/237: $8\selPC1_PC[0:0]
   100/237: $7\selp1_PC[0:0]
   101/237: $8\selrd_1_TRF[0:0]
   102/237: $7\selPC1_PC[0:0]
   103/237: $6\selp1_PC[0:0]
   104/237: $7\selrd_1_TRF[0:0]
   105/237: $6\selPC1_PC[0:0]
   106/237: $5\selp1_PC[0:0]
   107/237: $6\selrd_1_TRF[0:0]
   108/237: $5\selPC1_PC[0:0]
   109/237: $5\selrd_1_TRF[0:0]
   110/237: $4\selPC1_PC[0:0]
   111/237: $4\selp1_PC[0:0]
   112/237: $5\ldPC[0:0]
   113/237: $3\enFlag[0:0]
   114/237: $4\ldPC[0:0]
   115/237: $3\selPC1_PC[0:0]
   116/237: $3\selp2_ASU[0:0]
   117/237: $3\selrd_2_TRF[0:0]
   118/237: $4\selrs1_TRF[0:0]
   119/237: $5\writeTRF[0:0]
   120/237: $3\selimm_ASU[0:0]
   121/237: $5\selrd0_TRF[0:0]
   122/237: $4\selrd_1_TRF[0:0]
   123/237: $3\twosComp[0:0]
   124/237: $3\onesComp[0:0]
   125/237: $3\selLLU_TRF[0:0]
   126/237: $4\selPCadd_PC[0:0]
   127/237: $3\selp1_PC[0:0]
   128/237: $4\selp1_PCP[0:0]
   129/237: $3\SE5bits[0:0]
   130/237: $3\ldMDU1[0:0]
   131/237: $4\startMDU[0:0]
   132/237: $3\ldMDU2[0:0]
   133/237: $3\startMDU[0:0]
   134/237: $4\writeTRF[0:0]
   135/237: $4\selPC1_TRF[0:0]
   136/237: $4\selrd0_TRF[0:0]
   137/237: $3\ldADR[0:0]
   138/237: $3\selp1_PCP[0:0]
   139/237: $3\selrd0_TRF[0:0]
   140/237: $3\selrs1_TRF[0:0]
   141/237: $3\writeTRF[0:0]
   142/237: $3\selrd_1_TRF[0:0]
   143/237: $3\selPC1_TRF[0:0]
   144/237: $3\selPCadd_PC[0:0]
   145/237: $3\selimm_PCP[0:0]
   146/237: $3\ldPC[0:0]
   147/237: $3\SE6bits[0:0]
   148/237: $2\selPC1_PC[0:0]
   149/237: $2\ldPC[0:0]
   150/237: $2\writeTRF[0:0]
   151/237: $2\selimm_ASU[0:0]
   152/237: $2\selp2_ASU[0:0]
   153/237: $2\selrd0_TRF[0:0]
   154/237: $2\selrd_2_TRF[0:0]
   155/237: $2\selrs2_TRF[0:0]
   156/237: $2\selrd_1_TRF[0:0]
   157/237: $2\selrs1_TRF[0:0]
   158/237: $2\twosComp[0:0]
   159/237: $2\onesComp[0:0]
   160/237: $2\selPC1_TRF[0:0]
   161/237: $2\selSHU_TRF[0:0]
   162/237: $2\selLLU_TRF[0:0]
   163/237: $2\selASU_TRF[0:0]
   164/237: $2\selIMM_TRF[0:0]
   165/237: $2\selPCadd_PC[0:0]
   166/237: $2\selp1_PC[0:0]
   167/237: $2\selp2_SHU[0:0]
   168/237: $2\selimm_PCP[0:0]
   169/237: $2\selp1_PCP[0:0]
   170/237: $2\ldADR[0:0]
   171/237: $2\enFlag[0:0]
   172/237: $2\arithSH[0:0]
   173/237: $2\logicSH[0:0]
   174/237: $2\logicAND[0:0]
   175/237: $2\p1lowbits[0:0]
   176/237: $2\SE5bits[0:0]
   177/237: $2\SE8bits[0:0]
   178/237: $2\USE8bits[0:0]
   179/237: $2\SE6bits[0:0]
   180/237: $2\arithSUB[0:0]
   181/237: $2\arithADD[0:0]
   182/237: $2\startMDU[0:0]
   183/237: $2\ldMDU2[0:0]
   184/237: $2\ldMDU1[0:0]
   185/237: $2\arithDIV[0:0]
   186/237: $2\arithMUL[0:0]
   187/237: $1\readMEM[0:0]
   188/237: $1\ldIR[0:0]
   189/237: $1\selPC_MEM[0:0]
   190/237: $1\writeIO[0:0]
   191/237: $1\readIO[0:0]
   192/237: $1\writeMEM[0:0]
   193/237: $1\writeTRF[0:0]
   194/237: $1\selimm_ASU[0:0]
   195/237: $1\selp2_ASU[0:0]
   196/237: $1\selrd1_TRF[0:0]
   197/237: $1\selrd0_TRF[0:0]
   198/237: $1\selrd_2_TRF[0:0]
   199/237: $1\selrs2_TRF[0:0]
   200/237: $1\selrd_1_TRF[0:0]
   201/237: $1\selrs1_TRF[0:0]
   202/237: $1\twosComp[0:0]
   203/237: $1\onesComp[0:0]
   204/237: $1\selPC1_TRF[0:0]
   205/237: $1\seldatabus_TRF[0:0]
   206/237: $1\selSHU_TRF[0:0]
   207/237: $1\selLLU_TRF[0:0]
   208/237: $1\selASU_TRF[0:0]
   209/237: $1\selMDU2_TRF[0:0]
   210/237: $1\selMDU1_TRF[0:0]
   211/237: $1\selIMM_TRF[0:0]
   212/237: $1\selADR_MEM[0:0]
   213/237: $1\selPC1_PC[0:0]
   214/237: $1\selPCadd_PC[0:0]
   215/237: $1\selp1_PC[0:0]
   216/237: $1\selshim_SHU[0:0]
   217/237: $1\selp2_SHU[0:0]
   218/237: $1\selimm_PCP[0:0]
   219/237: $1\selp1_PCP[0:0]
   220/237: $1\ldPC[0:0]
   221/237: $1\ldADR[0:0]
   222/237: $1\enFlag[0:0]
   223/237: $1\arithSH[0:0]
   224/237: $1\logicSH[0:0]
   225/237: $1\logicAND[0:0]
   226/237: $1\p1lowbits[0:0]
   227/237: $1\SE5bits[0:0]
   228/237: $1\SE8bits[0:0]
   229/237: $1\USE8bits[0:0]
   230/237: $1\SE6bits[0:0]
   231/237: $1\arithSUB[0:0]
   232/237: $1\arithADD[0:0]
   233/237: $1\startMDU[0:0]
   234/237: $1\ldMDU2[0:0]
   235/237: $1\ldMDU1[0:0]
   236/237: $1\arithDIV[0:0]
   237/237: $1\arithMUL[0:0]
Creating decoders for process `\Controller.$proc$SAYAC_controller.v:81$169'.
     1/1: $0\pstate[1:0]
Creating decoders for process `\DFF_E.$proc$SAYAC_TRF.v:78$165'.
     1/1: $0\out[0:0]
Creating decoders for process `\TRF.$proc$SAYAC_TRF.v:41$117'.
     1/26: $3$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$164
     2/26: $3$memwr$\register_file$SAYAC_TRF.v:48$110_DATA[15:0]$163
     3/26: $3$memwr$\register_file$SAYAC_TRF.v:48$110_ADDR[4:0]$162
     4/26: $2$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$160
     5/26: $2$memwr$\register_file$SAYAC_TRF.v:48$110_DATA[15:0]$159
     6/26: $2$memwr$\register_file$SAYAC_TRF.v:48$110_ADDR[4:0]$158
     7/26: $1\i[31:0]
     8/26: $1$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$153
     9/26: $1$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$152
    10/26: $1$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$151
    11/26: $1$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$150
    12/26: $1$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$149
    13/26: $1$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$148
    14/26: $1$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$147
    15/26: $1$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$146
    16/26: $1$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$145
    17/26: $1$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$144
    18/26: $1$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$143
    19/26: $1$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$142
    20/26: $1$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$141
    21/26: $1$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$140
    22/26: $1$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$139
    23/26: $1$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$138
    24/26: $1$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$156
    25/26: $1$memwr$\register_file$SAYAC_TRF.v:48$110_DATA[15:0]$155
    26/26: $1$memwr$\register_file$SAYAC_TRF.v:48$110_ADDR[4:0]$154
Creating decoders for process `\mux8to1.$proc$SAYAC_MUX8to1.v:27$49'.
     1/1: $0\dout[15:0]
Creating decoders for process `\divider_CU.$proc$SAYAC_MDU.v:286$40'.
     1/1: $1\ns[2:0]
Creating decoders for process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
     1/14: { $2\setR[0:0] $2\Q0[0:0] $2\setQ0[0:0] $2\load_R[0:0] $2\load_Q[0:0] $2\incCnt[0:0] }
     2/14: $1\shift_R[0:0]
     3/14: $1\ready[0:0]
     4/14: $1\Q0[0:0]
     5/14: $1\setR[0:0]
     6/14: $1\setQ0[0:0]
     7/14: $1\iniCnt[0:0]
     8/14: $1\load_M[0:0]
     9/14: $1\load_Q[0:0]
    10/14: $1\shift_Q[0:0]
    11/14: $1\load_R[0:0]
    12/14: $1\done[0:0]
    13/14: $1\clr_R[0:0]
    14/14: $1\incCnt[0:0]
Creating decoders for process `\divider_CU.$proc$SAYAC_MDU.v:263$38'.
     1/1: $0\ps[2:0]
Creating decoders for process `\shiftReg_17b.$proc$SAYAC_shiftReg_17b.v:32$13'.
     1/1: $0\dataOut[16:0]
Creating decoders for process `$paramod\Counter\N=s32'00000000000000000000000000000101.$proc$SAYAC_counter.v:27$232'.
     1/1: $0\dataOut[4:0]
Creating decoders for process `$paramod\shift_register\size=s32'00000000000000000000000000010010.$proc$SAYAC_shift_register.v:34$231'.
     1/5: $3\Rreg[17:0]
     2/5: $2\seoR[0:0]
     3/5: $2\Rreg[17:0]
     4/5: $1\Rreg[17:0]
     5/5: $1\seoR[0:0]
Creating decoders for process `$paramod\REG\N=s32'00000000000000000000000000010001.$proc$SAYAC_REG.v:26$230'.
     1/1: $0\outREG[16:0]

21.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\next_state' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:147$224': $auto$proc_dlatch.cc:427:proc_dlatch$4032
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\subsel' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\done' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\shrQ' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\ldQ' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\ldM' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\ldP' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\clrP' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\sel' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\cnt_en' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
No latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\cnt_rst' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
Latch inferred for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\Ready' from process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221': $auto$proc_dlatch.cc:427:proc_dlatch$4067
Latch inferred for signal `\Controller.\nstate' from process `\Controller.$proc$SAYAC_controller.v:478$204': $auto$proc_dlatch.cc:427:proc_dlatch$4078
No latch inferred for signal `\Controller.\arithMUL' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\arithDIV' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\ldMDU1' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\ldMDU2' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\startMDU' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\arithADD' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\arithSUB' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\SE6bits' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\USE8bits' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\SE8bits' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\SE5bits' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\p1lowbits' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\logicAND' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\logicSH' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\arithSH' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\enFlag' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\ldIR' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\ldADR' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\ldPC' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selp1_PCP' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selimm_PCP' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selp2_SHU' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selshim_SHU' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selp1_PC' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selPCadd_PC' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selPC1_PC' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selADR_MEM' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selPC_MEM' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selIMM_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selMDU1_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selMDU2_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selASU_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selLLU_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selSHU_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\seldatabus_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selPC1_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\onesComp' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\twosComp' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selrs1_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selrd_1_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selrs2_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selrd_2_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selrd0_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selrd1_TRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selp2_ASU' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\selimm_ASU' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\writeTRF' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\readMEM' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\writeMEM' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\readIO' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\Controller.\writeIO' from process `\Controller.$proc$SAYAC_controller.v:87$170'.
No latch inferred for signal `\mux8to1.\dout' from process `\mux8to1.$proc$SAYAC_MUX8to1.v:27$49'.
Latch inferred for signal `\divider_CU.\ns' from process `\divider_CU.$proc$SAYAC_MDU.v:286$40': $auto$proc_dlatch.cc:427:proc_dlatch$4247
No latch inferred for signal `\divider_CU.\incCnt' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\iniCnt' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\done' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\ready' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\load_R' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\shift_R' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\shift_Q' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\load_Q' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\load_M' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\setQ0' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\setR' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\Q0' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
No latch inferred for signal `\divider_CU.\clr_R' from process `\divider_CU.$proc$SAYAC_MDU.v:270$39'.

21.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\present_state' using process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:120$220'.
  created $adff cell `$procdff$4282' with positive edge clock and positive level reset.
Creating register for signal `$paramod\booth_controller\size=s32'00000000000000000000000000010001.\count' using process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:112$216'.
  created $adff cell `$procdff$4283' with positive edge clock and positive level reset.
Creating register for signal `$paramod\REG\N=s32'00000000000000000000000000010000.\outREG' using process `$paramod\REG\N=s32'00000000000000000000000000010000.$proc$SAYAC_REG.v:26$215'.
  created $adff cell `$procdff$4284' with positive edge clock and positive level reset.
Creating register for signal `\Controller.\pstate' using process `\Controller.$proc$SAYAC_controller.v:81$169'.
  created $adff cell `$procdff$4285' with positive edge clock and positive level reset.
Creating register for signal `\DFF_E.\out' using process `\DFF_E.$proc$SAYAC_TRF.v:78$165'.
  created $adff cell `$procdff$4286' with positive edge clock and positive level reset.
Creating register for signal `\TRF.\i' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4287' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$94_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4288' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$95_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4289' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$96_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4290' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$97_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4291' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$98_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4292' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$99_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4293' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$100_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4294' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$101_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4295' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$102_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4296' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$103_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4297' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$104_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4298' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$105_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4299' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$106_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4300' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$107_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4301' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$108_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4302' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:44$109_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4303' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:48$110_ADDR' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4304' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:48$110_DATA' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4305' with positive edge clock.
Creating register for signal `\TRF.$memwr$\register_file$SAYAC_TRF.v:48$110_EN' using process `\TRF.$proc$SAYAC_TRF.v:41$117'.
  created $dff cell `$procdff$4306' with positive edge clock.
Creating register for signal `\divider_CU.\ps' using process `\divider_CU.$proc$SAYAC_MDU.v:263$38'.
  created $adff cell `$procdff$4307' with positive edge clock and positive level reset.
Creating register for signal `\shiftReg_17b.\dataOut' using process `\shiftReg_17b.$proc$SAYAC_shiftReg_17b.v:32$13'.
  created $adff cell `$procdff$4308' with positive edge clock and positive level reset.
Creating register for signal `$paramod\Counter\N=s32'00000000000000000000000000000101.\dataOut' using process `$paramod\Counter\N=s32'00000000000000000000000000000101.$proc$SAYAC_counter.v:27$232'.
  created $adff cell `$procdff$4309' with positive edge clock and positive level reset.
Creating register for signal `$paramod\shift_register\size=s32'00000000000000000000000000010010.\seoR' using process `$paramod\shift_register\size=s32'00000000000000000000000000010010.$proc$SAYAC_shift_register.v:34$231'.
  created $dff cell `$procdff$4312' with positive edge clock.
Creating register for signal `$paramod\shift_register\size=s32'00000000000000000000000000010010.\Rreg' using process `$paramod\shift_register\size=s32'00000000000000000000000000010010.$proc$SAYAC_shift_register.v:34$231'.
  created $adff cell `$procdff$4313' with positive edge clock and positive level reset.
Creating register for signal `$paramod\REG\N=s32'00000000000000000000000000010001.\outREG' using process `$paramod\REG\N=s32'00000000000000000000000000010001.$proc$SAYAC_REG.v:26$230'.
  created $adff cell `$procdff$4314' with positive edge clock and positive level reset.

21.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

21.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:147$224'.
Removing empty process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:147$224'.
Found and cleaned up 3 empty switches in `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
Removing empty process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:128$221'.
Removing empty process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:120$220'.
Found and cleaned up 1 empty switch in `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:112$216'.
Removing empty process `$paramod\booth_controller\size=s32'00000000000000000000000000010001.$proc$SAYAC_MDU.v:112$216'.
Found and cleaned up 1 empty switch in `$paramod\REG\N=s32'00000000000000000000000000010000.$proc$SAYAC_REG.v:26$215'.
Removing empty process `$paramod\REG\N=s32'00000000000000000000000000010000.$proc$SAYAC_REG.v:26$215'.
Found and cleaned up 15 empty switches in `\Controller.$proc$SAYAC_controller.v:478$204'.
Removing empty process `Controller.$proc$SAYAC_controller.v:478$204'.
Found and cleaned up 34 empty switches in `\Controller.$proc$SAYAC_controller.v:87$170'.
Removing empty process `Controller.$proc$SAYAC_controller.v:87$170'.
Removing empty process `Controller.$proc$SAYAC_controller.v:81$169'.
Found and cleaned up 1 empty switch in `\DFF_E.$proc$SAYAC_TRF.v:78$165'.
Removing empty process `DFF_E.$proc$SAYAC_TRF.v:78$165'.
Found and cleaned up 3 empty switches in `\TRF.$proc$SAYAC_TRF.v:41$117'.
Removing empty process `TRF.$proc$SAYAC_TRF.v:41$117'.
Found and cleaned up 1 empty switch in `\mux8to1.$proc$SAYAC_MUX8to1.v:27$49'.
Removing empty process `mux8to1.$proc$SAYAC_MUX8to1.v:27$49'.
Found and cleaned up 1 empty switch in `\divider_CU.$proc$SAYAC_MDU.v:286$40'.
Removing empty process `divider_CU.$proc$SAYAC_MDU.v:286$40'.
Found and cleaned up 2 empty switches in `\divider_CU.$proc$SAYAC_MDU.v:270$39'.
Removing empty process `divider_CU.$proc$SAYAC_MDU.v:270$39'.
Removing empty process `divider_CU.$proc$SAYAC_MDU.v:263$38'.
Found and cleaned up 3 empty switches in `\shiftReg_17b.$proc$SAYAC_shiftReg_17b.v:32$13'.
Removing empty process `shiftReg_17b.$proc$SAYAC_shiftReg_17b.v:32$13'.
Found and cleaned up 2 empty switches in `$paramod\Counter\N=s32'00000000000000000000000000000101.$proc$SAYAC_counter.v:27$232'.
Removing empty process `$paramod\Counter\N=s32'00000000000000000000000000000101.$proc$SAYAC_counter.v:27$232'.
Found and cleaned up 2 empty switches in `$paramod\shift_register\size=s32'00000000000000000000000000010010.$proc$SAYAC_shift_register.v:34$231'.
Removing empty process `$paramod\shift_register\size=s32'00000000000000000000000000010010.$proc$SAYAC_shift_register.v:34$231'.
Found and cleaned up 1 empty switch in `$paramod\REG\N=s32'00000000000000000000000000010001.$proc$SAYAC_REG.v:26$230'.
Removing empty process `$paramod\REG\N=s32'00000000000000000000000000010001.$proc$SAYAC_REG.v:26$230'.
Cleaned up 73 empty switches.

21.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
<suppressed ~25 debug messages>
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module SAYAC.
Optimizing module Controller.
<suppressed ~274 debug messages>
Optimizing module Datapath.
Optimizing module DFF_E.
<suppressed ~2 debug messages>
Optimizing module TRF.
<suppressed ~5 debug messages>
Optimizing module SHU.
Optimizing module LLU.
Optimizing module IMM.
Optimizing module CMP.
Optimizing module FA.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module ASU.
Optimizing module mux8to1.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module divider_DP.
Optimizing module divider_CU.
<suppressed ~10 debug messages>
Optimizing module divider.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module MDU.
Optimizing module shiftReg_17b.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
<suppressed ~1 debug messages>
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.

21.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module SAYAC.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module DFF_E.
Optimizing module TRF.
Optimizing module SHU.
Optimizing module LLU.
Optimizing module IMM.
Optimizing module CMP.
Optimizing module FA.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module ASU.
Optimizing module mux8to1.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module divider_DP.
Optimizing module divider_CU.
Optimizing module divider.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module MDU.
Optimizing module shiftReg_17b.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.

21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \shiftReg_17b..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Removed 54 unused cells and 855 unused wires.
<suppressed ~90 debug messages>

21.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\Counter\N=s32'00000000000000000000000000000101...
Checking module $paramod\REG\N=s32'00000000000000000000000000010000...
Checking module $paramod\REG\N=s32'00000000000000000000000000010001...
Checking module $paramod\adder1\size=s32'00000000000000000000000000010000...
Checking module $paramod\adder\size=s32'00000000000000000000000000010000...
Checking module $paramod\adder\size=s32'00000000000000000000000000010001...
Checking module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001...
Checking module $paramod\booth\size=s32'00000000000000000000000000010001...
Checking module $paramod\booth_controller\size=s32'00000000000000000000000000010001...
Checking module $paramod\booth_datapath\size=s32'00000000000000000000000000010001...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000000100...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000000101...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000010001...
Checking module $paramod\mux3to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\shift_register\size=s32'00000000000000000000000000010010...
Checking module ASU...
Checking module CMP...
Checking module Controller...
Checking module DFF_E...
Checking module Datapath...
Checking module FA...
Checking module IMM...
Checking module LLU...
Checking module MDU...
Checking module SAYAC...
Checking module SHU...
Checking module TRF...
Checking module divider...
Checking module divider_CU...
Checking module divider_DP...
Checking module mux8to1...
Checking module shiftReg_17b...
Found and reported 0 problems.

21.6. Executing OPT pass (performing simple optimizations).

21.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
<suppressed ~45 debug messages>
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
<suppressed ~4296 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
<suppressed ~3 debug messages>
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
<suppressed ~3 debug messages>
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
<suppressed ~6 debug messages>
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
<suppressed ~45 debug messages>
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 1466 cells.

21.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$281.
    dead port 2/2 on $mux $procmux$283.
    dead port 2/2 on $mux $procmux$290.
    dead port 2/2 on $mux $procmux$297.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$1751.
    dead port 2/2 on $mux $procmux$1753.
    dead port 2/2 on $mux $procmux$1240.
    dead port 2/2 on $mux $procmux$1755.
    dead port 2/2 on $mux $procmux$1757.
    dead port 2/2 on $mux $procmux$1242.
    dead port 2/2 on $mux $procmux$1770.
    dead port 2/2 on $mux $procmux$3366.
    dead port 2/2 on $mux $procmux$1772.
    dead port 2/2 on $mux $procmux$1244.
    dead port 2/2 on $mux $procmux$1774.
    dead port 2/2 on $mux $procmux$2778.
    dead port 2/2 on $mux $procmux$1776.
    dead port 2/2 on $mux $procmux$1789.
    dead port 2/2 on $mux $procmux$1256.
    dead port 2/2 on $mux $procmux$1791.
    dead port 2/2 on $mux $procmux$1793.
    dead port 2/2 on $mux $procmux$1258.
    dead port 2/2 on $mux $procmux$1795.
    dead port 2/2 on $mux $procmux$3387.
    dead port 2/2 on $mux $procmux$1808.
    dead port 2/2 on $mux $procmux$1260.
    dead port 2/2 on $mux $procmux$1810.
    dead port 2/2 on $mux $procmux$2799.
    dead port 2/2 on $mux $procmux$1812.
    dead port 2/2 on $mux $procmux$1262.
    dead port 2/2 on $mux $procmux$1814.
    dead port 2/2 on $mux $procmux$1828.
    dead port 2/2 on $mux $procmux$1830.
    dead port 2/2 on $mux $procmux$1274.
    dead port 2/2 on $mux $procmux$1832.
    dead port 2/2 on $mux $procmux$3408.
    dead port 2/2 on $mux $procmux$1000.
    dead port 2/2 on $mux $procmux$1834.
    dead port 2/2 on $mux $procmux$1276.
    dead port 2/2 on $mux $procmux$1848.
    dead port 2/2 on $mux $procmux$1850.
    dead port 2/2 on $mux $procmux$2820.
    dead port 2/2 on $mux $procmux$1278.
    dead port 2/2 on $mux $procmux$1852.
    dead port 2/2 on $mux $procmux$1854.
    dead port 2/2 on $mux $procmux$1280.
    dead port 2/2 on $mux $procmux$1868.
    dead port 2/2 on $mux $procmux$3429.
    dead port 2/2 on $mux $procmux$1870.
    dead port 2/2 on $mux $procmux$1872.
    dead port 2/2 on $mux $procmux$1293.
    dead port 2/2 on $mux $procmux$1874.
    dead port 2/2 on $mux $procmux$1889.
    dead port 2/2 on $mux $procmux$1295.
    dead port 2/2 on $mux $procmux$2841.
    dead port 2/2 on $mux $procmux$1891.
    dead port 2/2 on $mux $procmux$1007.
    dead port 2/2 on $mux $procmux$1893.
    dead port 2/2 on $mux $procmux$1297.
    dead port 2/2 on $mux $procmux$1895.
    dead port 2/2 on $mux $procmux$1238.
    dead port 2/2 on $mux $procmux$3450.
    dead port 2/2 on $mux $procmux$1910.
    dead port 2/2 on $mux $procmux$1299.
    dead port 2/2 on $mux $procmux$1912.
    dead port 2/2 on $mux $procmux$1914.
    dead port 2/2 on $mux $procmux$1916.
    dead port 2/2 on $mux $procmux$1312.
    dead port 2/2 on $mux $procmux$1931.
    dead port 2/2 on $mux $procmux$2862.
    dead port 2/2 on $mux $procmux$1015.
    dead port 2/2 on $mux $procmux$1933.
    dead port 2/2 on $mux $procmux$1314.
    dead port 2/2 on $mux $procmux$1935.
    dead port 2/2 on $mux $procmux$3471.
    dead port 2/2 on $mux $procmux$1017.
    dead port 2/2 on $mux $procmux$1937.
    dead port 2/2 on $mux $procmux$1316.
    dead port 2/2 on $mux $procmux$1953.
    dead port 2/2 on $mux $procmux$1955.
    dead port 2/2 on $mux $procmux$1318.
    dead port 2/2 on $mux $procmux$1957.
    dead port 2/2 on $mux $procmux$1959.
    dead port 2/2 on $mux $procmux$2883.
    dead port 2/2 on $mux $procmux$1975.
    dead port 2/2 on $mux $procmux$1331.
    dead port 2/2 on $mux $procmux$3492.
    dead port 2/2 on $mux $procmux$1977.
    dead port 2/2 on $mux $procmux$1025.
    dead port 2/2 on $mux $procmux$1979.
    dead port 2/2 on $mux $procmux$1333.
    dead port 2/2 on $mux $procmux$1981.
    dead port 2/2 on $mux $procmux$1027.
    dead port 2/2 on $mux $procmux$1997.
    dead port 2/2 on $mux $procmux$1335.
    dead port 2/2 on $mux $procmux$1999.
    dead port 2/2 on $mux $procmux$2001.
    dead port 2/2 on $mux $procmux$1337.
    dead port 2/2 on $mux $procmux$2003.
    dead port 2/2 on $mux $procmux$2904.
    dead port 2/2 on $mux $procmux$3513.
    dead port 2/2 on $mux $procmux$2020.
    dead port 2/2 on $mux $procmux$2022.
    dead port 2/2 on $mux $procmux$1350.
    dead port 2/2 on $mux $procmux$2024.
    dead port 2/2 on $mux $procmux$1034.
    dead port 2/2 on $mux $procmux$2026.
    dead port 2/2 on $mux $procmux$1352.
    dead port 2/2 on $mux $procmux$2043.
    dead port 2/2 on $mux $procmux$2045.
    dead port 2/2 on $mux $procmux$1354.
    dead port 2/2 on $mux $procmux$2047.
    dead port 2/2 on $mux $procmux$2049.
    dead port 2/2 on $mux $procmux$3534.
    dead port 2/2 on $mux $procmux$2925.
    dead port 2/2 on $mux $procmux$1356.
    dead port 2/2 on $mux $procmux$2066.
    dead port 2/2 on $mux $procmux$1041.
    dead port 2/2 on $mux $procmux$2068.
    dead port 2/2 on $mux $procmux$2070.
    dead port 2/2 on $mux $procmux$1370.
    dead port 2/2 on $mux $procmux$2072.
    dead port 2/2 on $mux $procmux$1372.
    dead port 2/2 on $mux $procmux$1374.
    dead port 2/2 on $mux $procmux$3555.
    dead port 2/2 on $mux $procmux$1376.
    dead port 2/2 on $mux $procmux$1048.
    dead port 2/2 on $mux $procmux$2946.
    dead port 2/2 on $mux $procmux$2088.
    dead port 2/2 on $mux $procmux$2090.
    dead port 2/2 on $mux $procmux$1390.
    dead port 2/2 on $mux $procmux$2092.
    dead port 2/2 on $mux $procmux$1392.
    dead port 2/2 on $mux $procmux$1394.
    dead port 2/2 on $mux $procmux$1055.
    dead port 2/2 on $mux $procmux$1396.
    dead port 2/2 on $mux $procmux$2108.
    dead port 2/2 on $mux $procmux$2110.
    dead port 2/2 on $mux $procmux$1410.
    dead port 2/2 on $mux $procmux$2967.
    dead port 2/2 on $mux $procmux$2112.
    dead port 2/2 on $mux $procmux$1412.
    dead port 2/2 on $mux $procmux$1062.
    dead port 2/2 on $mux $procmux$1414.
    dead port 2/2 on $mux $procmux$1416.
    dead port 2/2 on $mux $procmux$2128.
    dead port 2/2 on $mux $procmux$2130.
    dead port 2/2 on $mux $procmux$1430.
    dead port 2/2 on $mux $procmux$2132.
    dead port 2/2 on $mux $procmux$1069.
    dead port 2/2 on $mux $procmux$1432.
    dead port 2/2 on $mux $procmux$2988.
    dead port 2/2 on $mux $procmux$1434.
    dead port 2/2 on $mux $procmux$1436.
    dead port 2/2 on $mux $procmux$1076.
    dead port 2/2 on $mux $procmux$2148.
    dead port 2/2 on $mux $procmux$2150.
    dead port 2/2 on $mux $procmux$1451.
    dead port 2/2 on $mux $procmux$2152.
    dead port 2/2 on $mux $procmux$2164.
    dead port 2/2 on $mux $procmux$1453.
    dead port 2/2 on $mux $procmux$2166.
    dead port 2/2 on $mux $procmux$3009.
    dead port 2/2 on $mux $procmux$1455.
    dead port 2/2 on $mux $procmux$1457.
    dead port 2/2 on $mux $procmux$1083.
    dead port 2/2 on $mux $procmux$1472.
    dead port 2/2 on $mux $procmux$2178.
    dead port 2/2 on $mux $procmux$2180.
    dead port 2/2 on $mux $procmux$1474.
    dead port 2/2 on $mux $procmux$1476.
    dead port 2/2 on $mux $procmux$1090.
    dead port 2/2 on $mux $procmux$1478.
    dead port 2/2 on $mux $procmux$3030.
    dead port 2/2 on $mux $procmux$2192.
    dead port 2/2 on $mux $procmux$1493.
    dead port 2/2 on $mux $procmux$2194.
    dead port 2/2 on $mux $procmux$1495.
    dead port 2/2 on $mux $procmux$2206.
    dead port 2/2 on $mux $procmux$1098.
    dead port 2/2 on $mux $procmux$2208.
    dead port 2/2 on $mux $procmux$1497.
    dead port 2/2 on $mux $procmux$2220.
    dead port 2/2 on $mux $procmux$1499.
    dead port 2/2 on $mux $procmux$2222.
    dead port 2/2 on $mux $procmux$3051.
    dead port 2/2 on $mux $procmux$1100.
    dead port 2/2 on $mux $procmux$1514.
    dead port 2/2 on $mux $procmux$2231.
    dead port 2/2 on $mux $procmux$2233.
    dead port 2/2 on $mux $procmux$1516.
    dead port 2/2 on $mux $procmux$1102.
    dead port 2/2 on $mux $procmux$1518.
    dead port 2/2 on $mux $procmux$2241.
    dead port 2/2 on $mux $procmux$2243.
    dead port 2/2 on $mux $procmux$1520.
    dead port 2/2 on $mux $procmux$3072.
    dead port 2/2 on $mux $procmux$2254.
    dead port 2/2 on $mux $procmux$2256.
    dead port 2/2 on $mux $procmux$1536.
    dead port 2/2 on $mux $procmux$1538.
    dead port 2/2 on $mux $procmux$2264.
    dead port 2/2 on $mux $procmux$1110.
    dead port 2/2 on $mux $procmux$2266.
    dead port 2/2 on $mux $procmux$1540.
    dead port 2/2 on $mux $procmux$1542.
    dead port 2/2 on $mux $procmux$1112.
    dead port 2/2 on $mux $procmux$2276.
    dead port 2/2 on $mux $procmux$3093.
    dead port 2/2 on $mux $procmux$1558.
    dead port 2/2 on $mux $procmux$2278.
    dead port 2/2 on $mux $procmux$1560.
    dead port 2/2 on $mux $procmux$1114.
    dead port 2/2 on $mux $procmux$2286.
    dead port 2/2 on $mux $procmux$1562.
    dead port 2/2 on $mux $procmux$2288.
    dead port 2/2 on $mux $procmux$1564.
    dead port 2/2 on $mux $procmux$2296.
    dead port 2/2 on $mux $procmux$2298.
    dead port 2/2 on $mux $procmux$1580.
    dead port 2/2 on $mux $procmux$3114.
    dead port 2/2 on $mux $procmux$1123.
    dead port 2/2 on $mux $procmux$1582.
    dead port 2/2 on $mux $procmux$2306.
    dead port 2/2 on $mux $procmux$2308.
    dead port 2/2 on $mux $procmux$1584.
    dead port 2/2 on $mux $procmux$1125.
    dead port 2/2 on $mux $procmux$2317.
    dead port 2/2 on $mux $procmux$1586.
    dead port 2/2 on $mux $procmux$2319.
    dead port 2/2 on $mux $procmux$2329.
    dead port 2/2 on $mux $procmux$1602.
    dead port 2/2 on $mux $procmux$3135.
    dead port 2/2 on $mux $procmux$2331.
    dead port 2/2 on $mux $procmux$1127.
    dead port 2/2 on $mux $procmux$1604.
    dead port 2/2 on $mux $procmux$2340.
    dead port 2/2 on $mux $procmux$2342.
    dead port 2/2 on $mux $procmux$1606.
    dead port 2/2 on $mux $procmux$2353.
    dead port 2/2 on $mux $procmux$1608.
    dead port 2/2 on $mux $procmux$2355.
    dead port 2/2 on $mux $procmux$1136.
    dead port 2/2 on $mux $procmux$2363.
    dead port 2/2 on $mux $procmux$3156.
    dead port 2/2 on $mux $procmux$2365.
    dead port 2/2 on $mux $procmux$2373.
    dead port 2/2 on $mux $procmux$2375.
    dead port 2/2 on $mux $procmux$1138.
    dead port 2/2 on $mux $procmux$2384.
    dead port 2/2 on $mux $procmux$2386.
    dead port 2/2 on $mux $procmux$1140.
    dead port 2/2 on $mux $procmux$2395.
    dead port 2/2 on $mux $procmux$2397.
    dead port 2/2 on $mux $procmux$3177.
    dead port 2/2 on $mux $procmux$2418.
    dead port 2/2 on $mux $procmux$2420.
    dead port 2/2 on $mux $procmux$2422.
    dead port 2/2 on $mux $procmux$1623.
    dead port 2/2 on $mux $procmux$2443.
    dead port 2/2 on $mux $procmux$1151.
    dead port 2/2 on $mux $procmux$2445.
    dead port 2/2 on $mux $procmux$1625.
    dead port 2/2 on $mux $procmux$2447.
    dead port 2/2 on $mux $procmux$2468.
    dead port 2/2 on $mux $procmux$1627.
    dead port 2/2 on $mux $procmux$3198.
    dead port 2/2 on $mux $procmux$2470.
    dead port 2/2 on $mux $procmux$1153.
    dead port 2/2 on $mux $procmux$2472.
    dead port 2/2 on $mux $procmux$2494.
    dead port 2/2 on $mux $procmux$1155.
    dead port 2/2 on $mux $procmux$2496.
    dead port 2/2 on $mux $procmux$1157.
    dead port 2/2 on $mux $procmux$3219.
    dead port 2/2 on $mux $procmux$556.
    dead port 2/2 on $mux $procmux$1642.
    dead port 2/2 on $mux $procmux$2518.
    dead port 2/2 on $mux $procmux$562.
    dead port 2/2 on $mux $procmux$1168.
    dead port 2/2 on $mux $procmux$2520.
    dead port 2/2 on $mux $procmux$1644.
    dead port 2/2 on $mux $procmux$568.
    dead port 2/2 on $mux $procmux$574.
    dead port 2/2 on $mux $procmux$1646.
    dead port 2/2 on $mux $procmux$1170.
    dead port 2/2 on $mux $procmux$580.
    dead port 2/2 on $mux $procmux$2542.
    dead port 2/2 on $mux $procmux$585.
    dead port 2/2 on $mux $procmux$2544.
    dead port 2/2 on $mux $procmux$590.
    dead port 2/2 on $mux $procmux$1172.
    dead port 1/2 on $mux $procmux$601.
    dead port 2/2 on $mux $procmux$603.
    dead port 2/2 on $mux $procmux$605.
    dead port 2/2 on $mux $procmux$607.
    dead port 2/2 on $mux $procmux$1174.
    dead port 2/2 on $mux $procmux$617.
    dead port 2/2 on $mux $procmux$3240.
    dead port 2/2 on $mux $procmux$619.
    dead port 2/2 on $mux $procmux$621.
    dead port 2/2 on $mux $procmux$631.
    dead port 2/2 on $mux $procmux$633.
    dead port 2/2 on $mux $procmux$2566.
    dead port 2/2 on $mux $procmux$635.
    dead port 2/2 on $mux $procmux$1661.
    dead port 2/2 on $mux $procmux$645.
    dead port 2/2 on $mux $procmux$2568.
    dead port 2/2 on $mux $procmux$647.
    dead port 2/2 on $mux $procmux$1185.
    dead port 2/2 on $mux $procmux$649.
    dead port 1/2 on $mux $procmux$661.
    dead port 2/2 on $mux $procmux$663.
    dead port 2/2 on $mux $procmux$1663.
    dead port 2/2 on $mux $procmux$665.
    dead port 2/2 on $mux $procmux$667.
    dead port 2/2 on $mux $procmux$1665.
    dead port 1/2 on $mux $procmux$679.
    dead port 2/2 on $mux $procmux$681.
    dead port 2/2 on $mux $procmux$1187.
    dead port 2/2 on $mux $procmux$683.
    dead port 2/2 on $mux $procmux$2590.
    dead port 2/2 on $mux $procmux$685.
    dead port 2/2 on $mux $procmux$696.
    dead port 2/2 on $mux $procmux$2592.
    dead port 2/2 on $mux $procmux$698.
    dead port 2/2 on $mux $procmux$700.
    dead port 2/2 on $mux $procmux$711.
    dead port 2/2 on $mux $procmux$1189.
    dead port 2/2 on $mux $procmux$713.
    dead port 2/2 on $mux $procmux$3261.
    dead port 2/2 on $mux $procmux$715.
    dead port 2/2 on $mux $procmux$726.
    dead port 2/2 on $mux $procmux$728.
    dead port 2/2 on $mux $procmux$1191.
    dead port 2/2 on $mux $procmux$730.
    dead port 2/2 on $mux $procmux$741.
    dead port 2/2 on $mux $procmux$2614.
    dead port 2/2 on $mux $procmux$743.
    dead port 2/2 on $mux $procmux$745.
    dead port 2/2 on $mux $procmux$2616.
    dead port 2/2 on $mux $procmux$1680.
    dead port 2/2 on $mux $procmux$755.
    dead port 2/2 on $mux $procmux$757.
    dead port 2/2 on $mux $procmux$1202.
    dead port 2/2 on $mux $procmux$1682.
    dead port 2/2 on $mux $procmux$767.
    dead port 2/2 on $mux $procmux$769.
    dead port 2/2 on $mux $procmux$1684.
    dead port 2/2 on $mux $procmux$2638.
    dead port 2/2 on $mux $procmux$779.
    dead port 2/2 on $mux $procmux$1204.
    dead port 2/2 on $mux $procmux$781.
    dead port 2/2 on $mux $procmux$2640.
    dead port 2/2 on $mux $procmux$791.
    dead port 2/2 on $mux $procmux$3282.
    dead port 2/2 on $mux $procmux$793.
    dead port 2/2 on $mux $procmux$1206.
    dead port 2/2 on $mux $procmux$803.
    dead port 2/2 on $mux $procmux$805.
    dead port 2/2 on $mux $procmux$1208.
    dead port 2/2 on $mux $procmux$2662.
    dead port 2/2 on $mux $procmux$815.
    dead port 2/2 on $mux $procmux$2664.
    dead port 2/2 on $mux $procmux$817.
    dead port 2/2 on $mux $procmux$827.
    dead port 2/2 on $mux $procmux$1699.
    dead port 2/2 on $mux $procmux$829.
    dead port 2/2 on $mux $procmux$1220.
    dead port 2/2 on $mux $procmux$1701.
    dead port 2/2 on $mux $procmux$839.
    dead port 2/2 on $mux $procmux$2686.
    dead port 2/2 on $mux $procmux$841.
    dead port 2/2 on $mux $procmux$1703.
    dead port 2/2 on $mux $procmux$2688.
    dead port 2/2 on $mux $procmux$850.
    dead port 2/2 on $mux $procmux$1222.
    dead port 2/2 on $mux $procmux$852.
    dead port 2/2 on $mux $procmux$3303.
    dead port 2/2 on $mux $procmux$861.
    dead port 2/2 on $mux $procmux$863.
    dead port 2/2 on $mux $procmux$1715.
    dead port 2/2 on $mux $procmux$872.
    dead port 2/2 on $mux $procmux$874.
    dead port 2/2 on $mux $procmux$1717.
    dead port 2/2 on $mux $procmux$2710.
    dead port 2/2 on $mux $procmux$882.
    dead port 2/2 on $mux $procmux$2712.
    dead port 2/2 on $mux $procmux$890.
    dead port 2/2 on $mux $procmux$1719.
    dead port 2/2 on $mux $procmux$898.
    dead port 2/2 on $mux $procmux$1224.
    dead port 2/2 on $mux $procmux$1721.
    dead port 2/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$2734.
    dead port 2/2 on $mux $procmux$1733.
    dead port 2/2 on $mux $procmux$914.
    dead port 2/2 on $mux $procmux$2736.
    dead port 2/2 on $mux $procmux$3324.
    dead port 2/2 on $mux $procmux$1226.
    dead port 2/2 on $mux $procmux$921.
    dead port 2/2 on $mux $procmux$929.
    dead port 2/2 on $mux $procmux$1735.
    dead port 2/2 on $mux $procmux$937.
    dead port 2/2 on $mux $procmux$1737.
    dead port 2/2 on $mux $procmux$945.
    dead port 2/2 on $mux $procmux$953.
    dead port 2/2 on $mux $procmux$961.
    dead port 2/2 on $mux $procmux$968.
    dead port 2/2 on $mux $procmux$975.
    dead port 2/2 on $mux $procmux$981.
    dead port 2/2 on $mux $procmux$3345.
    dead port 2/2 on $mux $procmux$987.
    dead port 2/2 on $mux $procmux$994.
    dead port 2/2 on $mux $procmux$2757.
    dead port 2/2 on $mux $procmux$1739.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$3818.
    dead port 1/2 on $mux $procmux$3821.
    dead port 2/2 on $mux $procmux$3827.
    dead port 1/2 on $mux $procmux$3830.
    dead port 2/2 on $mux $procmux$3836.
    dead port 1/2 on $mux $procmux$3839.
    dead port 1/2 on $mux $procmux$3845.
    dead port 1/2 on $mux $procmux$3851.
    dead port 1/2 on $mux $procmux$3857.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$3941.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 426 multiplexer ports.
<suppressed ~131 debug messages>

21.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
    New ctrl vector for $pmux cell $procmux$269: { $procmux$273_CMP $procmux$272_CMP $procmux$271_CMP $procmux$270_CMP }
    New ctrl vector for $pmux cell $procmux$303: $auto$opt_reduce.cc:134:opt_pmux$4333
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
    New ctrl vector for $pmux cell $procmux$2141: $auto$opt_reduce.cc:134:opt_pmux$4335
    New ctrl vector for $pmux cell $procmux$3782: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4337 }
    New ctrl vector for $pmux cell $procmux$3517: { $procmux$2364_CMP $auto$opt_reduce.cc:134:opt_pmux$4339 }
    New ctrl vector for $pmux cell $procmux$3787: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4341 }
    New ctrl vector for $pmux cell $procmux$2992: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4343 }
    New ctrl vector for $pmux cell $procmux$3792: { $procmux$1018_CMP $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4345 }
    New ctrl vector for $pmux cell $procmux$3612: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4347 }
    New ctrl vector for $pmux cell $procmux$3797: { $procmux$1018_CMP $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4349 }
    New ctrl vector for $pmux cell $procmux$3160: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4351 }
    New ctrl vector for $pmux cell $procmux$3802: { $procmux$1018_CMP $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4353 }
    New ctrl vector for $pmux cell $procmux$3617: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4355 }
    New ctrl vector for $pmux cell $procmux$3807: { $procmux$1018_CMP $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4357 }
    New ctrl vector for $pmux cell $procmux$437: $procmux$2492_CMP
    New ctrl vector for $pmux cell $procmux$2866: { $auto$opt_reduce.cc:134:opt_pmux$4359 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3622: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4361 }
    New ctrl vector for $pmux cell $procmux$446: $auto$opt_reduce.cc:134:opt_pmux$4363
    New ctrl vector for $pmux cell $procmux$3181: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4365 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$2161: $auto$opt_reduce.cc:134:opt_pmux$4367
    New ctrl vector for $pmux cell $procmux$3627: { $procmux$1018_CMP $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4369 }
    New ctrl vector for $pmux cell $procmux$509: $auto$opt_reduce.cc:134:opt_pmux$4371
    New ctrl vector for $pmux cell $procmux$520: { $procmux$2421_CMP $procmux$1006_CMP $procmux$2364_CMP }
    New ctrl vector for $pmux cell $procmux$3632: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4373 }
    New ctrl vector for $pmux cell $procmux$3013: { $auto$opt_reduce.cc:134:opt_pmux$4377 $auto$opt_reduce.cc:134:opt_pmux$4375 }
    New ctrl vector for $pmux cell $procmux$3202: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4379 }
    New ctrl vector for $pmux cell $procmux$2171: { $procmux$1718_CMP $procmux$1154_CMP $auto$opt_reduce.cc:134:opt_pmux$4381 }
    New ctrl vector for $pmux cell $procmux$3637: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4383 }
    New ctrl vector for $pmux cell $procmux$2489: { $auto$opt_reduce.cc:134:opt_pmux$4387 $auto$opt_reduce.cc:134:opt_pmux$4385 }
    New ctrl vector for $pmux cell $procmux$3433: { $auto$opt_reduce.cc:134:opt_pmux$4391 $auto$opt_reduce.cc:134:opt_pmux$4389 }
    New ctrl vector for $pmux cell $procmux$547: { $procmux$1018_CMP $procmux$1001_CMP $procmux$3558_CMP }
    New ctrl vector for $pmux cell $procmux$2513: { $auto$opt_reduce.cc:134:opt_pmux$4393 $procmux$2490_CMP }
    New ctrl vector for $pmux cell $procmux$553: $auto$opt_reduce.cc:134:opt_pmux$4395
    New ctrl vector for $pmux cell $procmux$3642: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4397 }
    New ctrl vector for $pmux cell $procmux$3475: { $procmux$1006_CMP $auto$opt_reduce.cc:134:opt_pmux$4399 }
    New ctrl vector for $pmux cell $procmux$559: $auto$opt_reduce.cc:134:opt_pmux$4401
    New ctrl vector for $pmux cell $procmux$3223: { $auto$opt_reduce.cc:134:opt_pmux$4403 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3647: { $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4405 }
    New ctrl vector for $pmux cell $procmux$565: $auto$opt_reduce.cc:134:opt_pmux$4407
    New ctrl vector for $pmux cell $procmux$2782: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4411 $auto$opt_reduce.cc:134:opt_pmux$4409 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3538: { $procmux$1006_CMP $auto$opt_reduce.cc:134:opt_pmux$4413 }
    New ctrl vector for $pmux cell $procmux$2185: { $procmux$1718_CMP $procmux$1154_CMP $auto$opt_reduce.cc:134:opt_pmux$4415 }
    New ctrl vector for $pmux cell $procmux$2537: { $procmux$2492_CMP $procmux$2419_CMP $auto$opt_reduce.cc:134:opt_pmux$4417 }
    New ctrl vector for $pmux cell $procmux$3652: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4419 }
    New ctrl vector for $pmux cell $procmux$2929: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4423 $auto$opt_reduce.cc:134:opt_pmux$4421 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3657: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4425 }
    New ctrl vector for $pmux cell $procmux$3034: { $auto$opt_reduce.cc:134:opt_pmux$4429 $auto$opt_reduce.cc:134:opt_pmux$4427 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$2561: { $auto$opt_reduce.cc:134:opt_pmux$4433 $auto$opt_reduce.cc:134:opt_pmux$4431 }
    New ctrl vector for $pmux cell $procmux$3662: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4435 }
    New ctrl vector for $pmux cell $procmux$3244: { $procmux$2748_CMP $auto$opt_reduce.cc:134:opt_pmux$4437 }
    New ctrl vector for $pmux cell $procmux$3667: { $auto$opt_reduce.cc:134:opt_pmux$4439 $procmux$1001_CMP $procmux$3558_CMP }
    New ctrl vector for $pmux cell $procmux$3672: { $auto$opt_reduce.cc:134:opt_pmux$4441 $procmux$1001_CMP $procmux$3558_CMP }
    New ctrl vector for $pmux cell $procmux$2585: { $auto$opt_reduce.cc:134:opt_pmux$4443 $procmux$2419_CMP $procmux$2490_CMP }
    New ctrl vector for $pmux cell $procmux$3677: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4445 }
    New ctrl vector for $pmux cell $procmux$3055: { $auto$opt_reduce.cc:134:opt_pmux$4449 $auto$opt_reduce.cc:134:opt_pmux$4447 }
    New ctrl vector for $pmux cell $procmux$2228: $auto$opt_reduce.cc:134:opt_pmux$4451
    New ctrl vector for $pmux cell $procmux$3682: { $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4453 }
    New ctrl vector for $pmux cell $procmux$3391: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4455 }
    New ctrl vector for $pmux cell $procmux$3557: { $procmux$3561_CMP $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4457 }
    New ctrl vector for $pmux cell $procmux$3412: { $auto$opt_reduce.cc:134:opt_pmux$4461 $auto$opt_reduce.cc:134:opt_pmux$4459 }
    New ctrl vector for $pmux cell $procmux$2238: $auto$opt_reduce.cc:134:opt_pmux$4463
    New ctrl vector for $pmux cell $procmux$2887: { $auto$opt_reduce.cc:134:opt_pmux$4467 $auto$opt_reduce.cc:134:opt_pmux$4465 }
    New ctrl vector for $pmux cell $procmux$2609: { $procmux$2492_CMP $auto$opt_reduce.cc:134:opt_pmux$4469 }
    New ctrl vector for $pmux cell $procmux$3692: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4471 }
    New ctrl vector for $pmux cell $procmux$3562: { $procmux$3561_CMP $auto$opt_reduce.cc:134:opt_pmux$4473 }
    New ctrl vector for $pmux cell $procmux$2845: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4477 $auto$opt_reduce.cc:134:opt_pmux$4475 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$2950: { $auto$opt_reduce.cc:134:opt_pmux$4479 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3697: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4481 }
    New ctrl vector for $pmux cell $procmux$3265: { $procmux$2749_CMP $auto$opt_reduce.cc:134:opt_pmux$4483 }
    New ctrl vector for $pmux cell $procmux$3702: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4485 }
    New ctrl vector for $pmux cell $procmux$3076: { $auto$opt_reduce.cc:134:opt_pmux$4489 $auto$opt_reduce.cc:134:opt_pmux$4487 }
    New ctrl vector for $pmux cell $procmux$3567: { $procmux$3561_CMP $auto$opt_reduce.cc:134:opt_pmux$4491 }
    New ctrl vector for $pmux cell $procmux$3707: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4493 }
    New ctrl vector for $pmux cell $procmux$2633: { $auto$opt_reduce.cc:134:opt_pmux$4495 $procmux$2419_CMP $procmux$2490_CMP }
    New ctrl vector for $pmux cell $procmux$2261: $auto$opt_reduce.cc:134:opt_pmux$4497
    New ctrl vector for $pmux cell $procmux$3496: { $procmux$2364_CMP $auto$opt_reduce.cc:134:opt_pmux$4499 }
    New ctrl vector for $pmux cell $procmux$3712: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4501 }
    New ctrl vector for $pmux cell $procmux$3572: { $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4503 }
    New ctrl vector for $pmux cell $procmux$2271: { $procmux$1718_CMP $procmux$1154_CMP $auto$opt_reduce.cc:134:opt_pmux$4505 }
    New ctrl vector for $pmux cell $procmux$3717: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4507 }
    New ctrl vector for $pmux cell $procmux$1692: $auto$opt_reduce.cc:134:opt_pmux$4509
    New ctrl vector for $pmux cell $procmux$2657: { $auto$opt_reduce.cc:134:opt_pmux$4513 $auto$opt_reduce.cc:134:opt_pmux$4511 }
    New ctrl vector for $pmux cell $procmux$3370: { $procmux$2752_CMP $auto$opt_reduce.cc:134:opt_pmux$4515 }
    New ctrl vector for $pmux cell $procmux$800: $auto$opt_reduce.cc:134:opt_pmux$4517
    New ctrl vector for $pmux cell $procmux$3286: { $auto$opt_reduce.cc:134:opt_pmux$4521 $auto$opt_reduce.cc:134:opt_pmux$4519 }
    New ctrl vector for $pmux cell $procmux$3577: { $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4523 }
    New ctrl vector for $pmux cell $procmux$2761: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4527 $auto$opt_reduce.cc:134:opt_pmux$4525 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$812: $auto$opt_reduce.cc:134:opt_pmux$4529
    New ctrl vector for $pmux cell $procmux$3097: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4531 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3727: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4533 }
    New ctrl vector for $pmux cell $procmux$2681: { $auto$opt_reduce.cc:134:opt_pmux$4535 $procmux$2490_CMP }
    New ctrl vector for $pmux cell $procmux$3732: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4537 }
    New ctrl vector for $pmux cell $procmux$836: $auto$opt_reduce.cc:134:opt_pmux$4539
    New ctrl vector for $pmux cell $procmux$3582: { $procmux$1001_CMP $auto$opt_reduce.cc:134:opt_pmux$4541 }
    New ctrl vector for $pmux cell $procmux$3454: { $procmux$1006_CMP $procmux$2364_CMP $auto$opt_reduce.cc:134:opt_pmux$4543 }
    New ctrl vector for $pmux cell $procmux$3737: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4545 }
    New ctrl vector for $pmux cell $procmux$3742: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4547 }
    New ctrl vector for $pmux cell $procmux$2705: { $auto$opt_reduce.cc:134:opt_pmux$4551 $auto$opt_reduce.cc:134:opt_pmux$4549 }
    New ctrl vector for $pmux cell $procmux$3307: { $procmux$2750_CMP $auto$opt_reduce.cc:134:opt_pmux$4553 }
    New ctrl vector for $pmux cell $procmux$2971: { $auto$opt_reduce.cc:134:opt_pmux$4555 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3747: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4557 }
    New ctrl vector for $pmux cell $procmux$2303: $auto$opt_reduce.cc:134:opt_pmux$4559
    New ctrl vector for $pmux cell $procmux$3118: { $auto$opt_reduce.cc:134:opt_pmux$4561 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3752: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4563 }
    New ctrl vector for $pmux cell $procmux$2729: { $auto$opt_reduce.cc:134:opt_pmux$4565 $procmux$2490_CMP }
    New ctrl vector for $pmux cell $procmux$3592: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4567 }
    New ctrl vector for $pmux cell $procmux$2824: { $auto$opt_reduce.cc:134:opt_pmux$4571 $auto$opt_reduce.cc:134:opt_pmux$4569 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3757: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4573 }
    New ctrl vector for $pmux cell $procmux$910: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4575 }
    New ctrl vector for $pmux cell $procmux$2803: { $auto$opt_reduce.cc:134:opt_pmux$4579 $auto$opt_reduce.cc:134:opt_pmux$4577 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3762: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4581 }
    New ctrl vector for $pmux cell $procmux$3597: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4583 }
    New ctrl vector for $pmux cell $procmux$3328: { $auto$opt_reduce.cc:134:opt_pmux$4585 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$2740: { $auto$opt_reduce.cc:134:opt_pmux$4589 $auto$opt_reduce.cc:134:opt_pmux$4587 $procmux$1101_CMP }
    New ctrl vector for $pmux cell $procmux$3767: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4591 }
    New ctrl vector for $pmux cell $procmux$3772: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4593 }
    New ctrl vector for $pmux cell $procmux$3602: { $auto$opt_reduce.cc:134:opt_pmux$4595 $procmux$1001_CMP $procmux$3558_CMP }
    New ctrl vector for $pmux cell $procmux$3139: { $auto$opt_reduce.cc:134:opt_pmux$4599 $auto$opt_reduce.cc:134:opt_pmux$4597 }
    New ctrl vector for $pmux cell $procmux$3349: { $auto$opt_reduce.cc:134:opt_pmux$4603 $auto$opt_reduce.cc:134:opt_pmux$4601 }
    New ctrl vector for $pmux cell $procmux$3777: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_pmux$4605 }
    New ctrl vector for $pmux cell $procmux$2908: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4609 $auto$opt_reduce.cc:134:opt_pmux$4607 $procmux$1101_CMP }
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
    Consolidated identical input bits for $mux cell $procmux$3816:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$procmux$3816_Y
      New ports: A=1'0, B=1'1, Y=$procmux$3816_Y [0]
      New connections: $procmux$3816_Y [15:1] = { $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] $procmux$3816_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$3863:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$109_EN[15:0]$133 [0] }
    Consolidated identical input bits for $mux cell $procmux$3866:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$108_EN[15:0]$132 [0] }
    Consolidated identical input bits for $mux cell $procmux$3869:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$107_EN[15:0]$131 [0] }
    Consolidated identical input bits for $mux cell $procmux$3872:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$106_EN[15:0]$130 [0] }
    Consolidated identical input bits for $mux cell $procmux$3875:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$105_EN[15:0]$129 [0] }
    Consolidated identical input bits for $mux cell $procmux$3878:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$104_EN[15:0]$128 [0] }
    Consolidated identical input bits for $mux cell $procmux$3881:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$103_EN[15:0]$127 [0] }
    Consolidated identical input bits for $mux cell $procmux$3884:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$102_EN[15:0]$126 [0] }
    Consolidated identical input bits for $mux cell $procmux$3887:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$101_EN[15:0]$125 [0] }
    Consolidated identical input bits for $mux cell $procmux$3890:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$100_EN[15:0]$124 [0] }
    Consolidated identical input bits for $mux cell $procmux$3893:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$99_EN[15:0]$123 [0] }
    Consolidated identical input bits for $mux cell $procmux$3896:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$98_EN[15:0]$122 [0] }
    Consolidated identical input bits for $mux cell $procmux$3899:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$97_EN[15:0]$121 [0] }
    Consolidated identical input bits for $mux cell $procmux$3902:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$96_EN[15:0]$120 [0] }
    Consolidated identical input bits for $mux cell $procmux$3905:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$95_EN[15:0]$119 [0] }
    Consolidated identical input bits for $mux cell $procmux$3908:
      Old ports: A=16'0000000000000000, B=16'1111111111111111, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118
      New ports: A=1'0, B=1'1, Y=$0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] $0$memwr$\register_file$SAYAC_TRF.v:44$94_EN[15:0]$118 [0] }
  Optimizing cells in module \TRF.
    Consolidated identical input bits for $mux cell $procmux$3842:
      Old ports: A=16'0000000000000000, B=$3$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$164, Y=$procmux$3842_Y
      New ports: A=1'0, B=$procmux$3816_Y [0], Y=$procmux$3842_Y [0]
      New connections: $procmux$3842_Y [15:1] = { $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] $procmux$3842_Y [0] }
  Optimizing cells in module \TRF.
    Consolidated identical input bits for $mux cell $procmux$3911:
      Old ports: A=$2$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$160, B=16'0000000000000000, Y=$0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136
      New ports: A=$procmux$3842_Y [0], B=1'0, Y=$0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0]
      New connections: $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [15:1] = { $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] $0$memwr$\register_file$SAYAC_TRF.v:48$110_EN[15:0]$136 [0] }
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
    New ctrl vector for $pmux cell $procmux$3930: { $procmux$3934_CMP $procmux$3933_CMP $procmux$3932_CMP $procmux$3931_CMP }
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 143 changes.

21.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
<suppressed ~9 debug messages>
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
<suppressed ~489 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
<suppressed ~45 debug messages>
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
<suppressed ~9 debug messages>
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 184 cells.

21.6.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $auto$proc_dlatch.cc:427:proc_dlatch$4067 ($dlatch) from module $paramod\booth_controller\size=s32'00000000000000000000000000010001.

21.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 2069 unused wires.
<suppressed ~7 debug messages>

21.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
<suppressed ~1 debug messages>
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.6.9. Rerunning OPT passes. (Maybe there is more to do..)

21.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

21.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
    New ctrl vector for $pmux cell $procmux$2171: { $auto$opt_reduce.cc:134:opt_pmux$4611 $auto$opt_reduce.cc:134:opt_pmux$4381 }
    New ctrl vector for $pmux cell $procmux$2185: { $auto$opt_reduce.cc:134:opt_pmux$4613 $auto$opt_reduce.cc:134:opt_pmux$4381 }
    New ctrl vector for $pmux cell $procmux$2271: { $auto$opt_reduce.cc:134:opt_pmux$4615 $auto$opt_reduce.cc:134:opt_pmux$4505 }
    New ctrl vector for $pmux cell $procmux$2283: $auto$opt_reduce.cc:134:opt_pmux$4617
    New ctrl vector for $pmux cell $procmux$2293: $auto$opt_reduce.cc:134:opt_pmux$4619
    New ctrl vector for $pmux cell $procmux$3454: { $auto$opt_reduce.cc:134:opt_pmux$4621 $auto$opt_reduce.cc:134:opt_pmux$4543 }
    New ctrl vector for $pmux cell $procmux$520: { $procmux$2421_CMP $auto$opt_reduce.cc:134:opt_pmux$4623 }
    New ctrl vector for $pmux cell $procmux$788: $auto$opt_reduce.cc:134:opt_pmux$4625
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 8 changes.

21.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
<suppressed ~21 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 7 cells.

21.6.13. Executing OPT_DFF pass (perform DFF optimizations).

21.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

21.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.6.16. Rerunning OPT passes. (Maybe there is more to do..)

21.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

21.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.6.20. Executing OPT_DFF pass (perform DFF optimizations).

21.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.6.23. Finished OPT passes. (There is nothing left to do.)

21.7. Executing FSM pass (extract and optimize FSM).

21.7.1. Executing FSM_DETECT pass (finding FSMs in design).

21.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

21.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

21.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

21.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

21.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

21.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

21.8. Executing OPT pass (performing simple optimizations).

21.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

21.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$4309 ($adff) from module $paramod\Counter\N=s32'00000000000000000000000000000101 (D = $0\dataOut[4:0], Q = \dataOut).
Adding EN signal on $procdff$4284 ($adff) from module $paramod\REG\N=s32'00000000000000000000000000010000 (D = \inREG, Q = \outREG).
Adding EN signal on $procdff$4314 ($adff) from module $paramod\REG\N=s32'00000000000000000000000000010001 (D = \inREG, Q = \outREG).
Adding EN signal on $procdff$4283 ($adff) from module $paramod\booth_controller\size=s32'00000000000000000000000000010001 (D = $add$SAYAC_MDU.v:116$217_Y [5:0], Q = \count).
Adding EN signal on $procdff$4312 ($dff) from module $paramod\shift_register\size=s32'00000000000000000000000000010010 (D = $2\Rreg[17:0] [0], Q = \seoR).
Adding EN signal on $procdff$4286 ($adff) from module DFF_E (D = \in, Q = \out).
Adding EN signal on $procdff$4308 ($adff) from module shiftReg_17b (D = $0\dataOut[16:0], Q = \dataOut).

21.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 6 unused cells and 6 unused wires.
<suppressed ~11 debug messages>

21.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
<suppressed ~1 debug messages>
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.
<suppressed ~1 debug messages>

21.8.9. Rerunning OPT passes. (Maybe there is more to do..)

21.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

21.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.8.13. Executing OPT_DFF pass (perform DFF optimizations).

21.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.8.16. Finished OPT passes. (There is nothing left to do.)

21.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell $paramod\Counter\N=s32'00000000000000000000000000000101.$add$SAYAC_counter.v:33$234 ($add).
Removed top 27 bits (of 32) from port Y of cell $paramod\Counter\N=s32'00000000000000000000000000000101.$add$SAYAC_counter.v:33$234 ($add).
Removed top 27 bits (of 32) from wire $paramod\Counter\N=s32'00000000000000000000000000000101.$add$SAYAC_counter.v:33$234_Y.
Removed top 2 bits (of 3) from mux cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$procmux$264 ($mux).
Removed top 2 bits (of 3) from port B of cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$procmux$273_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$procmux$272_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$procmux$271_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$add$SAYAC_MDU.v:116$217 ($add).
Removed top 26 bits (of 32) from port Y of cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$add$SAYAC_MDU.v:116$217 ($add).
Removed top 1 bits (of 2) from port B of cell $paramod\booth_controller\size=s32'00000000000000000000000000010001.$eq$SAYAC_MDU.v:140$223 ($eq).
Removed top 2 bits (of 3) from wire $paramod\booth_controller\size=s32'00000000000000000000000000010001.$2\next_state[2:0].
Removed top 26 bits (of 32) from wire $paramod\booth_controller\size=s32'00000000000000000000000000010001.$add$SAYAC_MDU.v:116$217_Y.
Removed top 31 bits (of 32) from mux cell CMP.$ternary$SAYAC_CMP.v:8$60 ($mux).
Removed top 31 bits (of 32) from mux cell CMP.$ternary$SAYAC_CMP.v:9$62 ($mux).
Removed top 31 bits (of 32) from mux cell CMP.$ternary$SAYAC_CMP.v:10$64 ($mux).
Removed top 1 bits (of 2) from mux cell Controller.$procmux$543 ($mux).
Removed top 1 bits (of 2) from port B of cell Controller.$procmux$1018_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Controller.$procmux$1154_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Controller.$procmux$1294_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Controller.$procmux$1371_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Controller.$procmux$1452_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell Controller.$procmux$1718_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell Controller.$procmux$2162_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Controller.$procmux$2421_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell Controller.$procmux$2492_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$2749_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$2750_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$2751_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$2752_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Controller.$procmux$2753_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell Controller.$procmux$2755_CMP0 ($eq).
Removed top 1 bits (of 2) from wire Controller.$2\nstate[1:0].
Removed top 3 bits (of 4) from port B of cell Datapath.$add$SAYAC_datapath.v:100$168 ($add).
Removed top 2 bits (of 8) from wire Datapath.inFlag.
Removed top 15 bits (of 16) from port B of cell LLU.$add$SAYAC_LLU.v:36$73 ($add).
Removed top 15 bits (of 16) from mux cell MDU.$ternary$SAYAC_MDU.v:45$19 ($mux).
Removed top 15 bits (of 16) from mux cell MDU.$ternary$SAYAC_MDU.v:44$21 ($mux).
Removed top 15 bits (of 16) from mux cell MDU.$ternary$SAYAC_MDU.v:49$23 ($mux).
Removed top 15 bits (of 16) from mux cell MDU.$ternary$SAYAC_MDU.v:48$25 ($mux).
Removed top 15 bits (of 16) from wire MDU.$ternary$SAYAC_MDU.v:45$19_Y.
Removed top 2 bits (of 3) from port B of cell SHU.$eq$SAYAC_SHU.v:36$77 ($eq).
Removed top 1 bits (of 3) from port B of cell SHU.$eq$SAYAC_SHU.v:37$79 ($eq).
Removed top 4 bits (of 5) from port B of cell SHU.$add$SAYAC_SHU.v:39$87 ($add).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4315 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4316 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4317 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4318 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4319 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4320 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4321 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4322 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4323 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4324 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4325 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4326 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4327 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4328 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4329 (register_file).
Removed top 27 address bits (of 32) from memory init port TRF.$auto$proc_memwr.cc:45:proc_memwr$4330 (register_file).
Removed top 2 bits (of 3) from mux cell divider_CU.$ternary$SAYAC_MDU.v:288$41 ($mux).
Removed top 1 bits (of 3) from port B of cell divider_CU.$procmux$3932_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell divider_CU.$procmux$3933_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell divider_CU.$procmux$3934_CMP0 ($eq).
Removed top 2 bits (of 3) from wire divider_CU.$ternary$SAYAC_MDU.v:288$41_Y.
Removed top 7 bits (of 8) from port B of cell mux8to1.$procmux$3921_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell mux8to1.$procmux$3922_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell mux8to1.$procmux$3923_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell mux8to1.$procmux$3924_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell mux8to1.$procmux$3925_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell mux8to1.$procmux$3926_CMP0 ($eq).
Removed top 1 bits (of 8) from port B of cell mux8to1.$procmux$3927_CMP0 ($eq).

21.10. Executing PEEPOPT pass (run peephole optimizers).

21.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 12 unused wires.
<suppressed ~7 debug messages>

21.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\Counter\N=s32'00000000000000000000000000000101:
  creating $macc model for $add$SAYAC_counter.v:33$234 ($add).
  creating $alu model for $macc $add$SAYAC_counter.v:33$234.
  creating $alu cell for $add$SAYAC_counter.v:33$234: $auto$alumacc.cc:485:replace_alu$4648
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\REG\N=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\REG\N=s32'00000000000000000000000000010001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\adder1\size=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\adder\size=s32'00000000000000000000000000010000:
  creating $macc model for $add$SAYAC_adder.v:29$238 ($add).
  creating $macc model for $add$SAYAC_adder.v:29$239 ($add).
  merging $macc model for $add$SAYAC_adder.v:29$238 into $add$SAYAC_adder.v:29$239.
  creating $alu model for $macc $add$SAYAC_adder.v:29$239.
  creating $alu cell for $add$SAYAC_adder.v:29$239: $auto$alumacc.cc:485:replace_alu$4651
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\adder\size=s32'00000000000000000000000000010001:
  creating $macc model for $add$SAYAC_adder.v:29$249 ($add).
  creating $macc model for $add$SAYAC_adder.v:29$250 ($add).
  merging $macc model for $add$SAYAC_adder.v:29$249 into $add$SAYAC_adder.v:29$250.
  creating $alu model for $macc $add$SAYAC_adder.v:29$250.
  creating $alu cell for $add$SAYAC_adder.v:29$250: $auto$alumacc.cc:485:replace_alu$4654
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\booth\size=s32'00000000000000000000000000010001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001:
  creating $macc model for $add$SAYAC_MDU.v:116$217 ($add).
  creating $alu model for $macc $add$SAYAC_MDU.v:116$217.
  creating $alu cell for $add$SAYAC_MDU.v:116$217: $auto$alumacc.cc:485:replace_alu$4657
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ASU:
  creating $macc model for $neg$SAYAC_ASU.v:28$52 ($neg).
  creating $alu model for $macc $neg$SAYAC_ASU.v:28$52.
  creating $alu cell for $neg$SAYAC_ASU.v:28$52: $auto$alumacc.cc:485:replace_alu$4660
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module CMP:
  creating $alu model for $gt$SAYAC_CMP.v:10$63 ($gt): new $alu
  creating $alu model for $lt$SAYAC_CMP.v:8$59 ($lt): merged with $gt$SAYAC_CMP.v:10$63.
  creating $alu model for $eq$SAYAC_CMP.v:9$61 ($eq): merged with $gt$SAYAC_CMP.v:10$63.
  creating $alu cell for $gt$SAYAC_CMP.v:10$63, $lt$SAYAC_CMP.v:8$59, $eq$SAYAC_CMP.v:9$61: $auto$alumacc.cc:485:replace_alu$4664
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module DFF_E:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Datapath:
  creating $macc model for $add$SAYAC_datapath.v:100$168 ($add).
  creating $alu model for $macc $add$SAYAC_datapath.v:100$168.
  creating $alu cell for $add$SAYAC_datapath.v:100$168: $auto$alumacc.cc:485:replace_alu$4675
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module FA:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module IMM:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module LLU:
  creating $macc model for $add$SAYAC_LLU.v:36$73 ($add).
  creating $alu model for $macc $add$SAYAC_LLU.v:36$73.
  creating $alu cell for $add$SAYAC_LLU.v:36$73: $auto$alumacc.cc:485:replace_alu$4678
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module MDU:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module SAYAC:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module SHU:
  creating $macc model for $add$SAYAC_SHU.v:39$87 ($add).
  creating $alu model for $macc $add$SAYAC_SHU.v:39$87.
  creating $alu cell for $add$SAYAC_SHU.v:39$87: $auto$alumacc.cc:485:replace_alu$4681
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module TRF:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module divider:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module divider_CU:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module divider_DP:
  creating $macc model for $sub$SAYAC_MDU.v:325$45 ($sub).
  creating $alu model for $macc $sub$SAYAC_MDU.v:325$45.
  creating $alu cell for $sub$SAYAC_MDU.v:325$45: $auto$alumacc.cc:485:replace_alu$4684
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux8to1:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module shiftReg_17b:
  created 0 $alu and 0 $macc cells.

21.13. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module SHU that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$SAYAC_SHU.v:36$78 ($sshr):
    Found 1 activation_patterns using ctrl signal $eq$SAYAC_SHU.v:36$77_Y.
    No candidates found.
  Analyzing resource sharing options for $sshl$SAYAC_SHU.v:38$84 ($sshl):
    Found 1 activation_patterns using ctrl signal { $eq$SAYAC_SHU.v:38$81_Y $eq$SAYAC_SHU.v:37$79_Y $eq$SAYAC_SHU.v:36$77_Y }.
    No candidates found.
  Analyzing resource sharing options for $shr$SAYAC_SHU.v:37$80 ($shr):
    Found 1 activation_patterns using ctrl signal { $eq$SAYAC_SHU.v:37$79_Y $eq$SAYAC_SHU.v:36$77_Y }.
    No candidates found.
  Analyzing resource sharing options for $shl$SAYAC_SHU.v:39$88 ($shl):
    Found 1 activation_patterns using ctrl signal { $eq$SAYAC_SHU.v:39$85_Y $eq$SAYAC_SHU.v:38$81_Y $eq$SAYAC_SHU.v:37$79_Y $eq$SAYAC_SHU.v:36$77_Y }.
    No candidates found.
Found 2 cells in module TRF that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\register_file$SAYAC_TRF.v:36$115 ($memrd):
    Found 1 activation_patterns using ctrl signal $eq$SAYAC_TRF.v:36$114_Y.
    Found 1 candidates: $memrd$\register_file$SAYAC_TRF.v:35$112
    Analyzing resource sharing with $memrd$\register_file$SAYAC_TRF.v:35$112 ($memrd):
      Found 1 activation_patterns using ctrl signal $eq$SAYAC_TRF.v:35$111_Y.
      Activation pattern for cell $memrd$\register_file$SAYAC_TRF.v:36$115: $eq$SAYAC_TRF.v:36$114_Y = 1'0
      Activation pattern for cell $memrd$\register_file$SAYAC_TRF.v:35$112: $eq$SAYAC_TRF.v:35$111_Y = 1'0
      Size of SAT problem: 0 cells, 25 variables, 49 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $eq$SAYAC_TRF.v:36$114_Y $eq$SAYAC_TRF.v:35$111_Y } = 2'00
  Analyzing resource sharing options for $memrd$\register_file$SAYAC_TRF.v:35$112 ($memrd):
    Found 1 activation_patterns using ctrl signal $eq$SAYAC_TRF.v:35$111_Y.
    No candidates found.

21.14. Executing OPT pass (performing simple optimizations).

21.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
<suppressed ~2 debug messages>
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

21.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.14.6. Executing OPT_DFF pass (perform DFF optimizations).

21.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 3 unused cells and 6 unused wires.
<suppressed ~6 debug messages>

21.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.14.9. Rerunning OPT passes. (Maybe there is more to do..)

21.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

21.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.14.13. Executing OPT_DFF pass (perform DFF optimizations).

21.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.14.16. Finished OPT passes. (There is nothing left to do.)

21.15. Executing MEMORY pass.

21.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

21.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 120 transformations.

21.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing TRF.register_file write port 0.
  Analyzing TRF.register_file write port 1.
  Analyzing TRF.register_file write port 2.
  Analyzing TRF.register_file write port 3.
  Analyzing TRF.register_file write port 4.
  Analyzing TRF.register_file write port 5.
  Analyzing TRF.register_file write port 6.
  Analyzing TRF.register_file write port 7.
  Analyzing TRF.register_file write port 8.
  Analyzing TRF.register_file write port 9.
  Analyzing TRF.register_file write port 10.
  Analyzing TRF.register_file write port 11.
  Analyzing TRF.register_file write port 12.
  Analyzing TRF.register_file write port 13.
  Analyzing TRF.register_file write port 14.
  Analyzing TRF.register_file write port 15.
  Analyzing TRF.register_file write port 16.

21.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

21.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\register_file'[0] in module `\TRF': no output FF found.
Checking read port `\register_file'[1] in module `\TRF': no output FF found.
Checking read port address `\register_file'[0] in module `\TRF': no address FF found.
Checking read port address `\register_file'[1] in module `\TRF': no address FF found.

21.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory TRF.register_file by address:
Consolidating write ports of memory TRF.register_file by address:
  Merging ports 0, 1 (address 5'00000).
  Merging ports 0, 2 (address 5'00000).
  Merging ports 0, 3 (address 5'00000).
  Merging ports 0, 4 (address 5'00000).
  Merging ports 0, 5 (address 5'00000).
  Merging ports 0, 6 (address 5'00000).
  Merging ports 0, 7 (address 5'00000).
  Merging ports 0, 8 (address 5'00000).
  Merging ports 0, 9 (address 5'00000).
  Merging ports 0, 10 (address 5'00000).
  Merging ports 0, 11 (address 5'00000).
  Merging ports 0, 12 (address 5'00000).
  Merging ports 0, 13 (address 5'00000).
  Merging ports 0, 14 (address 5'00000).
  Merging ports 0, 15 (address 5'00000).
Consolidating write ports of memory TRF.register_file by address:
Consolidating write ports of memory TRF.register_file using sat-based resource sharing:

21.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

21.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

21.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.17. Executing OPT pass (performing simple optimizations).

21.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
<suppressed ~1 debug messages>
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
<suppressed ~12 debug messages>
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
<suppressed ~3 debug messages>
Optimizing module Controller.
<suppressed ~173 debug messages>
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
<suppressed ~2 debug messages>
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
<suppressed ~9 debug messages>
Optimizing module divider.
Optimizing module divider_CU.
<suppressed ~10 debug messages>
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.
<suppressed ~1 debug messages>

21.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Controller'.
<suppressed ~3 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 2 cells.

21.17.3. Executing OPT_DFF pass (perform DFF optimizations).

21.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 13 unused cells and 64 unused wires.
<suppressed ~20 debug messages>

21.17.5. Finished fast OPT passes.

21.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \register_file in module \TRF:
  created 32 $dff cells and 0 static cells of width 16.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 64 write mux blocks.

21.19. Executing OPT pass (performing simple optimizations).

21.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
<suppressed ~116 debug messages>
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][15]$4938.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][15]$4938.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][14]$4935.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][14]$4935.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][13]$4932.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][13]$4932.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][12]$4929.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][12]$4929.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][11]$4926.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][11]$4926.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][10]$4923.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][10]$4923.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][9]$4920.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][9]$4920.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][4][8]$4917.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][4][8]$4917.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][3][7]$4890.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][3][7]$4890.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][3][6]$4887.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][3][6]$4887.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][3][5]$4884.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][3][5]$4884.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][3][4]$4881.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][3][4]$4881.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][2][3]$4866.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][2][3]$4866.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][2][2]$4863.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][2][2]$4863.
    dead port 1/2 on $mux $memory\register_file$rdmux[1][1][1]$4854.
    dead port 2/2 on $mux $memory\register_file$rdmux[1][1][1]$4854.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][15]$4845.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][15]$4845.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][14]$4842.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][14]$4842.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][13]$4839.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][13]$4839.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][12]$4836.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][12]$4836.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][11]$4833.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][11]$4833.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][10]$4830.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][10]$4830.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][9]$4827.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][9]$4827.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][4][8]$4824.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][4][8]$4824.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][3][7]$4797.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][3][7]$4797.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][3][6]$4794.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][3][6]$4794.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][3][5]$4791.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][3][5]$4791.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][3][4]$4788.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][3][4]$4788.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][2][3]$4773.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][2][3]$4773.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][2][2]$4770.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][2][2]$4770.
    dead port 1/2 on $mux $memory\register_file$rdmux[0][1][1]$4761.
    dead port 2/2 on $mux $memory\register_file$rdmux[0][1][1]$4761.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 60 multiplexer ports.
<suppressed ~99 debug messages>

21.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
    Consolidated identical input bits for $mux cell $procmux$254:
      Old ports: A=3'010, B=3'100, Y=$3\next_state[2:0]
      New ports: A=2'01, B=2'10, Y=$3\next_state[2:0] [2:1]
      New connections: $3\next_state[2:0] [0] = 1'0
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
    Consolidated identical input bits for $mux cell $ternary$SAYAC_MDU.v:222$226:
      Old ports: A={ \Pout [16] \Pout [16:1] }, B={ \result [16] \result [16:1] }, Y=\Pin
      New ports: A=\Pout [16:1], B=\result [16:1], Y=\Pin [15:0]
      New connections: \Pin [16] = \Pin [15]
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
    Consolidated identical input bits for $mux cell $procmux$406:
      Old ports: A=2'10, B=2'00, Y=$12\nstate[1:0]
      New ports: A=1'1, B=1'0, Y=$12\nstate[1:0] [1]
      New connections: $12\nstate[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$509:
      Old ports: A=2'10, B=2'00, Y=$4\nstate[1:0]
      New ports: A=1'1, B=1'0, Y=$4\nstate[1:0] [1]
      New connections: $4\nstate[1:0] [0] = 1'0
  Optimizing cells in module \Controller.
    Consolidated identical input bits for $mux cell $procmux$391:
      Old ports: A=$12\nstate[1:0], B=2'00, Y=$10\nstate[1:0]
      New ports: A=$12\nstate[1:0] [1], B=1'0, Y=$10\nstate[1:0] [1]
      New connections: $10\nstate[1:0] [0] = 1'0
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
    Consolidated identical input bits for $mux cell $procmux$3939:
      Old ports: A=6'111111, B=6'001111, Y={ $2\setR[0:0] $2\Q0[0:0] $2\setQ0[0:0] $2\load_R[0:0] $2\load_Q[0:0] $2\incCnt[0:0] }
      New ports: A=1'1, B=1'0, Y=$2\Q0[0:0]
      New connections: { $2\setR[0:0] $2\setQ0[0:0] $2\load_R[0:0] $2\load_Q[0:0] $2\incCnt[0:0] } = { $2\Q0[0:0] 4'1111 }
    Consolidated identical input bits for $mux cell $ternary$SAYAC_MDU.v:291$42:
      Old ports: A=3'010, B=3'100, Y=$ternary$SAYAC_MDU.v:291$42_Y
      New ports: A=2'01, B=2'10, Y=$ternary$SAYAC_MDU.v:291$42_Y [2:1]
      New connections: $ternary$SAYAC_MDU.v:291$42_Y [0] = 1'0
  Optimizing cells in module \divider_CU.
    New ctrl vector for $pmux cell $procmux$3981: $auto$opt_reduce.cc:134:opt_pmux$5314
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 8 changes.

21.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
<suppressed ~9 debug messages>
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 3 cells.

21.19.6. Executing OPT_SHARE pass.

21.19.7. Executing OPT_DFF pass (perform DFF optimizations).

21.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 16 unused cells and 259 unused wires.
<suppressed ~34 debug messages>

21.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
<suppressed ~2 debug messages>
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
<suppressed ~3 debug messages>
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.19.10. Rerunning OPT passes. (Maybe there is more to do..)

21.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~97 debug messages>

21.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
<suppressed ~3 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 1 cells.

21.19.14. Executing OPT_SHARE pass.

21.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\register_file[9]$4709 ($dff) from module TRF (D = $memory\register_file$wrmux[9][1][0]$y$5076, Q = \register_file[9]).
Adding EN signal on $memory\register_file[8]$4707 ($dff) from module TRF (D = $memory\register_file$wrmux[8][1][0]$y$5066, Q = \register_file[8]).
Adding EN signal on $memory\register_file[7]$4705 ($dff) from module TRF (D = $memory\register_file$wrmux[7][1][0]$y$5050, Q = \register_file[7]).
Adding EN signal on $memory\register_file[6]$4703 ($dff) from module TRF (D = $memory\register_file$wrmux[6][1][0]$y$5040, Q = \register_file[6]).
Adding EN signal on $memory\register_file[5]$4701 ($dff) from module TRF (D = $memory\register_file$wrmux[5][1][0]$y$5030, Q = \register_file[5]).
Adding EN signal on $memory\register_file[4]$4699 ($dff) from module TRF (D = $memory\register_file$wrmux[4][1][0]$y$5020, Q = \register_file[4]).
Adding EN signal on $memory\register_file[3]$4697 ($dff) from module TRF (D = $memory\register_file$wrmux[3][1][0]$y$5006, Q = \register_file[3]).
Adding EN signal on $memory\register_file[2]$4695 ($dff) from module TRF (D = $memory\register_file$wrmux[2][1][0]$y$4994, Q = \register_file[2]).
Adding EN signal on $memory\register_file[1]$4693 ($dff) from module TRF (D = $memory\register_file$wrmux[1][1][0]$y$4980, Q = \register_file[1]).
Adding EN signal on $memory\register_file[15]$4721 ($dff) from module TRF (D = $memory\register_file$wrmux[15][1][0]$y$5138, Q = \register_file[15]).
Adding EN signal on $memory\register_file[14]$4719 ($dff) from module TRF (D = $memory\register_file$wrmux[14][1][0]$y$5128, Q = \register_file[14]).
Adding EN signal on $memory\register_file[13]$4717 ($dff) from module TRF (D = $memory\register_file$wrmux[13][1][0]$y$5118, Q = \register_file[13]).
Adding EN signal on $memory\register_file[12]$4715 ($dff) from module TRF (D = $memory\register_file$wrmux[12][1][0]$y$5108, Q = \register_file[12]).
Adding EN signal on $memory\register_file[11]$4713 ($dff) from module TRF (D = $memory\register_file$wrmux[11][1][0]$y$5096, Q = \register_file[11]).
Adding EN signal on $memory\register_file[10]$4711 ($dff) from module TRF (D = $memory\register_file$wrmux[10][1][0]$y$5086, Q = \register_file[10]).
Adding EN signal on $memory\register_file[0]$4691 ($dff) from module TRF (D = $memory\register_file$wrmux[0][1][0]$y$4966, Q = \register_file[0]).

21.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

21.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
<suppressed ~32 debug messages>
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.19.18. Rerunning OPT passes. (Maybe there is more to do..)

21.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~97 debug messages>

21.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.19.22. Executing OPT_SHARE pass.

21.19.23. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$5342 ($dffe) from module TRF (D = \write_data, Q = \register_file[15], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5339 ($dffe) from module TRF (D = \write_data, Q = \register_file[1], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5336 ($dffe) from module TRF (D = \write_data, Q = \register_file[2], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5333 ($dffe) from module TRF (D = \write_data, Q = \register_file[3], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5330 ($dffe) from module TRF (D = \write_data, Q = \register_file[4], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5324 ($dffe) from module TRF (D = \write_data, Q = \register_file[6], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5321 ($dffe) from module TRF (D = \write_data, Q = \register_file[7], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5318 ($dffe) from module TRF (D = \write_data, Q = \register_file[8], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5315 ($dffe) from module TRF (D = \write_data, Q = \register_file[9], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5360 ($dffe) from module TRF (D = \write_data, Q = \register_file[0], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5357 ($dffe) from module TRF (D = \write_data, Q = \register_file[10], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5354 ($dffe) from module TRF (D = \write_data, Q = \register_file[11], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5351 ($dffe) from module TRF (D = \write_data, Q = \register_file[12], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5348 ($dffe) from module TRF (D = \write_data, Q = \register_file[13], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5345 ($dffe) from module TRF (D = \write_data, Q = \register_file[14], rval = 16'0000000000000000).
Adding SRST signal on $auto$ff.cc:266:slice$5327 ($dffe) from module TRF (D = \write_data, Q = \register_file[5], rval = 16'0000000000000000).

21.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 16 unused cells and 32 unused wires.
<suppressed ~17 debug messages>

21.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.19.26. Rerunning OPT passes. (Maybe there is more to do..)

21.19.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~81 debug messages>

21.19.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

21.19.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

21.19.30. Executing OPT_SHARE pass.

21.19.31. Executing OPT_DFF pass (perform DFF optimizations).

21.19.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

21.19.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.19.34. Finished OPT passes. (There is nothing left to do.)

21.20. Executing TECHMAP pass (map to technology primitives).

21.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

21.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$0b42e0ef0120c44ea9490666611378bfd171ba8c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod$3bb72ad0665cdca279bbc49ed6a39f403f16497f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$9b852deea27f920d0ebf23d70321fa499ec0b8be\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$f32fe74d2f8ab5a9d1f90720afb1f17fabd90573\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$eb08e540340b5e2a31fef352577f85f4331850f3\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshl.
Using template $paramod$constmap:c90332f5a09302dfebb82e80baaa2c41fcb33085$paramod$7354c247b305eda7a69b0d7d9e3b06c015b65190\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod$2af30114e9bd4ccb04dad757b3f0a8f6bf0615b0\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$02488ff6fa51b28bbfa470bdd9b0e548b3357746\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod$4ce4a1faeffe5690bb1819c6520eb4b4e75ebebd\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010010 for cells of type $lcu.
Using template $paramod$081ba1a4a7201ecdb44563d3c3bd7013d1ebf4eb\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~3340 debug messages>

21.21. Executing OPT pass (performing simple optimizations).

21.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
<suppressed ~25 debug messages>
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
<suppressed ~24 debug messages>
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
<suppressed ~28 debug messages>
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
<suppressed ~84 debug messages>
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
<suppressed ~90 debug messages>
Optimizing module CMP.
<suppressed ~19 debug messages>
Optimizing module Controller.
<suppressed ~179 debug messages>
Optimizing module DFF_E.
Optimizing module Datapath.
<suppressed ~21 debug messages>
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
<suppressed ~106 debug messages>
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
<suppressed ~107 debug messages>
Optimizing module TRF.
<suppressed ~32 debug messages>
Optimizing module divider.
Optimizing module divider_CU.
<suppressed ~35 debug messages>
Optimizing module divider_DP.
<suppressed ~20 debug messages>
Optimizing module mux8to1.
<suppressed ~64 debug messages>
Optimizing module shiftReg_17b.

21.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
<suppressed ~15 debug messages>
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
<suppressed ~24 debug messages>
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
<suppressed ~33 debug messages>
Finding identical cells in module `\Controller'.
<suppressed ~975 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
<suppressed ~3 debug messages>
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
<suppressed ~498 debug messages>
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
<suppressed ~12 debug messages>
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
<suppressed ~78 debug messages>
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 546 cells.

21.21.3. Executing OPT_DFF pass (perform DFF optimizations).

21.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 104 unused cells and 1343 unused wires.
<suppressed ~120 debug messages>

21.21.5. Finished fast OPT passes.

21.22. Executing ABC pass (technology mapping using ABC).

21.22.1. Extracting gate netlist of module `$paramod\Counter\N=s32'00000000000000000000000000000101' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 28 wires to a netlist network with 12 inputs and 7 outputs.

21.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:        2
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               MUX cells:        5
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        7
Removing temp directory.

21.22.2. Extracting gate netlist of module `$paramod\REG\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.3. Extracting gate netlist of module `$paramod\REG\N=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.4. Extracting gate netlist of module `$paramod\adder1\size=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.5. Extracting gate netlist of module `$paramod\adder\size=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 113 gates and 146 wires to a netlist network with 33 inputs and 17 outputs.

21.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.5.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       20
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               XOR cells:       12
ABC RESULTS:               AND cells:        8
ABC RESULTS:               NOR cells:       17
ABC RESULTS:            ANDNOT cells:       23
ABC RESULTS:                OR cells:       24
ABC RESULTS:        internal signals:       96
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       17
Removing temp directory.

21.22.6. Extracting gate netlist of module `$paramod\adder\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 118 gates and 153 wires to a netlist network with 35 inputs and 18 outputs.

21.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.6.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:       21
ABC RESULTS:              NAND cells:        9
ABC RESULTS:            ANDNOT cells:       27
ABC RESULTS:               XOR cells:       13
ABC RESULTS:               AND cells:        8
ABC RESULTS:               NOR cells:       18
ABC RESULTS:                OR cells:       21
ABC RESULTS:        internal signals:      100
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       18
Removing temp directory.

21.22.7. Extracting gate netlist of module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 52 wires to a netlist network with 18 inputs and 17 outputs.

21.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.7.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:       17
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       17
Removing temp directory.

21.22.8. Extracting gate netlist of module `$paramod\booth\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.9. Extracting gate netlist of module `$paramod\booth_controller\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 58 gates and 71 wires to a netlist network with 12 inputs and 17 outputs.

21.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               MUX cells:        2
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:                OR cells:        7
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               AND cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       17
Removing temp directory.

21.22.10. Extracting gate netlist of module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 52 wires to a netlist network with 35 inputs and 17 outputs.

21.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.10.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       17
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       17
Removing temp directory.

21.22.11. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 19 wires to a netlist network with 10 inputs and 4 outputs.

21.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.11.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:               MUX cells:        4
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        4
Removing temp directory.

21.22.12. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000000101' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 23 wires to a netlist network with 12 inputs and 5 outputs.

21.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.12.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:               MUX cells:        5
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        5
Removing temp directory.

21.22.13. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 67 wires to a netlist network with 34 inputs and 16 outputs.

21.22.13.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.13.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

21.22.14. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 71 wires to a netlist network with 36 inputs and 17 outputs.

21.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.14.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:               MUX cells:       17
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       17
Removing temp directory.

21.22.15. Extracting gate netlist of module `$paramod\mux3to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 100 wires to a netlist network with 51 inputs and 16 outputs.

21.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       16
Removing temp directory.

21.22.16. Extracting gate netlist of module `$paramod\shift_register\size=s32'00000000000000000000000000010010' to `<abc-temp-dir>/input.blif'..
Extracted 38 gates and 78 wires to a netlist network with 40 inputs and 20 outputs.

21.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.16.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:       36
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:       40
ABC RESULTS:          output signals:       20
Removing temp directory.

21.22.17. Extracting gate netlist of module `\ASU' to `<abc-temp-dir>/input.blif'..
Extracted 85 gates and 136 wires to a netlist network with 50 inputs and 31 outputs.

21.22.17.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.17.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:                OR cells:       22
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       31
Removing temp directory.

21.22.18. Extracting gate netlist of module `\CMP' to `<abc-temp-dir>/input.blif'..
Extracted 97 gates and 129 wires to a netlist network with 32 inputs and 3 outputs.

21.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.18.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        6
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               AND cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:                OR cells:        4
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:        internal signals:       94
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        3
Removing temp directory.

21.22.19. Extracting gate netlist of module `\Controller' to `<abc-temp-dir>/input.blif'..
Extracted 505 gates and 526 wires to a netlist network with 19 inputs and 51 outputs.

21.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.19.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       17
ABC RESULTS:             ORNOT cells:       26
ABC RESULTS:               MUX cells:       23
ABC RESULTS:               AND cells:       16
ABC RESULTS:                OR cells:      148
ABC RESULTS:              NAND cells:       21
ABC RESULTS:            ANDNOT cells:      144
ABC RESULTS:               NOR cells:       28
ABC RESULTS:        internal signals:      456
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       51
Removing temp directory.

21.22.20. Extracting gate netlist of module `\DFF_E' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.21. Extracting gate netlist of module `\Datapath' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

21.22.21.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.21.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

21.22.22. Extracting gate netlist of module `\FA' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 2 outputs.

21.22.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.22.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

21.22.23. Extracting gate netlist of module `\IMM' to `<abc-temp-dir>/input.blif'..
Extracted 80 gates and 102 wires to a netlist network with 21 inputs and 16 outputs.

21.22.23.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.23.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:               MUX cells:       56
ABC RESULTS:        internal signals:       65
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

21.22.24. Extracting gate netlist of module `\LLU' to `<abc-temp-dir>/input.blif'..
Extracted 117 gates and 153 wires to a netlist network with 35 inputs and 16 outputs.

21.22.24.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.24.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:                OR cells:       15
ABC RESULTS:               NOT cells:       17
ABC RESULTS:               XOR cells:       14
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:               AND cells:       17
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:      102
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

21.22.25. Extracting gate netlist of module `\MDU' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 139 wires to a netlist network with 70 inputs and 34 outputs.

21.22.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.25.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       34
ABC RESULTS:               MUX cells:       34
ABC RESULTS:        internal signals:       35
ABC RESULTS:           input signals:       70
ABC RESULTS:          output signals:       34
Removing temp directory.

21.22.26. Extracting gate netlist of module `\SAYAC' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.27. Extracting gate netlist of module `\SHU' to `<abc-temp-dir>/input.blif'..
Extracted 245 gates and 269 wires to a netlist network with 23 inputs and 16 outputs.

21.22.27.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.27.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:        1
ABC RESULTS:               XOR cells:        5
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:               NOR cells:        8
ABC RESULTS:              NAND cells:       13
ABC RESULTS:            ANDNOT cells:       46
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:      146
ABC RESULTS:        internal signals:      230
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:       16
Removing temp directory.

21.22.28. Extracting gate netlist of module `\TRF' to `<abc-temp-dir>/input.blif'..
Extracted 583 gates and 854 wires to a netlist network with 270 inputs and 64 outputs.

21.22.28.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.28.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOT cells:        6
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:       31
ABC RESULTS:               MUX cells:      480
ABC RESULTS:            ANDNOT cells:       52
ABC RESULTS:        internal signals:      520
ABC RESULTS:           input signals:      270
ABC RESULTS:          output signals:       64
Removing temp directory.

21.22.29. Extracting gate netlist of module `\divider' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

21.22.30. Extracting gate netlist of module `\divider_CU' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 41 wires to a netlist network with 6 inputs and 11 outputs.

21.22.30.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.30.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:       11
Removing temp directory.

21.22.31. Extracting gate netlist of module `\divider_DP' to `<abc-temp-dir>/input.blif'..
Extracted 133 gates and 169 wires to a netlist network with 36 inputs and 19 outputs.

21.22.31.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.31.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:               NOR cells:       15
ABC RESULTS:                OR cells:       21
ABC RESULTS:            ANDNOT cells:       33
ABC RESULTS:               XOR cells:       28
ABC RESULTS:        internal signals:      114
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       19
Removing temp directory.

21.22.32. Extracting gate netlist of module `\mux8to1' to `<abc-temp-dir>/input.blif'..
Extracted 309 gates and 446 wires to a netlist network with 136 inputs and 16 outputs.

21.22.32.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.32.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:       23
ABC RESULTS:                OR cells:       92
ABC RESULTS:            ANDNOT cells:      173
ABC RESULTS:        internal signals:      294
ABC RESULTS:           input signals:      136
ABC RESULTS:          output signals:       16
Removing temp directory.

21.22.33. Extracting gate netlist of module `\shiftReg_17b' to `<abc-temp-dir>/input.blif'..
Extracted 36 gates and 74 wires to a netlist network with 37 inputs and 18 outputs.

21.22.33.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.22.33.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        2
ABC RESULTS:               MUX cells:       17
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:        internal signals:       19
ABC RESULTS:           input signals:       37
ABC RESULTS:          output signals:       18
Removing temp directory.

21.23. Executing OPT pass (performing simple optimizations).

21.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
<suppressed ~6 debug messages>
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
<suppressed ~17 debug messages>
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
<suppressed ~9 debug messages>
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
<suppressed ~16 debug messages>
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
<suppressed ~34 debug messages>
Optimizing module TRF.
<suppressed ~224 debug messages>
Optimizing module divider.
Optimizing module divider_CU.
<suppressed ~1 debug messages>
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

21.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
<suppressed ~24 debug messages>
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 8 cells.

21.23.3. Executing OPT_DFF pass (perform DFF optimizations).

21.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 10 unused cells and 2387 unused wires.
<suppressed ~38 debug messages>

21.23.5. Finished fast OPT passes.

21.24. Executing HIERARCHY pass (managing design hierarchy).

21.24.1. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \TRF
Used module:             \DFF_E
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \LLU
Used module:         \MDU
Used module:             \divider
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         $paramod\adder\size=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:         \mux8to1
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100

21.24.2. Analyzing design hierarchy..
Top module:  \SAYAC
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\REG\N=s32'00000000000000000000000000010000
Used module:         \IMM
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000101
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\mux3to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\adder\size=s32'00000000000000000000000000010000
Used module:         \SHU
Used module:         \TRF
Used module:             \DFF_E
Used module:         \ASU
Used module:             $paramod\adder1\size=s32'00000000000000000000000000010000
Used module:                 \FA
Used module:         \CMP
Used module:         \LLU
Used module:         \MDU
Used module:             \divider
Used module:                 \divider_CU
Used module:                     $paramod\Counter\N=s32'00000000000000000000000000000101
Used module:                 \divider_DP
Used module:                     $paramod\mux2to1\N=s32'00000000000000000000000000010001
Used module:                     $paramod\REG\N=s32'00000000000000000000000000010001
Used module:                     \shiftReg_17b
Used module:             $paramod\booth\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_controller\size=s32'00000000000000000000000000010001
Used module:                 $paramod\booth_datapath\size=s32'00000000000000000000000000010001
Used module:                     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001
Used module:                         $paramod\adder\size=s32'00000000000000000000000000010001
Used module:                     $paramod\shift_register\size=s32'00000000000000000000000000010010
Used module:         \mux8to1
Used module:         $paramod\mux2to1\N=s32'00000000000000000000000000000100
Removed 0 unused modules.

21.25. Printing statistics.

=== $paramod\Counter\N=s32'00000000000000000000000000000101 ===

   Number of wires:                 18
   Number of wire bits:             30
   Number of public wires:           7
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $_ANDNOT_                       2
     $_DFFE_PP0P_                    5
     $_MUX_                          5
     $_NAND_                         2
     $_NOT_                          1
     $_OR_                           2
     $_XNOR_                         2
     $_XOR_                          2

=== $paramod\REG\N=s32'00000000000000000000000000010000 ===

   Number of wires:                  5
   Number of wire bits:             35
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_DFFE_PP0P_                   16

=== $paramod\REG\N=s32'00000000000000000000000000010001 ===

   Number of wires:                  5
   Number of wire bits:             37
   Number of public wires:           5
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 17
     $_DFFE_PP0P_                   17

=== $paramod\adder1\size=s32'00000000000000000000000000010000 ===

   Number of wires:                 20
   Number of wire bits:             65
   Number of public wires:          20
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     FA                             16

=== $paramod\adder\size=s32'00000000000000000000000000010000 ===

   Number of wires:                101
   Number of wire bits:            146
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                113
     $_ANDNOT_                      23
     $_AND_                          8
     $_NAND_                         8
     $_NOR_                         17
     $_ORNOT_                        1
     $_OR_                          24
     $_XNOR_                        20
     $_XOR_                         12

=== $paramod\adder\size=s32'00000000000000000000000000010001 ===

   Number of wires:                105
   Number of wire bits:            153
   Number of public wires:           5
   Number of public wire bits:      53
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                118
     $_ANDNOT_                      27
     $_AND_                          8
     $_NAND_                         9
     $_NOR_                         18
     $_ORNOT_                        1
     $_OR_                          21
     $_XNOR_                        21
     $_XOR_                         13

=== $paramod\adder_subtractor\size=s32'00000000000000000000000000010001 ===

   Number of wires:                  6
   Number of wire bits:             70
   Number of public wires:           6
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $_XOR_                         17
     $paramod\adder\size=s32'00000000000000000000000000010001      1

=== $paramod\booth\size=s32'00000000000000000000000000010001 ===

   Number of wires:                 16
   Number of wire bits:             82
   Number of public wires:          16
   Number of public wire bits:      82
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $paramod\booth_controller\size=s32'00000000000000000000000000010001      1
     $paramod\booth_datapath\size=s32'00000000000000000000000000010001      1

=== $paramod\booth_controller\size=s32'00000000000000000000000000010001 ===

   Number of wires:                 49
   Number of wire bits:             71
   Number of public wires:          17
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                      13
     $_AND_                          3
     $_DFFE_PP0P_                    6
     $_DFF_PP0_                      3
     $_DLATCH_N_                     3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        6
     $_OR_                           7
     $_XNOR_                         1
     $_XOR_                          5

=== $paramod\booth_datapath\size=s32'00000000000000000000000000010001 ===

   Number of wires:                 21
   Number of wire bits:            168
   Number of public wires:          21
   Number of public wire bits:     168
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $_MUX_                         17
     $paramod\REG\N=s32'00000000000000000000000000010001      2
     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001      1
     $paramod\shift_register\size=s32'00000000000000000000000000010010      1

=== $paramod\mux2to1\N=s32'00000000000000000000000000000100 ===

   Number of wires:                  9
   Number of wire bits:             18
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $_AND_                          4
     $_MUX_                          4

=== $paramod\mux2to1\N=s32'00000000000000000000000000000101 ===

   Number of wires:                 10
   Number of wire bits:             22
   Number of public wires:           5
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_AND_                          5
     $_MUX_                          5

=== $paramod\mux2to1\N=s32'00000000000000000000000000010000 ===

   Number of wires:                 21
   Number of wire bits:             66
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $_AND_                         16
     $_MUX_                         16

=== $paramod\mux2to1\N=s32'00000000000000000000000000010001 ===

   Number of wires:                 22
   Number of wire bits:             70
   Number of public wires:           5
   Number of public wire bits:      53
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $_AND_                         17
     $_MUX_                         17

=== $paramod\mux3to1\N=s32'00000000000000000000000000010000 ===

   Number of wires:                 39
   Number of wire bits:             99
   Number of public wires:           7
   Number of public wire bits:      67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AND_                         16
     $_MUX_                         32

=== $paramod\shift_register\size=s32'00000000000000000000000000010010 ===

   Number of wires:                 29
   Number of wire bits:            114
   Number of public wires:           9
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $_ANDNOT_                       1
     $_DFFE_PP_                      1
     $_DFF_PP0_                     18
     $_MUX_                         36

=== ASU ===

   Number of wires:                 48
   Number of wire bits:            138
   Number of public wires:           9
   Number of public wire bits:      84
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 71
     $_AND_                         16
     $_MUX_                         16
     $_OR_                          22
     $_XOR_                         15
     $paramod\adder1\size=s32'00000000000000000000000000010000      2

=== CMP ===

   Number of wires:                 81
   Number of wire bits:            111
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_ANDNOT_                      32
     $_AND_                          1
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          1
     $_ORNOT_                       19
     $_OR_                           4
     $_XNOR_                        10
     $_XOR_                          6

=== Controller ===

   Number of wires:                427
   Number of wire bits:            448
   Number of public wires:          61
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                419
     $_ANDNOT_                     139
     $_AND_                         16
     $_DFF_PP0_                      2
     $_DLATCH_N_                     2
     $_MUX_                         23
     $_NAND_                        21
     $_NOR_                         27
     $_NOT_                         15
     $_ORNOT_                       26
     $_OR_                         148

=== DFF_E ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $_DFFE_PP0P_                    1

=== Datapath ===

   Number of wires:                 90
   Number of wire bits:            449
   Number of public wires:          88
   Number of public wire bits:     447
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       1
     $_NAND_                         1
     $_NOT_                          1
     $_XNOR_                         1
     $_XOR_                          2
     $paramod\REG\N=s32'00000000000000000000000000010000      3
     $paramod\adder\size=s32'00000000000000000000000000010000      2
     $paramod\mux2to1\N=s32'00000000000000000000000000000100      3
     $paramod\mux2to1\N=s32'00000000000000000000000000000101      1
     $paramod\mux2to1\N=s32'00000000000000000000000000010000      3
     $paramod\mux3to1\N=s32'00000000000000000000000000010000      1
     ASU                             1
     CMP                             1
     IMM                             1
     LLU                             1
     MDU                             1
     SHU                             1
     TRF                             1
     mux8to1                         1

=== FA ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $_ANDNOT_                       1
     $_AND_                          1
     $_OR_                           1
     $_XNOR_                         2

=== IMM ===

   Number of wires:                 73
   Number of wire bits:            102
   Number of public wires:           8
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $_ANDNOT_                       8
     $_AND_                          8
     $_MUX_                         56
     $_NAND_                         8
     $_NOT_                          1

=== LLU ===

   Number of wires:                107
   Number of wire bits:            152
   Number of public wires:           6
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     $_ANDNOT_                      22
     $_AND_                         17
     $_MUX_                         32
     $_NOT_                         16
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         14

=== MDU ===

   Number of wires:                 60
   Number of wire bits:            279
   Number of public wires:          26
   Number of public wire bits:     245
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     $_AND_                         34
     $_MUX_                         34
     $paramod\REG\N=s32'00000000000000000000000000010000      2
     $paramod\booth\size=s32'00000000000000000000000000010001      1
     divider                         1

=== SAYAC ===

   Number of wires:                 64
   Number of wire bits:            131
   Number of public wires:          64
   Number of public wire bits:     131
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     Controller                      1
     Datapath                        1

=== SHU ===

   Number of wires:                231
   Number of wire bits:            265
   Number of public wires:           5
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                242
     $_ANDNOT_                      46
     $_AND_                         16
     $_MUX_                        146
     $_NAND_                        13
     $_NOR_                          8
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                           1
     $_XOR_                          5

=== TRF ===

   Number of wires:                572
   Number of wire bits:            880
   Number of public wires:          28
   Number of public wire bits:     336
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                840
     $_ANDNOT_                      52
     $_AND_                          2
     $_MUX_                        480
     $_NAND_                         2
     $_NOR_                          3
     $_ORNOT_                        6
     $_OR_                          31
     $_SDFFCE_PN0P_                256
     DFF_E                           8

=== divider ===

   Number of wires:                 19
   Number of wire bits:             83
   Number of public wires:          19
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     divider_CU                      1
     divider_DP                      1

=== divider_CU ===

   Number of wires:                 35
   Number of wire bits:             45
   Number of public wires:          21
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $_ANDNOT_                      11
     $_AND_                          1
     $_DFF_PP0_                      3
     $_DLATCH_N_                     3
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        3
     $_OR_                           1
     $paramod\Counter\N=s32'00000000000000000000000000000101      1

=== divider_DP ===

   Number of wires:                123
   Number of wire bits:            283
   Number of public wires:          28
   Number of public wire bits:     188
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                119
     $_ANDNOT_                      33
     $_NOR_                         15
     $_NOT_                          2
     $_ORNOT_                       10
     $_OR_                          21
     $_XNOR_                         5
     $_XOR_                         28
     $paramod\REG\N=s32'00000000000000000000000000010001      1
     $paramod\mux2to1\N=s32'00000000000000000000000000010001      2
     shiftReg_17b                    2

=== mux8to1 ===

   Number of wires:                287
   Number of wire bits:            429
   Number of public wires:          10
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                293
     $_ANDNOT_                     173
     $_AND_                          1
     $_NAND_                         4
     $_ORNOT_                       23
     $_OR_                          92

=== shiftReg_17b ===

   Number of wires:                 29
   Number of wire bits:             77
   Number of public wires:           9
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 53
     $_ANDNOT_                      17
     $_DFFE_PP0P_                   17
     $_MUX_                         17
     $_OR_                           2

=== design hierarchy ===

   SAYAC                             1
     Controller                      1
     Datapath                        1
       $paramod\REG\N=s32'00000000000000000000000000010000      3
       $paramod\adder\size=s32'00000000000000000000000000010000      2
       $paramod\mux2to1\N=s32'00000000000000000000000000000100      3
       $paramod\mux2to1\N=s32'00000000000000000000000000000101      1
       $paramod\mux2to1\N=s32'00000000000000000000000000010000      3
       $paramod\mux3to1\N=s32'00000000000000000000000000010000      1
       ASU                           1
         $paramod\adder1\size=s32'00000000000000000000000000010000      2
           FA                       16
       CMP                           1
       IMM                           1
       LLU                           1
       MDU                           1
         $paramod\REG\N=s32'00000000000000000000000000010000      2
         $paramod\booth\size=s32'00000000000000000000000000010001      1
           $paramod\booth_controller\size=s32'00000000000000000000000000010001      1
           $paramod\booth_datapath\size=s32'00000000000000000000000000010001      1
             $paramod\REG\N=s32'00000000000000000000000000010001      2
             $paramod\adder_subtractor\size=s32'00000000000000000000000000010001      1
               $paramod\adder\size=s32'00000000000000000000000000010001      1
             $paramod\shift_register\size=s32'00000000000000000000000000010010      1
         divider                     1
           divider_CU                1
             $paramod\Counter\N=s32'00000000000000000000000000000101      1
           divider_DP                1
             $paramod\REG\N=s32'00000000000000000000000000010001      1
             $paramod\mux2to1\N=s32'00000000000000000000000000010001      2
             shiftReg_17b            2
       SHU                           1
       TRF                           1
         DFF_E                       8
       mux8to1                       1

   Number of wires:               3280
   Number of wire bits:           6154
   Number of public wires:         819
   Number of public wire bits:    3593
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3511
     $_ANDNOT_                     672
     $_AND_                        286
     $_DFFE_PP0P_                  184
     $_DFFE_PP_                      1
     $_DFF_PP0_                     26
     $_DLATCH_N_                     8
     $_MUX_                       1014
     $_NAND_                        83
     $_NOR_                        112
     $_NOT_                         44
     $_ORNOT_                      100
     $_OR_                         449
     $_SDFFCE_PN0P_                256
     $_XNOR_                       145
     $_XOR_                        131

21.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\Counter\N=s32'00000000000000000000000000000101...
Checking module $paramod\REG\N=s32'00000000000000000000000000010000...
Checking module $paramod\REG\N=s32'00000000000000000000000000010001...
Checking module $paramod\adder1\size=s32'00000000000000000000000000010000...
Checking module $paramod\adder\size=s32'00000000000000000000000000010000...
Checking module $paramod\adder\size=s32'00000000000000000000000000010001...
Checking module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001...
Checking module $paramod\booth\size=s32'00000000000000000000000000010001...
Checking module $paramod\booth_controller\size=s32'00000000000000000000000000010001...
Checking module $paramod\booth_datapath\size=s32'00000000000000000000000000010001...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000000100...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000000101...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\mux2to1\N=s32'00000000000000000000000000010001...
Checking module $paramod\mux3to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\shift_register\size=s32'00000000000000000000000000010010...
Checking module ASU...
Checking module CMP...
Checking module Controller...
Checking module DFF_E...
Checking module Datapath...
Checking module FA...
Checking module IMM...
Checking module LLU...
Checking module MDU...
Checking module SAYAC...
Checking module SHU...
Checking module TRF...
Checking module divider...
Checking module divider_CU...
Checking module divider_DP...
Checking module mux8to1...
Checking module shiftReg_17b...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

22.6. Executing OPT_SHARE pass.

22.7. Executing OPT_DFF pass (perform DFF optimizations).

22.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

22.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

22.10. Finished OPT passes. (There is nothing left to do.)

23. Executing Liberty frontend: /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib
Imported 16 cell types from liberty file.

24. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_N (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_N_.
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFF_NN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN0_.
  cell DFF_NN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN1_.
  cell DFF_NP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP0_.
  cell DFF_NP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP1_.
  cell DFF_PN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  cell DFF_PN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN1_.
  cell DFF_PP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP0_.
  cell DFF_PP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP1_.
  final dff cell mappings:
    \DFF_N _DFF_N_ (.C( C), .D( D), .Q( Q));
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    \DFF_NN0 _DFF_NN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NN1 _DFF_NN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP0 _DFF_NP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP1 _DFF_NP1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN0 _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN1 _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP0 _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP1 _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

24.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101':
  mapped 5 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `$paramod\REG\N=s32'00000000000000000000000000010000':
  mapped 16 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `$paramod\REG\N=s32'00000000000000000000000000010001':
  mapped 17 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000':
Mapping DFF cells in module `$paramod\adder\size=s32'00000000000000000000000000010000':
Mapping DFF cells in module `$paramod\adder\size=s32'00000000000000000000000000010001':
Mapping DFF cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001':
Mapping DFF cells in module `$paramod\booth\size=s32'00000000000000000000000000010001':
Mapping DFF cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001':
  mapped 9 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001':
Mapping DFF cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100':
Mapping DFF cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101':
Mapping DFF cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000':
Mapping DFF cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001':
Mapping DFF cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000':
Mapping DFF cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010':
  mapped 18 $_DFF_PP0_ cells to \DFF_PP0 cells.
  mapped 1 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\ASU':
Mapping DFF cells in module `\CMP':
Mapping DFF cells in module `\Controller':
  mapped 2 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `\DFF_E':
  mapped 1 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `\Datapath':
Mapping DFF cells in module `\FA':
Mapping DFF cells in module `\IMM':
Mapping DFF cells in module `\LLU':
Mapping DFF cells in module `\MDU':
Mapping DFF cells in module `\SAYAC':
Mapping DFF cells in module `\SHU':
Mapping DFF cells in module `\TRF':
  mapped 256 $_DFF_P_ cells to \DFF cells.
Mapping DFF cells in module `\divider':
Mapping DFF cells in module `\divider_CU':
  mapped 3 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `\divider_DP':
Mapping DFF cells in module `\mux8to1':
Mapping DFF cells in module `\shiftReg_17b':
  mapped 17 $_DFF_PP0_ cells to \DFF_PP0 cells.

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

25.9. Finished OPT passes. (There is nothing left to do.)

26. Executing ABC pass (technology mapping using ABC).

26.1. Extracting gate netlist of module `$paramod\Counter\N=s32'00000000000000000000000000000101' to `<abc-temp-dir>/input.blif'..
Extracted 21 gates and 33 wires to a netlist network with 12 inputs and 6 outputs.

26.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       12
ABC RESULTS:               NOR cells:       24
ABC RESULTS:              NAND cells:       15
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        6
Removing temp directory.

26.2. Extracting gate netlist of module `$paramod\REG\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 16 gates and 49 wires to a netlist network with 33 inputs and 16 outputs.

26.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.2.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:       48
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       16
Removing temp directory.

26.3. Extracting gate netlist of module `$paramod\REG\N=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 52 wires to a netlist network with 35 inputs and 17 outputs.

26.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:       51
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       17
Removing temp directory.

26.4. Extracting gate netlist of module `$paramod\adder1\size=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

26.5. Extracting gate netlist of module `$paramod\adder\size=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 113 gates and 146 wires to a netlist network with 33 inputs and 17 outputs.

26.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       56
ABC RESULTS:               NOR cells:      123
ABC RESULTS:              NAND cells:       40
ABC RESULTS:        internal signals:       96
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       17
Removing temp directory.

26.6. Extracting gate netlist of module `$paramod\adder\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 118 gates and 153 wires to a netlist network with 35 inputs and 18 outputs.

26.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.6.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       60
ABC RESULTS:               NOR cells:      130
ABC RESULTS:              NAND cells:       43
ABC RESULTS:        internal signals:      100
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       18
Removing temp directory.

26.7. Extracting gate netlist of module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 35 wires to a netlist network with 18 inputs and 17 outputs.

26.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.7.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       18
ABC RESULTS:               NOR cells:       51
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       17
Removing temp directory.

26.8. Extracting gate netlist of module `$paramod\booth\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

26.9. Extracting gate netlist of module `$paramod\booth_controller\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 62 wires to a netlist network with 12 inputs and 16 outputs.

26.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.9.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       18
ABC RESULTS:               NOR cells:       32
ABC RESULTS:              NAND cells:       25
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       16
Removing temp directory.

26.10. Extracting gate netlist of module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 52 wires to a netlist network with 35 inputs and 17 outputs.

26.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.10.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:       51
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       17
Removing temp directory.

26.11. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 10 inputs and 4 outputs.

26.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.11.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:       12
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        4
Removing temp directory.

26.12. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000000101' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 22 wires to a netlist network with 12 inputs and 5 outputs.

26.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.12.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:       15
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        5
Removing temp directory.

26.13. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 66 wires to a netlist network with 34 inputs and 16 outputs.

26.13.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.13.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:       48
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

26.14. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 34 gates and 70 wires to a netlist network with 36 inputs and 17 outputs.

26.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.14.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:       51
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       17
Removing temp directory.

26.15. Extracting gate netlist of module `$paramod\mux3to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 99 wires to a netlist network with 51 inputs and 16 outputs.

26.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.15.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:       48
ABC RESULTS:               NOR cells:       64
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       16
Removing temp directory.

26.16. Extracting gate netlist of module `$paramod\shift_register\size=s32'00000000000000000000000000010010' to `<abc-temp-dir>/input.blif'..
Extracted 38 gates and 79 wires to a netlist network with 41 inputs and 19 outputs.

26.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.16.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        3
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:      112
ABC RESULTS:        internal signals:       19
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:       19
Removing temp directory.

26.17. Extracting gate netlist of module `\ASU' to `<abc-temp-dir>/input.blif'..
Extracted 69 gates and 119 wires to a netlist network with 50 inputs and 31 outputs.

26.17.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.17.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       22
ABC RESULTS:              NAND cells:       60
ABC RESULTS:               NOR cells:       45
ABC RESULTS:        internal signals:       38
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       31
Removing temp directory.

26.18. Extracting gate netlist of module `\CMP' to `<abc-temp-dir>/input.blif'..
Extracted 79 gates and 111 wires to a netlist network with 32 inputs and 3 outputs.

26.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.18.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       37
ABC RESULTS:              NAND cells:       47
ABC RESULTS:               NOR cells:       47
ABC RESULTS:        internal signals:       76
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        3
Removing temp directory.

26.19. Extracting gate netlist of module `\Controller' to `<abc-temp-dir>/input.blif'..
Extracted 415 gates and 434 wires to a netlist network with 19 inputs and 51 outputs.

26.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.19.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       56
ABC RESULTS:              NAND cells:      114
ABC RESULTS:               NOR cells:      136
ABC RESULTS:        internal signals:      364
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       51
Removing temp directory.

26.20. Extracting gate netlist of module `\DFF_E' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 4 wires to a netlist network with 3 inputs and 1 outputs.

26.20.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.20.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        3
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

26.21. Extracting gate netlist of module `\Datapath' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

26.21.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.21.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              NAND cells:        5
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

26.22. Extracting gate netlist of module `\FA' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 8 wires to a netlist network with 3 inputs and 2 outputs.

26.22.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.22.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        3
ABC RESULTS:               NOR cells:        6
ABC RESULTS:              NAND cells:        5
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

26.23. Extracting gate netlist of module `\IMM' to `<abc-temp-dir>/input.blif'..
Extracted 81 gates and 102 wires to a netlist network with 21 inputs and 16 outputs.

26.23.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.23.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       19
ABC RESULTS:               NOR cells:       24
ABC RESULTS:              NAND cells:       53
ABC RESULTS:        internal signals:       65
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

26.24. Extracting gate netlist of module `\LLU' to `<abc-temp-dir>/input.blif'..
Extracted 117 gates and 152 wires to a netlist network with 35 inputs and 16 outputs.

26.24.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.24.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       25
ABC RESULTS:               NOR cells:       65
ABC RESULTS:              NAND cells:       85
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

26.25. Extracting gate netlist of module `\MDU' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 138 wires to a netlist network with 70 inputs and 34 outputs.

26.25.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.25.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:              NAND cells:      102
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       70
ABC RESULTS:          output signals:       34
Removing temp directory.

26.26. Extracting gate netlist of module `\SAYAC' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

26.27. Extracting gate netlist of module `\SHU' to `<abc-temp-dir>/input.blif'..
Extracted 242 gates and 265 wires to a netlist network with 23 inputs and 16 outputs.

26.27.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.27.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       58
ABC RESULTS:               NOR cells:      138
ABC RESULTS:              NAND cells:      233
ABC RESULTS:        internal signals:      226
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:       16
Removing temp directory.

26.28. Extracting gate netlist of module `\TRF' to `<abc-temp-dir>/input.blif'..
Extracted 1088 gates and 1375 wires to a netlist network with 286 inputs and 288 outputs.

26.28.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.28.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:      189
ABC RESULTS:               NOR cells:      954
ABC RESULTS:              NAND cells:     1275
ABC RESULTS:        internal signals:      801
ABC RESULTS:           input signals:      286
ABC RESULTS:          output signals:      288
Removing temp directory.

26.29. Extracting gate netlist of module `\divider' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

26.30. Extracting gate netlist of module `\divider_CU' to `<abc-temp-dir>/input.blif'..
Extracted 23 gates and 29 wires to a netlist network with 6 inputs and 11 outputs.

26.30.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.30.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:        9
ABC RESULTS:        internal signals:       12
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:       11
Removing temp directory.

26.31. Extracting gate netlist of module `\divider_DP' to `<abc-temp-dir>/input.blif'..
Extracted 114 gates and 150 wires to a netlist network with 36 inputs and 19 outputs.

26.31.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.31.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       52
ABC RESULTS:               NOT cells:       67
ABC RESULTS:               NOR cells:      130
ABC RESULTS:        internal signals:       95
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       19
Removing temp directory.

26.32. Extracting gate netlist of module `\mux8to1' to `<abc-temp-dir>/input.blif'..
Extracted 293 gates and 429 wires to a netlist network with 136 inputs and 16 outputs.

26.32.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.32.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        8
ABC RESULTS:               NOR cells:       52
ABC RESULTS:              NAND cells:      218
ABC RESULTS:        internal signals:      277
ABC RESULTS:           input signals:      136
ABC RESULTS:          output signals:       16
Removing temp directory.

26.33. Extracting gate netlist of module `\shiftReg_17b' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 91 wires to a netlist network with 38 inputs and 17 outputs.

26.33.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/legacy_files/testsuites/Omid-sayac-bench/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.02 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

26.33.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:               NOR cells:        3
ABC RESULTS:              NAND cells:      103
ABC RESULTS:        internal signals:       36
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       17
Removing temp directory.

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 4328 unused wires.
<suppressed ~29 debug messages>

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

27.9. Rerunning OPT passes. (Maybe there is more to do..)

27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

27.13. Executing OPT_DFF pass (perform DFF optimizations).

27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

27.16. Finished OPT passes. (There is nothing left to do.)

28. Executing SPLITNETS pass (splitting up multi-bit signals).

29. Executing TECHMAP pass (map to technology primitives).

29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

30. Executing ABC pass (technology mapping using ABC).

30.1. Extracting gate netlist of module `$paramod\Counter\N=s32'00000000000000000000000000000101' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.2. Extracting gate netlist of module `$paramod\REG\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.3. Extracting gate netlist of module `$paramod\REG\N=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.4. Extracting gate netlist of module `$paramod\adder1\size=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.5. Extracting gate netlist of module `$paramod\adder\size=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.6. Extracting gate netlist of module `$paramod\adder\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.7. Extracting gate netlist of module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.8. Extracting gate netlist of module `$paramod\booth\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.9. Extracting gate netlist of module `$paramod\booth_controller\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.10. Extracting gate netlist of module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.11. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.12. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000000101' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.13. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.14. Extracting gate netlist of module `$paramod\mux2to1\N=s32'00000000000000000000000000010001' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.15. Extracting gate netlist of module `$paramod\mux3to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.16. Extracting gate netlist of module `$paramod\shift_register\size=s32'00000000000000000000000000010010' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.17. Extracting gate netlist of module `\ASU' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.18. Extracting gate netlist of module `\CMP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.19. Extracting gate netlist of module `\Controller' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.20. Extracting gate netlist of module `\DFF_E' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.21. Extracting gate netlist of module `\Datapath' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.22. Extracting gate netlist of module `\FA' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.23. Extracting gate netlist of module `\IMM' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.24. Extracting gate netlist of module `\LLU' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.25. Extracting gate netlist of module `\MDU' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.26. Extracting gate netlist of module `\SAYAC' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.27. Extracting gate netlist of module `\SHU' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.28. Extracting gate netlist of module `\TRF' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.29. Extracting gate netlist of module `\divider' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.30. Extracting gate netlist of module `\divider_CU' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.31. Extracting gate netlist of module `\divider_DP' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.32. Extracting gate netlist of module `\mux8to1' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

30.33. Extracting gate netlist of module `\shiftReg_17b' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

31.16. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 201 unused wires.

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

33. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.clk using BUF_X1.
Don't map output port $paramod\Counter\N=s32'00000000000000000000000000000101.co: Missing option -outpad.
Don't map output port $paramod\Counter\N=s32'00000000000000000000000000000101.dataOut: Missing option -outpad.
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.incCnt using BUF_X1.
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.iniCnt using BUF_X1.
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.initValue using BUF_X1.
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.rst using BUF_X1.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010000.clk using BUF_X1.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010000.inREG using BUF_X1.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010000.ld using BUF_X1.
Don't map output port $paramod\REG\N=s32'00000000000000000000000000010000.outREG: Missing option -outpad.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010000.rst using BUF_X1.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010001.clk using BUF_X1.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010001.inREG using BUF_X1.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010001.ld using BUF_X1.
Don't map output port $paramod\REG\N=s32'00000000000000000000000000010001.outREG: Missing option -outpad.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010001.rst using BUF_X1.
Mapping port $paramod\adder1\size=s32'00000000000000000000000000010000.a using BUF_X1.
Mapping port $paramod\adder1\size=s32'00000000000000000000000000010000.b using BUF_X1.
Mapping port $paramod\adder1\size=s32'00000000000000000000000000010000.cin using BUF_X1.
Don't map output port $paramod\adder1\size=s32'00000000000000000000000000010000.cout: Missing option -outpad.
Don't map output port $paramod\adder1\size=s32'00000000000000000000000000010000.sum: Missing option -outpad.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010000.a using BUF_X1.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010000.b using BUF_X1.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010000.cin using BUF_X1.
Don't map output port $paramod\adder\size=s32'00000000000000000000000000010000.cout: Missing option -outpad.
Don't map output port $paramod\adder\size=s32'00000000000000000000000000010000.sum: Missing option -outpad.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010001.a using BUF_X1.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010001.b using BUF_X1.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010001.cin using BUF_X1.
Don't map output port $paramod\adder\size=s32'00000000000000000000000000010001.cout: Missing option -outpad.
Don't map output port $paramod\adder\size=s32'00000000000000000000000000010001.sum: Missing option -outpad.
Mapping port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.a using BUF_X1.
Mapping port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.b using BUF_X1.
Don't map output port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.cout: Missing option -outpad.
Don't map output port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.out: Missing option -outpad.
Mapping port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.subsel using BUF_X1.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.M using BUF_X1.
Don't map output port $paramod\booth\size=s32'00000000000000000000000000010001.P: Missing option -outpad.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.Q using BUF_X1.
Don't map output port $paramod\booth\size=s32'00000000000000000000000000010001.Ready: Missing option -outpad.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.clk using BUF_X1.
Don't map output port $paramod\booth\size=s32'00000000000000000000000000010001.done: Missing option -outpad.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.rst using BUF_X1.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.start using BUF_X1.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.Ready: Missing option -outpad.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.clk using BUF_X1.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.clrP: Missing option -outpad.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.done: Missing option -outpad.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.ldM: Missing option -outpad.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.ldP: Missing option -outpad.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.ldQ: Missing option -outpad.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.op using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.rst using BUF_X1.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.sel: Missing option -outpad.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.shrQ: Missing option -outpad.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.start using BUF_X1.
Don't map output port $paramod\booth_controller\size=s32'00000000000000000000000000010001.subsel: Missing option -outpad.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.M using BUF_X1.
Don't map output port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.P: Missing option -outpad.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.Q using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.clk using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.clrP using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.ldM using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.ldP using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.ldQ using BUF_X1.
Don't map output port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.op: Missing option -outpad.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.rst using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.sel using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.shrQ using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.subsel using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000100.in1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000100.in2 using BUF_X1.
Don't map output port $paramod\mux2to1\N=s32'00000000000000000000000000000100.outMUX: Missing option -outpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000100.sel1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000100.sel2 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000101.in1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000101.in2 using BUF_X1.
Don't map output port $paramod\mux2to1\N=s32'00000000000000000000000000000101.outMUX: Missing option -outpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000101.sel1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000101.sel2 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010000.in1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010000.in2 using BUF_X1.
Don't map output port $paramod\mux2to1\N=s32'00000000000000000000000000010000.outMUX: Missing option -outpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010000.sel1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010000.sel2 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010001.in1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010001.in2 using BUF_X1.
Don't map output port $paramod\mux2to1\N=s32'00000000000000000000000000010001.outMUX: Missing option -outpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010001.sel1 using BUF_X1.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010001.sel2 using BUF_X1.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.in1 using BUF_X1.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.in2 using BUF_X1.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.in3 using BUF_X1.
Don't map output port $paramod\mux3to1\N=s32'00000000000000000000000000010000.outMUX: Missing option -outpad.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.sel1 using BUF_X1.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.sel2 using BUF_X1.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.sel3 using BUF_X1.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.clk using BUF_X1.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.in using BUF_X1.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.ldR using BUF_X1.
Don't map output port $paramod\shift_register\size=s32'00000000000000000000000000010010.out: Missing option -outpad.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.rst using BUF_X1.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.seiR using BUF_X1.
Don't map output port $paramod\shift_register\size=s32'00000000000000000000000000010010.seoR: Missing option -outpad.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.shrR using BUF_X1.
Mapping port ASU.arithADD using BUF_X1.
Mapping port ASU.arithSUB using BUF_X1.
Mapping port ASU.in1 using BUF_X1.
Mapping port ASU.in2 using BUF_X1.
Don't map output port ASU.outASU: Missing option -outpad.
Don't map output port CMP.eq: Missing option -outpad.
Don't map output port CMP.gt: Missing option -outpad.
Mapping port CMP.in1 using BUF_X1.
Mapping port CMP.in2 using BUF_X1.
Don't map output port CMP.lt: Missing option -outpad.
Mapping port Controller.FIB using BUF_X1.
Don't map output port Controller.SE5bits: Missing option -outpad.
Don't map output port Controller.SE6bits: Missing option -outpad.
Don't map output port Controller.SE8bits: Missing option -outpad.
Don't map output port Controller.USE8bits: Missing option -outpad.
Don't map output port Controller.arithADD: Missing option -outpad.
Don't map output port Controller.arithDIV: Missing option -outpad.
Don't map output port Controller.arithMUL: Missing option -outpad.
Don't map output port Controller.arithSH: Missing option -outpad.
Don't map output port Controller.arithSUB: Missing option -outpad.
Mapping port Controller.clk using BUF_X1.
Mapping port Controller.doneMDU using BUF_X1.
Don't map output port Controller.enFlag: Missing option -outpad.
Don't map output port Controller.ldADR: Missing option -outpad.
Don't map output port Controller.ldIR: Missing option -outpad.
Don't map output port Controller.ldMDU1: Missing option -outpad.
Don't map output port Controller.ldMDU2: Missing option -outpad.
Don't map output port Controller.ldPC: Missing option -outpad.
Don't map output port Controller.logicAND: Missing option -outpad.
Don't map output port Controller.logicSH: Missing option -outpad.
Don't map output port Controller.onesComp: Missing option -outpad.
Mapping port Controller.opcode using BUF_X1.
Mapping port Controller.outFlag using BUF_X1.
Don't map output port Controller.p1lowbits: Missing option -outpad.
Don't map output port Controller.readIO: Missing option -outpad.
Don't map output port Controller.readMEM: Missing option -outpad.
Mapping port Controller.readyMDU using BUF_X1.
Mapping port Controller.readyMEM using BUF_X1.
Mapping port Controller.rst using BUF_X1.
Don't map output port Controller.selADR_MEM: Missing option -outpad.
Don't map output port Controller.selASU_TRF: Missing option -outpad.
Don't map output port Controller.selIMM_TRF: Missing option -outpad.
Don't map output port Controller.selLLU_TRF: Missing option -outpad.
Don't map output port Controller.selMDU1_TRF: Missing option -outpad.
Don't map output port Controller.selMDU2_TRF: Missing option -outpad.
Don't map output port Controller.selPC1_PC: Missing option -outpad.
Don't map output port Controller.selPC1_TRF: Missing option -outpad.
Don't map output port Controller.selPC_MEM: Missing option -outpad.
Don't map output port Controller.selPCadd_PC: Missing option -outpad.
Don't map output port Controller.selSHU_TRF: Missing option -outpad.
Don't map output port Controller.seldatabus_TRF: Missing option -outpad.
Don't map output port Controller.selimm_ASU: Missing option -outpad.
Don't map output port Controller.selimm_PCP: Missing option -outpad.
Don't map output port Controller.selp1_PC: Missing option -outpad.
Don't map output port Controller.selp1_PCP: Missing option -outpad.
Don't map output port Controller.selp2_ASU: Missing option -outpad.
Don't map output port Controller.selp2_SHU: Missing option -outpad.
Don't map output port Controller.selrd0_TRF: Missing option -outpad.
Don't map output port Controller.selrd1_TRF: Missing option -outpad.
Don't map output port Controller.selrd_1_TRF: Missing option -outpad.
Don't map output port Controller.selrd_2_TRF: Missing option -outpad.
Don't map output port Controller.selrs1_TRF: Missing option -outpad.
Don't map output port Controller.selrs2_TRF: Missing option -outpad.
Don't map output port Controller.selshim_SHU: Missing option -outpad.
Don't map output port Controller.startMDU: Missing option -outpad.
Don't map output port Controller.twosComp: Missing option -outpad.
Don't map output port Controller.writeIO: Missing option -outpad.
Don't map output port Controller.writeMEM: Missing option -outpad.
Don't map output port Controller.writeTRF: Missing option -outpad.
Mapping port DFF_E.clk using BUF_X1.
Mapping port DFF_E.en using BUF_X1.
Mapping port DFF_E.in using BUF_X1.
Don't map output port DFF_E.out: Missing option -outpad.
Mapping port DFF_E.rst using BUF_X1.
Mapping port Datapath.SE5bits using BUF_X1.
Mapping port Datapath.SE6bits using BUF_X1.
Mapping port Datapath.SE8bits using BUF_X1.
Mapping port Datapath.USE8bits using BUF_X1.
Don't map output port Datapath.addrBus: Missing option -outpad.
Mapping port Datapath.arithADD using BUF_X1.
Mapping port Datapath.arithDIV using BUF_X1.
Mapping port Datapath.arithMUL using BUF_X1.
Mapping port Datapath.arithSH using BUF_X1.
Mapping port Datapath.arithSUB using BUF_X1.
Mapping port Datapath.clk using BUF_X1.
Mapping port Datapath.dataBusIn using BUF_X1.
Don't map output port Datapath.dataBusOut: Missing option -outpad.
Don't map output port Datapath.doneMDU: Missing option -outpad.
Mapping port Datapath.enFlag using BUF_X1.
Don't map output port Datapath.eq: Missing option -outpad.
Don't map output port Datapath.gt: Missing option -outpad.
Don't map output port Datapath.instr: Missing option -outpad.
Mapping port Datapath.ldADR using BUF_X1.
Mapping port Datapath.ldIR using BUF_X1.
Mapping port Datapath.ldMDU1 using BUF_X1.
Mapping port Datapath.ldMDU2 using BUF_X1.
Mapping port Datapath.ldPC using BUF_X1.
Mapping port Datapath.logicAND using BUF_X1.
Mapping port Datapath.logicSH using BUF_X1.
Don't map output port Datapath.lt: Missing option -outpad.
Mapping port Datapath.onesComp using BUF_X1.
Don't map output port Datapath.outFlag: Missing option -outpad.
Mapping port Datapath.p1lowbits using BUF_X1.
Don't map output port Datapath.readyMDU: Missing option -outpad.
Mapping port Datapath.rst using BUF_X1.
Mapping port Datapath.selADR_MEM using BUF_X1.
Mapping port Datapath.selASU_TRF using BUF_X1.
Mapping port Datapath.selIMM_TRF using BUF_X1.
Mapping port Datapath.selLLU_TRF using BUF_X1.
Mapping port Datapath.selMDU1_TRF using BUF_X1.
Mapping port Datapath.selMDU2_TRF using BUF_X1.
Mapping port Datapath.selPC1_PC using BUF_X1.
Mapping port Datapath.selPC1_TRF using BUF_X1.
Mapping port Datapath.selPC_MEM using BUF_X1.
Mapping port Datapath.selPCadd_PC using BUF_X1.
Mapping port Datapath.selSHU_TRF using BUF_X1.
Mapping port Datapath.seldatabus_TRF using BUF_X1.
Mapping port Datapath.selimm_ASU using BUF_X1.
Mapping port Datapath.selimm_PCP using BUF_X1.
Mapping port Datapath.selp1_PC using BUF_X1.
Mapping port Datapath.selp1_PCP using BUF_X1.
Mapping port Datapath.selp2_ASU using BUF_X1.
Mapping port Datapath.selp2_SHU using BUF_X1.
Mapping port Datapath.selrd0_TRF using BUF_X1.
Mapping port Datapath.selrd1_TRF using BUF_X1.
Mapping port Datapath.selrd_1_TRF using BUF_X1.
Mapping port Datapath.selrd_2_TRF using BUF_X1.
Mapping port Datapath.selrs1_TRF using BUF_X1.
Mapping port Datapath.selrs2_TRF using BUF_X1.
Mapping port Datapath.selshim_SHU using BUF_X1.
Mapping port Datapath.startMDU using BUF_X1.
Mapping port Datapath.twosComp using BUF_X1.
Mapping port Datapath.writeTRF using BUF_X1.
Mapping port FA.A using BUF_X1.
Mapping port FA.B using BUF_X1.
Mapping port FA.Cin using BUF_X1.
Don't map output port FA.Co: Missing option -outpad.
Don't map output port FA.S: Missing option -outpad.
Mapping port IMM.SE5bits using BUF_X1.
Mapping port IMM.SE6bits using BUF_X1.
Mapping port IMM.SE8bits using BUF_X1.
Mapping port IMM.USE8bits using BUF_X1.
Mapping port IMM.in1 using BUF_X1.
Mapping port IMM.in2 using BUF_X1.
Don't map output port IMM.outIMM: Missing option -outpad.
Mapping port IMM.p1lowbits using BUF_X1.
Mapping port LLU.in1 using BUF_X1.
Mapping port LLU.in2 using BUF_X1.
Mapping port LLU.logicAND using BUF_X1.
Mapping port LLU.onescomp using BUF_X1.
Don't map output port LLU.outLLU: Missing option -outpad.
Mapping port LLU.twoscomp using BUF_X1.
Mapping port MDU.arithDIV using BUF_X1.
Mapping port MDU.arithMUL using BUF_X1.
Mapping port MDU.clk using BUF_X1.
Don't map output port MDU.doneMDU: Missing option -outpad.
Mapping port MDU.in1 using BUF_X1.
Mapping port MDU.in2 using BUF_X1.
Mapping port MDU.ldMDU1 using BUF_X1.
Mapping port MDU.ldMDU2 using BUF_X1.
Don't map output port MDU.outMDU1: Missing option -outpad.
Don't map output port MDU.outMDU2: Missing option -outpad.
Don't map output port MDU.readyMDU: Missing option -outpad.
Mapping port MDU.rst using BUF_X1.
Mapping port MDU.startMDU using BUF_X1.
Don't map output port SAYAC.addrBus: Missing option -outpad.
Mapping port SAYAC.clk using BUF_X1.
Mapping port SAYAC.dataBusIn using BUF_X1.
Don't map output port SAYAC.dataBusOut: Missing option -outpad.
Don't map output port SAYAC.readMEM: Missing option -outpad.
Mapping port SAYAC.readyMEM using BUF_X1.
Mapping port SAYAC.rst using BUF_X1.
Don't map output port SAYAC.writeMEM: Missing option -outpad.
Mapping port SHU.arithSH using BUF_X1.
Mapping port SHU.in1 using BUF_X1.
Mapping port SHU.in2 using BUF_X1.
Mapping port SHU.logicSH using BUF_X1.
Don't map output port SHU.outSHU: Missing option -outpad.
Mapping port TRF.clk using BUF_X1.
Mapping port TRF.enFlag using BUF_X1.
Mapping port TRF.inFlag using BUF_X1.
Don't map output port TRF.outFlag: Missing option -outpad.
Don't map output port TRF.p1: Missing option -outpad.
Don't map output port TRF.p2: Missing option -outpad.
Mapping port TRF.rd using BUF_X1.
Mapping port TRF.rs1 using BUF_X1.
Mapping port TRF.rs2 using BUF_X1.
Mapping port TRF.rst using BUF_X1.
Mapping port TRF.writeRegFile using BUF_X1.
Mapping port TRF.write_data using BUF_X1.
Mapping port divider.Devidend using BUF_X1.
Mapping port divider.Divisor using BUF_X1.
Don't map output port divider.Quotient: Missing option -outpad.
Don't map output port divider.Remainder: Missing option -outpad.
Mapping port divider.clk using BUF_X1.
Don't map output port divider.done: Missing option -outpad.
Don't map output port divider.ready: Missing option -outpad.
Mapping port divider.rst using BUF_X1.
Mapping port divider.start using BUF_X1.
Don't map output port divider_CU.Q0: Missing option -outpad.
Mapping port divider_CU.clk using BUF_X1.
Don't map output port divider_CU.clr_R: Missing option -outpad.
Don't map output port divider_CU.done: Missing option -outpad.
Don't map output port divider_CU.load_M: Missing option -outpad.
Don't map output port divider_CU.load_Q: Missing option -outpad.
Don't map output port divider_CU.load_R: Missing option -outpad.
Don't map output port divider_CU.ready: Missing option -outpad.
Mapping port divider_CU.rst using BUF_X1.
Don't map output port divider_CU.setQ0: Missing option -outpad.
Don't map output port divider_CU.setR: Missing option -outpad.
Don't map output port divider_CU.shift_Q: Missing option -outpad.
Don't map output port divider_CU.shift_R: Missing option -outpad.
Mapping port divider_CU.sign using BUF_X1.
Mapping port divider_CU.start using BUF_X1.
Mapping port divider_DP.Devident using BUF_X1.
Mapping port divider_DP.Divisor using BUF_X1.
Mapping port divider_DP.Q0 using BUF_X1.
Don't map output port divider_DP.Quotient: Missing option -outpad.
Don't map output port divider_DP.Remainder: Missing option -outpad.
Mapping port divider_DP.clk using BUF_X1.
Mapping port divider_DP.clr_R using BUF_X1.
Mapping port divider_DP.load_M using BUF_X1.
Mapping port divider_DP.load_Q using BUF_X1.
Mapping port divider_DP.load_R using BUF_X1.
Mapping port divider_DP.rst using BUF_X1.
Mapping port divider_DP.setQ0 using BUF_X1.
Mapping port divider_DP.setR using BUF_X1.
Mapping port divider_DP.shift_Q using BUF_X1.
Mapping port divider_DP.shift_R using BUF_X1.
Don't map output port divider_DP.sign: Missing option -outpad.
Mapping port mux8to1.d1 using BUF_X1.
Mapping port mux8to1.d2 using BUF_X1.
Mapping port mux8to1.d3 using BUF_X1.
Mapping port mux8to1.d4 using BUF_X1.
Mapping port mux8to1.d5 using BUF_X1.
Mapping port mux8to1.d6 using BUF_X1.
Mapping port mux8to1.d7 using BUF_X1.
Mapping port mux8to1.d8 using BUF_X1.
Don't map output port mux8to1.dout: Missing option -outpad.
Mapping port mux8to1.sel using BUF_X1.
Mapping port shiftReg_17b.Ld using BUF_X1.
Mapping port shiftReg_17b.clk using BUF_X1.
Mapping port shiftReg_17b.dataIn using BUF_X1.
Don't map output port shiftReg_17b.dataOut: Missing option -outpad.
Mapping port shiftReg_17b.init using BUF_X1.
Mapping port shiftReg_17b.rst using BUF_X1.
Mapping port shiftReg_17b.serIn using BUF_X1.
Don't map output port shiftReg_17b.serOut: Missing option -outpad.
Mapping port shiftReg_17b.sh_L_en using BUF_X1.

34. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port $paramod\Counter\N=s32'00000000000000000000000000000101.clk: Missing option -inpad.
Don't map input port $paramod\Counter\N=s32'00000000000000000000000000000101.incCnt: Missing option -inpad.
Don't map input port $paramod\Counter\N=s32'00000000000000000000000000000101.iniCnt: Missing option -inpad.
Don't map input port $paramod\Counter\N=s32'00000000000000000000000000000101.initValue: Missing option -inpad.
Don't map input port $paramod\Counter\N=s32'00000000000000000000000000000101.rst: Missing option -inpad.
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.co using BUF_X1.
Mapping port $paramod\Counter\N=s32'00000000000000000000000000000101.dataOut using BUF_X1.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010000.clk: Missing option -inpad.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010000.inREG: Missing option -inpad.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010000.ld: Missing option -inpad.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010000.rst: Missing option -inpad.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010000.outREG using BUF_X1.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010001.clk: Missing option -inpad.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010001.inREG: Missing option -inpad.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010001.ld: Missing option -inpad.
Don't map input port $paramod\REG\N=s32'00000000000000000000000000010001.rst: Missing option -inpad.
Mapping port $paramod\REG\N=s32'00000000000000000000000000010001.outREG using BUF_X1.
Don't map input port $paramod\adder1\size=s32'00000000000000000000000000010000.a: Missing option -inpad.
Don't map input port $paramod\adder1\size=s32'00000000000000000000000000010000.b: Missing option -inpad.
Don't map input port $paramod\adder1\size=s32'00000000000000000000000000010000.cin: Missing option -inpad.
Mapping port $paramod\adder1\size=s32'00000000000000000000000000010000.cout using BUF_X1.
Mapping port $paramod\adder1\size=s32'00000000000000000000000000010000.sum using BUF_X1.
Don't map input port $paramod\adder\size=s32'00000000000000000000000000010000.a: Missing option -inpad.
Don't map input port $paramod\adder\size=s32'00000000000000000000000000010000.b: Missing option -inpad.
Don't map input port $paramod\adder\size=s32'00000000000000000000000000010000.cin: Missing option -inpad.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010000.cout using BUF_X1.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010000.sum using BUF_X1.
Don't map input port $paramod\adder\size=s32'00000000000000000000000000010001.a: Missing option -inpad.
Don't map input port $paramod\adder\size=s32'00000000000000000000000000010001.b: Missing option -inpad.
Don't map input port $paramod\adder\size=s32'00000000000000000000000000010001.cin: Missing option -inpad.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010001.cout using BUF_X1.
Mapping port $paramod\adder\size=s32'00000000000000000000000000010001.sum using BUF_X1.
Don't map input port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.a: Missing option -inpad.
Don't map input port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.b: Missing option -inpad.
Don't map input port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.subsel: Missing option -inpad.
Mapping port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.cout using BUF_X1.
Mapping port $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.out using BUF_X1.
Don't map input port $paramod\booth\size=s32'00000000000000000000000000010001.M: Missing option -inpad.
Don't map input port $paramod\booth\size=s32'00000000000000000000000000010001.Q: Missing option -inpad.
Don't map input port $paramod\booth\size=s32'00000000000000000000000000010001.clk: Missing option -inpad.
Don't map input port $paramod\booth\size=s32'00000000000000000000000000010001.rst: Missing option -inpad.
Don't map input port $paramod\booth\size=s32'00000000000000000000000000010001.start: Missing option -inpad.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.P using BUF_X1.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.Ready using BUF_X1.
Mapping port $paramod\booth\size=s32'00000000000000000000000000010001.done using BUF_X1.
Don't map input port $paramod\booth_controller\size=s32'00000000000000000000000000010001.clk: Missing option -inpad.
Don't map input port $paramod\booth_controller\size=s32'00000000000000000000000000010001.op: Missing option -inpad.
Don't map input port $paramod\booth_controller\size=s32'00000000000000000000000000010001.rst: Missing option -inpad.
Don't map input port $paramod\booth_controller\size=s32'00000000000000000000000000010001.start: Missing option -inpad.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.Ready using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.clrP using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.done using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.ldM using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.ldP using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.ldQ using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.sel using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.shrQ using BUF_X1.
Mapping port $paramod\booth_controller\size=s32'00000000000000000000000000010001.subsel using BUF_X1.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.M: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.Q: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.clk: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.clrP: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.ldM: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.ldP: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.ldQ: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.rst: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.sel: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.shrQ: Missing option -inpad.
Don't map input port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.subsel: Missing option -inpad.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.P using BUF_X1.
Mapping port $paramod\booth_datapath\size=s32'00000000000000000000000000010001.op using BUF_X1.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000100.in1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000100.in2: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000100.sel1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000100.sel2: Missing option -inpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000100.outMUX using BUF_X1.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000101.in1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000101.in2: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000101.sel1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000000101.sel2: Missing option -inpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000000101.outMUX using BUF_X1.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010000.in1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010000.in2: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010000.sel1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010000.sel2: Missing option -inpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010000.outMUX using BUF_X1.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010001.in1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010001.in2: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010001.sel1: Missing option -inpad.
Don't map input port $paramod\mux2to1\N=s32'00000000000000000000000000010001.sel2: Missing option -inpad.
Mapping port $paramod\mux2to1\N=s32'00000000000000000000000000010001.outMUX using BUF_X1.
Don't map input port $paramod\mux3to1\N=s32'00000000000000000000000000010000.in1: Missing option -inpad.
Don't map input port $paramod\mux3to1\N=s32'00000000000000000000000000010000.in2: Missing option -inpad.
Don't map input port $paramod\mux3to1\N=s32'00000000000000000000000000010000.in3: Missing option -inpad.
Don't map input port $paramod\mux3to1\N=s32'00000000000000000000000000010000.sel1: Missing option -inpad.
Don't map input port $paramod\mux3to1\N=s32'00000000000000000000000000010000.sel2: Missing option -inpad.
Don't map input port $paramod\mux3to1\N=s32'00000000000000000000000000010000.sel3: Missing option -inpad.
Mapping port $paramod\mux3to1\N=s32'00000000000000000000000000010000.outMUX using BUF_X1.
Don't map input port $paramod\shift_register\size=s32'00000000000000000000000000010010.clk: Missing option -inpad.
Don't map input port $paramod\shift_register\size=s32'00000000000000000000000000010010.in: Missing option -inpad.
Don't map input port $paramod\shift_register\size=s32'00000000000000000000000000010010.ldR: Missing option -inpad.
Don't map input port $paramod\shift_register\size=s32'00000000000000000000000000010010.rst: Missing option -inpad.
Don't map input port $paramod\shift_register\size=s32'00000000000000000000000000010010.seiR: Missing option -inpad.
Don't map input port $paramod\shift_register\size=s32'00000000000000000000000000010010.shrR: Missing option -inpad.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.out using BUF_X1.
Mapping port $paramod\shift_register\size=s32'00000000000000000000000000010010.seoR using BUF_X1.
Don't map input port ASU.arithADD: Missing option -inpad.
Don't map input port ASU.arithSUB: Missing option -inpad.
Don't map input port ASU.in1: Missing option -inpad.
Don't map input port ASU.in2: Missing option -inpad.
Mapping port ASU.outASU using BUF_X1.
Don't map input port CMP.in1: Missing option -inpad.
Don't map input port CMP.in2: Missing option -inpad.
Mapping port CMP.eq using BUF_X1.
Mapping port CMP.gt using BUF_X1.
Mapping port CMP.lt using BUF_X1.
Don't map input port Controller.FIB: Missing option -inpad.
Don't map input port Controller.clk: Missing option -inpad.
Don't map input port Controller.doneMDU: Missing option -inpad.
Don't map input port Controller.opcode: Missing option -inpad.
Don't map input port Controller.outFlag: Missing option -inpad.
Don't map input port Controller.readyMDU: Missing option -inpad.
Don't map input port Controller.readyMEM: Missing option -inpad.
Don't map input port Controller.rst: Missing option -inpad.
Mapping port Controller.SE5bits using BUF_X1.
Mapping port Controller.SE6bits using BUF_X1.
Mapping port Controller.SE8bits using BUF_X1.
Mapping port Controller.USE8bits using BUF_X1.
Mapping port Controller.arithADD using BUF_X1.
Mapping port Controller.arithDIV using BUF_X1.
Mapping port Controller.arithMUL using BUF_X1.
Mapping port Controller.arithSH using BUF_X1.
Mapping port Controller.arithSUB using BUF_X1.
Mapping port Controller.enFlag using BUF_X1.
Mapping port Controller.ldADR using BUF_X1.
Mapping port Controller.ldIR using BUF_X1.
Mapping port Controller.ldMDU1 using BUF_X1.
Mapping port Controller.ldMDU2 using BUF_X1.
Mapping port Controller.ldPC using BUF_X1.
Mapping port Controller.logicAND using BUF_X1.
Mapping port Controller.logicSH using BUF_X1.
Mapping port Controller.onesComp using BUF_X1.
Mapping port Controller.p1lowbits using BUF_X1.
Mapping port Controller.readIO using BUF_X1.
Mapping port Controller.readMEM using BUF_X1.
Mapping port Controller.selADR_MEM using BUF_X1.
Mapping port Controller.selASU_TRF using BUF_X1.
Mapping port Controller.selIMM_TRF using BUF_X1.
Mapping port Controller.selLLU_TRF using BUF_X1.
Mapping port Controller.selMDU1_TRF using BUF_X1.
Mapping port Controller.selMDU2_TRF using BUF_X1.
Mapping port Controller.selPC1_PC using BUF_X1.
Mapping port Controller.selPC1_TRF using BUF_X1.
Mapping port Controller.selPC_MEM using BUF_X1.
Mapping port Controller.selPCadd_PC using BUF_X1.
Mapping port Controller.selSHU_TRF using BUF_X1.
Mapping port Controller.seldatabus_TRF using BUF_X1.
Mapping port Controller.selimm_ASU using BUF_X1.
Mapping port Controller.selimm_PCP using BUF_X1.
Mapping port Controller.selp1_PC using BUF_X1.
Mapping port Controller.selp1_PCP using BUF_X1.
Mapping port Controller.selp2_ASU using BUF_X1.
Mapping port Controller.selp2_SHU using BUF_X1.
Mapping port Controller.selrd0_TRF using BUF_X1.
Mapping port Controller.selrd1_TRF using BUF_X1.
Mapping port Controller.selrd_1_TRF using BUF_X1.
Mapping port Controller.selrd_2_TRF using BUF_X1.
Mapping port Controller.selrs1_TRF using BUF_X1.
Mapping port Controller.selrs2_TRF using BUF_X1.
Mapping port Controller.selshim_SHU using BUF_X1.
Mapping port Controller.startMDU using BUF_X1.
Mapping port Controller.twosComp using BUF_X1.
Mapping port Controller.writeIO using BUF_X1.
Mapping port Controller.writeMEM using BUF_X1.
Mapping port Controller.writeTRF using BUF_X1.
Don't map input port DFF_E.clk: Missing option -inpad.
Don't map input port DFF_E.en: Missing option -inpad.
Don't map input port DFF_E.in: Missing option -inpad.
Don't map input port DFF_E.rst: Missing option -inpad.
Mapping port DFF_E.out using BUF_X1.
Don't map input port Datapath.SE5bits: Missing option -inpad.
Don't map input port Datapath.SE6bits: Missing option -inpad.
Don't map input port Datapath.SE8bits: Missing option -inpad.
Don't map input port Datapath.USE8bits: Missing option -inpad.
Don't map input port Datapath.arithADD: Missing option -inpad.
Don't map input port Datapath.arithDIV: Missing option -inpad.
Don't map input port Datapath.arithMUL: Missing option -inpad.
Don't map input port Datapath.arithSH: Missing option -inpad.
Don't map input port Datapath.arithSUB: Missing option -inpad.
Don't map input port Datapath.clk: Missing option -inpad.
Don't map input port Datapath.dataBusIn: Missing option -inpad.
Don't map input port Datapath.enFlag: Missing option -inpad.
Don't map input port Datapath.ldADR: Missing option -inpad.
Don't map input port Datapath.ldIR: Missing option -inpad.
Don't map input port Datapath.ldMDU1: Missing option -inpad.
Don't map input port Datapath.ldMDU2: Missing option -inpad.
Don't map input port Datapath.ldPC: Missing option -inpad.
Don't map input port Datapath.logicAND: Missing option -inpad.
Don't map input port Datapath.logicSH: Missing option -inpad.
Don't map input port Datapath.onesComp: Missing option -inpad.
Don't map input port Datapath.p1lowbits: Missing option -inpad.
Don't map input port Datapath.rst: Missing option -inpad.
Don't map input port Datapath.selADR_MEM: Missing option -inpad.
Don't map input port Datapath.selASU_TRF: Missing option -inpad.
Don't map input port Datapath.selIMM_TRF: Missing option -inpad.
Don't map input port Datapath.selLLU_TRF: Missing option -inpad.
Don't map input port Datapath.selMDU1_TRF: Missing option -inpad.
Don't map input port Datapath.selMDU2_TRF: Missing option -inpad.
Don't map input port Datapath.selPC1_PC: Missing option -inpad.
Don't map input port Datapath.selPC1_TRF: Missing option -inpad.
Don't map input port Datapath.selPC_MEM: Missing option -inpad.
Don't map input port Datapath.selPCadd_PC: Missing option -inpad.
Don't map input port Datapath.selSHU_TRF: Missing option -inpad.
Don't map input port Datapath.seldatabus_TRF: Missing option -inpad.
Don't map input port Datapath.selimm_ASU: Missing option -inpad.
Don't map input port Datapath.selimm_PCP: Missing option -inpad.
Don't map input port Datapath.selp1_PC: Missing option -inpad.
Don't map input port Datapath.selp1_PCP: Missing option -inpad.
Don't map input port Datapath.selp2_ASU: Missing option -inpad.
Don't map input port Datapath.selp2_SHU: Missing option -inpad.
Don't map input port Datapath.selrd0_TRF: Missing option -inpad.
Don't map input port Datapath.selrd1_TRF: Missing option -inpad.
Don't map input port Datapath.selrd_1_TRF: Missing option -inpad.
Don't map input port Datapath.selrd_2_TRF: Missing option -inpad.
Don't map input port Datapath.selrs1_TRF: Missing option -inpad.
Don't map input port Datapath.selrs2_TRF: Missing option -inpad.
Don't map input port Datapath.selshim_SHU: Missing option -inpad.
Don't map input port Datapath.startMDU: Missing option -inpad.
Don't map input port Datapath.twosComp: Missing option -inpad.
Don't map input port Datapath.writeTRF: Missing option -inpad.
Mapping port Datapath.addrBus using BUF_X1.
Mapping port Datapath.dataBusOut using BUF_X1.
Mapping port Datapath.doneMDU using BUF_X1.
Mapping port Datapath.eq using BUF_X1.
Mapping port Datapath.gt using BUF_X1.
Mapping port Datapath.instr using BUF_X1.
Mapping port Datapath.lt using BUF_X1.
Mapping port Datapath.outFlag using BUF_X1.
Mapping port Datapath.readyMDU using BUF_X1.
Don't map input port FA.A: Missing option -inpad.
Don't map input port FA.B: Missing option -inpad.
Don't map input port FA.Cin: Missing option -inpad.
Mapping port FA.Co using BUF_X1.
Mapping port FA.S using BUF_X1.
Don't map input port IMM.SE5bits: Missing option -inpad.
Don't map input port IMM.SE6bits: Missing option -inpad.
Don't map input port IMM.SE8bits: Missing option -inpad.
Don't map input port IMM.USE8bits: Missing option -inpad.
Don't map input port IMM.in1: Missing option -inpad.
Don't map input port IMM.in2: Missing option -inpad.
Don't map input port IMM.p1lowbits: Missing option -inpad.
Mapping port IMM.outIMM using BUF_X1.
Don't map input port LLU.in1: Missing option -inpad.
Don't map input port LLU.in2: Missing option -inpad.
Don't map input port LLU.logicAND: Missing option -inpad.
Don't map input port LLU.onescomp: Missing option -inpad.
Don't map input port LLU.twoscomp: Missing option -inpad.
Mapping port LLU.outLLU using BUF_X1.
Don't map input port MDU.arithDIV: Missing option -inpad.
Don't map input port MDU.arithMUL: Missing option -inpad.
Don't map input port MDU.clk: Missing option -inpad.
Don't map input port MDU.in1: Missing option -inpad.
Don't map input port MDU.in2: Missing option -inpad.
Don't map input port MDU.ldMDU1: Missing option -inpad.
Don't map input port MDU.ldMDU2: Missing option -inpad.
Don't map input port MDU.rst: Missing option -inpad.
Don't map input port MDU.startMDU: Missing option -inpad.
Mapping port MDU.doneMDU using BUF_X1.
Mapping port MDU.outMDU1 using BUF_X1.
Mapping port MDU.outMDU2 using BUF_X1.
Mapping port MDU.readyMDU using BUF_X1.
Don't map input port SAYAC.clk: Missing option -inpad.
Don't map input port SAYAC.dataBusIn: Missing option -inpad.
Don't map input port SAYAC.readyMEM: Missing option -inpad.
Don't map input port SAYAC.rst: Missing option -inpad.
Mapping port SAYAC.addrBus using BUF_X1.
Mapping port SAYAC.dataBusOut using BUF_X1.
Mapping port SAYAC.readMEM using BUF_X1.
Mapping port SAYAC.writeMEM using BUF_X1.
Don't map input port SHU.arithSH: Missing option -inpad.
Don't map input port SHU.in1: Missing option -inpad.
Don't map input port SHU.in2: Missing option -inpad.
Don't map input port SHU.logicSH: Missing option -inpad.
Mapping port SHU.outSHU using BUF_X1.
Don't map input port TRF.clk: Missing option -inpad.
Don't map input port TRF.enFlag: Missing option -inpad.
Don't map input port TRF.inFlag: Missing option -inpad.
Don't map input port TRF.rd: Missing option -inpad.
Don't map input port TRF.rs1: Missing option -inpad.
Don't map input port TRF.rs2: Missing option -inpad.
Don't map input port TRF.rst: Missing option -inpad.
Don't map input port TRF.writeRegFile: Missing option -inpad.
Don't map input port TRF.write_data: Missing option -inpad.
Mapping port TRF.outFlag using BUF_X1.
Mapping port TRF.p1 using BUF_X1.
Mapping port TRF.p2 using BUF_X1.
Don't map input port divider.Devidend: Missing option -inpad.
Don't map input port divider.Divisor: Missing option -inpad.
Don't map input port divider.clk: Missing option -inpad.
Don't map input port divider.rst: Missing option -inpad.
Don't map input port divider.start: Missing option -inpad.
Mapping port divider.Quotient using BUF_X1.
Mapping port divider.Remainder using BUF_X1.
Mapping port divider.done using BUF_X1.
Mapping port divider.ready using BUF_X1.
Don't map input port divider_CU.clk: Missing option -inpad.
Don't map input port divider_CU.rst: Missing option -inpad.
Don't map input port divider_CU.sign: Missing option -inpad.
Don't map input port divider_CU.start: Missing option -inpad.
Mapping port divider_CU.Q0 using BUF_X1.
Mapping port divider_CU.clr_R using BUF_X1.
Mapping port divider_CU.done using BUF_X1.
Mapping port divider_CU.load_M using BUF_X1.
Mapping port divider_CU.load_Q using BUF_X1.
Mapping port divider_CU.load_R using BUF_X1.
Mapping port divider_CU.ready using BUF_X1.
Mapping port divider_CU.setQ0 using BUF_X1.
Mapping port divider_CU.setR using BUF_X1.
Mapping port divider_CU.shift_Q using BUF_X1.
Mapping port divider_CU.shift_R using BUF_X1.
Don't map input port divider_DP.Devident: Missing option -inpad.
Don't map input port divider_DP.Divisor: Missing option -inpad.
Don't map input port divider_DP.Q0: Missing option -inpad.
Don't map input port divider_DP.clk: Missing option -inpad.
Don't map input port divider_DP.clr_R: Missing option -inpad.
Don't map input port divider_DP.load_M: Missing option -inpad.
Don't map input port divider_DP.load_Q: Missing option -inpad.
Don't map input port divider_DP.load_R: Missing option -inpad.
Don't map input port divider_DP.rst: Missing option -inpad.
Don't map input port divider_DP.setQ0: Missing option -inpad.
Don't map input port divider_DP.setR: Missing option -inpad.
Don't map input port divider_DP.shift_Q: Missing option -inpad.
Don't map input port divider_DP.shift_R: Missing option -inpad.
Mapping port divider_DP.Quotient using BUF_X1.
Mapping port divider_DP.Remainder using BUF_X1.
Mapping port divider_DP.sign using BUF_X1.
Don't map input port mux8to1.d1: Missing option -inpad.
Don't map input port mux8to1.d2: Missing option -inpad.
Don't map input port mux8to1.d3: Missing option -inpad.
Don't map input port mux8to1.d4: Missing option -inpad.
Don't map input port mux8to1.d5: Missing option -inpad.
Don't map input port mux8to1.d6: Missing option -inpad.
Don't map input port mux8to1.d7: Missing option -inpad.
Don't map input port mux8to1.d8: Missing option -inpad.
Don't map input port mux8to1.sel: Missing option -inpad.
Mapping port mux8to1.dout using BUF_X1.
Don't map input port shiftReg_17b.Ld: Missing option -inpad.
Don't map input port shiftReg_17b.clk: Missing option -inpad.
Don't map input port shiftReg_17b.dataIn: Missing option -inpad.
Don't map input port shiftReg_17b.init: Missing option -inpad.
Don't map input port shiftReg_17b.rst: Missing option -inpad.
Don't map input port shiftReg_17b.serIn: Missing option -inpad.
Don't map input port shiftReg_17b.sh_L_en: Missing option -inpad.
Mapping port shiftReg_17b.dataOut using BUF_X1.
Mapping port shiftReg_17b.serOut using BUF_X1.

35. Executing Verilog backend.

35.1. Executing BMUXMAP pass.

35.2. Executing DEMUXMAP pass.
Dumping module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Dumping module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Dumping module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Dumping module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Dumping module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Dumping module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Dumping module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Dumping module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Dumping module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Dumping module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Dumping module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Dumping module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Dumping module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Dumping module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Dumping module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Dumping module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Dumping module `\ASU'.
Dumping module `\CMP'.
Dumping module `\Controller'.
Dumping module `\DFF_E'.
Dumping module `\Datapath'.
Dumping module `\FA'.
Dumping module `\IMM'.
Dumping module `\LLU'.
Dumping module `\MDU'.
Dumping module `\SAYAC'.
Dumping module `\SHU'.
Dumping module `\TRF'.
Dumping module `\divider'.
Dumping module `\divider_CU'.
Dumping module `\divider_DP'.
Dumping module `\mux8to1'.
Dumping module `\shiftReg_17b'.

36. Executing BLIF backend.

37. Executing JSON backend.

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

38.6. Executing OPT_DFF pass (perform DFF optimizations).

38.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..
Removed 0 unused cells and 13 unused wires.
<suppressed ~5 debug messages>

38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

38.9. Rerunning OPT passes. (Maybe there is more to do..)

38.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Counter\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\REG\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder1\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\shift_register\size=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ASU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \CMP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DFF_E..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LLU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \MDU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SAYAC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \SHU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TRF..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_CU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \divider_DP..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8to1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shiftReg_17b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

38.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Counter\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\REG\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder1\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\adder\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
  Optimizing cells in module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\shift_register\size=s32'00000000000000000000000000010010.
  Optimizing cells in module \ASU.
  Optimizing cells in module \CMP.
  Optimizing cells in module \Controller.
  Optimizing cells in module \DFF_E.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \FA.
  Optimizing cells in module \IMM.
  Optimizing cells in module \LLU.
  Optimizing cells in module \MDU.
  Optimizing cells in module \SAYAC.
  Optimizing cells in module \SHU.
  Optimizing cells in module \TRF.
  Optimizing cells in module \divider.
  Optimizing cells in module \divider_CU.
  Optimizing cells in module \divider_DP.
  Optimizing cells in module \mux8to1.
  Optimizing cells in module \shiftReg_17b.
Performed a total of 0 changes.

38.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Counter\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\REG\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder1\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\adder\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\adder_subtractor\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_controller\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\booth_datapath\size=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000000101'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\mux2to1\N=s32'00000000000000000000000000010001'.
Finding identical cells in module `$paramod\mux3to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\shift_register\size=s32'00000000000000000000000000010010'.
Finding identical cells in module `\ASU'.
Finding identical cells in module `\CMP'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\DFF_E'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\FA'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\LLU'.
Finding identical cells in module `\MDU'.
Finding identical cells in module `\SAYAC'.
Finding identical cells in module `\SHU'.
Finding identical cells in module `\TRF'.
Finding identical cells in module `\divider'.
Finding identical cells in module `\divider_CU'.
Finding identical cells in module `\divider_DP'.
Finding identical cells in module `\mux8to1'.
Finding identical cells in module `\shiftReg_17b'.
Removed a total of 0 cells.

38.13. Executing OPT_DFF pass (perform DFF optimizations).

38.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

38.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Counter\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\REG\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder1\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010000.
Optimizing module $paramod\adder\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_controller\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\booth_datapath\size=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000000101.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\mux2to1\N=s32'00000000000000000000000000010001.
Optimizing module $paramod\mux3to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\shift_register\size=s32'00000000000000000000000000010010.
Optimizing module ASU.
Optimizing module CMP.
Optimizing module Controller.
Optimizing module DFF_E.
Optimizing module Datapath.
Optimizing module FA.
Optimizing module IMM.
Optimizing module LLU.
Optimizing module MDU.
Optimizing module SAYAC.
Optimizing module SHU.
Optimizing module TRF.
Optimizing module divider.
Optimizing module divider_CU.
Optimizing module divider_DP.
Optimizing module mux8to1.
Optimizing module shiftReg_17b.

38.16. Finished OPT passes. (There is nothing left to do.)

39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Counter\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\REG\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder1\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\adder\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\adder_subtractor\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_controller\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\booth_datapath\size=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000000101..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\mux2to1\N=s32'00000000000000000000000000010001..
Finding unused cells or wires in module $paramod\mux3to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\shift_register\size=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \ASU..
Finding unused cells or wires in module \CMP..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \DFF_E..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \FA..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \LLU..
Finding unused cells or wires in module \MDU..
Finding unused cells or wires in module \SAYAC..
Finding unused cells or wires in module \SHU..
Finding unused cells or wires in module \TRF..
Finding unused cells or wires in module \divider..
Finding unused cells or wires in module \divider_CU..
Finding unused cells or wires in module \divider_DP..
Finding unused cells or wires in module \mux8to1..
Finding unused cells or wires in module \shiftReg_17b..

40. Printing statistics.

=== $paramod\Counter\N=s32'00000000000000000000000000000101 ===

   Number of wires:                 64
   Number of wire bits:             80
   Number of public wires:           7
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 71
     BUF_X1                         15
     DFF_PP0                         5
     NAND                           15
     NOR                            24
     NOT                            12

=== $paramod\REG\N=s32'00000000000000000000000000010000 ===

   Number of wires:                 59
   Number of wire bits:            119
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     BUF_X1                         35
     DFF_PP0                        16
     NOR                            48
     NOT                             1

=== $paramod\REG\N=s32'00000000000000000000000000010001 ===

   Number of wires:                 62
   Number of wire bits:            126
   Number of public wires:           5
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                106
     BUF_X1                         37
     DFF_PP0                        17
     NOR                            51
     NOT                             1

=== $paramod\adder1\size=s32'00000000000000000000000000010000 ===

   Number of wires:                 25
   Number of wire bits:            115
   Number of public wires:          20
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 66
     BUF_X1                         50
     FA                             16

=== $paramod\adder\size=s32'00000000000000000000000000010000 ===

   Number of wires:                212
   Number of wire bits:            302
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                269
     BUF_X1                         50
     NAND                           40
     NOR                           123
     NOT                            56

=== $paramod\adder\size=s32'00000000000000000000000000010001 ===

   Number of wires:                225
   Number of wire bits:            321
   Number of public wires:           5
   Number of public wire bits:      53
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                286
     BUF_X1                         53
     NAND                           43
     NOR                           130
     NOT                            60

=== $paramod\adder_subtractor\size=s32'00000000000000000000000000010001 ===

   Number of wires:                 79
   Number of wire bits:            175
   Number of public wires:          22
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                123
     $paramod\adder\size=s32'00000000000000000000000000010001      1
     BUF_X1                         53
     NOR                            51
     NOT                            18

=== $paramod\booth\size=s32'00000000000000000000000000010001 ===

   Number of wires:                 25
   Number of wire bits:            155
   Number of public wires:          17
   Number of public wire bits:      82
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $paramod\booth_controller\size=s32'00000000000000000000000000010001      1
     $paramod\booth_datapath\size=s32'00000000000000000000000000010001      1
     BUF_X1                         73

=== $paramod\booth_controller\size=s32'00000000000000000000000000010001 ===

   Number of wires:                104
   Number of wire bits:            106
   Number of public wires:          26
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $_DLATCH_N_                     3
     BUF_X1                         14
     DFF_PP0                         9
     NAND                           25
     NOR                            32
     NOT                            18

=== $paramod\booth_datapath\size=s32'00000000000000000000000000010001 ===

   Number of wires:                114
   Number of wire bits:            246
   Number of public wires:          66
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                135
     $paramod\REG\N=s32'00000000000000000000000000010001      2
     $paramod\adder_subtractor\size=s32'00000000000000000000000000010001      1
     $paramod\shift_register\size=s32'00000000000000000000000000010010      1
     BUF_X1                         79
     NOR                            51
     NOT                             1

=== $paramod\mux2to1\N=s32'00000000000000000000000000000100 ===

   Number of wires:                 20
   Number of wire bits:             38
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     BUF_X1                         14
     NAND                           12
     NOR                             1
     NOT                             1

=== $paramod\mux2to1\N=s32'00000000000000000000000000000101 ===

   Number of wires:                 22
   Number of wire bits:             46
   Number of public wires:           5
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     BUF_X1                         17
     NAND                           15
     NOR                             1
     NOT                             1

=== $paramod\mux2to1\N=s32'00000000000000000000000000010000 ===

   Number of wires:                 44
   Number of wire bits:            134
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     BUF_X1                         50
     NAND                           48
     NOR                             1
     NOT                             1

=== $paramod\mux2to1\N=s32'00000000000000000000000000010001 ===

   Number of wires:                 46
   Number of wire bits:            142
   Number of public wires:           5
   Number of public wire bits:      53
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                106
     BUF_X1                         53
     NAND                           51
     NOR                             1
     NOT                             1

=== $paramod\mux3to1\N=s32'00000000000000000000000000010000 ===

   Number of wires:                111
   Number of wire bits:            231
   Number of public wires:           7
   Number of public wire bits:      67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                180
     BUF_X1                         67
     NAND                           48
     NOR                            64
     NOT                             1

=== $paramod\shift_register\size=s32'00000000000000000000000000010010 ===

   Number of wires:                149
   Number of wire bits:            200
   Number of public wires:          26
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                177
     BUF_X1                         42
     DFF                             1
     DFF_PP0                        18
     NAND                            1
     NOR                           112
     NOT                             3

=== ASU ===

   Number of wires:                155
   Number of wire bits:            245
   Number of public wires:          39
   Number of public wire bits:      84
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                179
     $paramod\adder1\size=s32'00000000000000000000000000010000      2
     BUF_X1                         50
     NAND                           60
     NOR                            45
     NOT                            22

=== CMP ===

   Number of wires:                138
   Number of wire bits:            198
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                166
     BUF_X1                         35
     NAND                           47
     NOR                            47
     NOT                            37

=== Controller ===

   Number of wires:                377
   Number of wire bits:            413
   Number of public wires:          63
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                387
     $_DLATCH_N_                     2
     BUF_X1                         77
     DFF_PP0                         2
     NAND                          114
     NOR                           136
     NOT                            56

=== DFF_E ===

   Number of wires:                 14
   Number of wire bits:             14
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     BUF_X1                          5
     DFF_PP0                         1
     NOR                             3
     NOT                             1

=== Datapath ===

   Number of wires:                392
   Number of wire bits:            526
   Number of public wires:         322
   Number of public wire bits:     389
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                162
     $paramod\REG\N=s32'00000000000000000000000000010000      3
     $paramod\adder\size=s32'00000000000000000000000000010000      2
     $paramod\mux2to1\N=s32'00000000000000000000000000000100      3
     $paramod\mux2to1\N=s32'00000000000000000000000000000101      1
     $paramod\mux2to1\N=s32'00000000000000000000000000010000      3
     $paramod\mux3to1\N=s32'00000000000000000000000000010000      1
     ASU                             1
     BUF_X1                        126
     CMP                             1
     IMM                             1
     LLU                             1
     MDU                             1
     NAND                            5
     NOR                             6
     NOT                             4
     SHU                             1
     TRF                             1
     mux8to1                         1

=== FA ===

   Number of wires:                 22
   Number of wire bits:             22
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 19
     BUF_X1                          5
     NAND                            5
     NOR                             6
     NOT                             3

=== IMM ===

   Number of wires:                 96
   Number of wire bits:            154
   Number of public wires:           8
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     BUF_X1                         37
     NAND                           53
     NOR                            24
     NOT                            19

=== LLU ===

   Number of wires:                171
   Number of wire bits:            261
   Number of public wires:           6
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                226
     BUF_X1                         51
     NAND                           85
     NOR                            65
     NOT                            25

=== MDU ===

   Number of wires:                200
   Number of wire bits:            320
   Number of public wires:         117
   Number of public wire bits:     177
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                181
     $paramod\REG\N=s32'00000000000000000000000000010000      2
     $paramod\booth\size=s32'00000000000000000000000000010001      1
     BUF_X1                         73
     NAND                          102
     NOR                             1
     NOT                             1
     divider                         1

=== SAYAC ===

   Number of wires:                 94
   Number of wire bits:            184
   Number of public wires:          86
   Number of public wire bits:     131
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     BUF_X1                         53
     Controller                      1
     Datapath                        1

=== SHU ===

   Number of wires:                423
   Number of wire bits:            491
   Number of public wires:           5
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                468
     BUF_X1                         39
     NAND                          233
     NOR                           138
     NOT                            58

=== TRF ===

   Number of wires:               2666
   Number of wire bits:           2802
   Number of public wires:         268
   Number of public wire bits:     336
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2762
     BUF_X1                         80
     DFF                           256
     DFF_E                           8
     NAND                         1275
     NOR                           954
     NOT                           189

=== divider ===

   Number of wires:                 28
   Number of wire bits:            156
   Number of public wires:          19
   Number of public wire bits:      83
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     BUF_X1                         73
     divider_CU                      1
     divider_DP                      1

=== divider_CU ===

   Number of wires:                 58
   Number of wire bits:             58
   Number of public wires:          27
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 49
     $_DLATCH_N_                     3
     $paramod\Counter\N=s32'00000000000000000000000000000101      1
     BUF_X1                         15
     DFF_PP0                         3
     NAND                           10
     NOR                             8
     NOT                             9

=== divider_DP ===

   Number of wires:                333
   Number of wire bits:            461
   Number of public wires:          87
   Number of public wire bits:     151
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                334
     $paramod\REG\N=s32'00000000000000000000000000010001      1
     $paramod\mux2to1\N=s32'00000000000000000000000000010001      2
     BUF_X1                         80
     NAND                           52
     NOR                           130
     NOT                            67
     shiftReg_17b                    2

=== mux8to1 ===

   Number of wires:                282
   Number of wire bits:            566
   Number of public wires:          10
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                430
     BUF_X1                        152
     NAND                          218
     NOR                            52
     NOT                             8

=== shiftReg_17b ===

   Number of wires:                125
   Number of wire bits:            189
   Number of public wires:           9
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                166
     BUF_X1                         41
     DFF_PP0                        17
     NAND                          103
     NOR                             3
     NOT                             2

=== design hierarchy ===

   SAYAC                             1
     Controller                      1
     Datapath                        1
       $paramod\REG\N=s32'00000000000000000000000000010000      3
       $paramod\adder\size=s32'00000000000000000000000000010000      2
       $paramod\mux2to1\N=s32'00000000000000000000000000000100      3
       $paramod\mux2to1\N=s32'00000000000000000000000000000101      1
       $paramod\mux2to1\N=s32'00000000000000000000000000010000      3
       $paramod\mux3to1\N=s32'00000000000000000000000000010000      1
       ASU                           1
         $paramod\adder1\size=s32'00000000000000000000000000010000      2
           FA                       16
       CMP                           1
       IMM                           1
       LLU                           1
       MDU                           1
         $paramod\REG\N=s32'00000000000000000000000000010000      2
         $paramod\booth\size=s32'00000000000000000000000000010001      1
           $paramod\booth_controller\size=s32'00000000000000000000000000010001      1
           $paramod\booth_datapath\size=s32'00000000000000000000000000010001      1
             $paramod\REG\N=s32'00000000000000000000000000010001      2
             $paramod\adder_subtractor\size=s32'00000000000000000000000000010001      1
               $paramod\adder\size=s32'00000000000000000000000000010001      1
             $paramod\shift_register\size=s32'00000000000000000000000000010010      1
         divider                     1
           divider_CU                1
             $paramod\Counter\N=s32'00000000000000000000000000000101      1
           divider_DP                1
             $paramod\REG\N=s32'00000000000000000000000000010001      1
             $paramod\mux2to1\N=s32'00000000000000000000000000010001      2
             shiftReg_17b            2
       SHU                           1
       TRF                           1
         DFF_E                       8
       mux8to1                       1

   Number of wires:               8611
   Number of wire bits:          12196
   Number of public wires:        1591
   Number of public wire bits:    3392
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               9809
     $_DLATCH_N_                     8
     BUF_X1                       2420
     DFF                           257
     DFF_PP0                       210
     NAND                         3129
     NOR                          2940
     NOT                           845


yosys> exit
End of script. Logfile hash: e44fdd91e5, CPU: user 6.44s system 0.30s
Yosys 0.36 (git sha1 8f07a0d8404, clang 15.0.0 -fPIC -Os)
Time spent: 52% 3x abc (6 sec), 10% 53x opt_expr (1 sec), ...
ebinouri@Ebis-MBP Omid-sayac-bench % 
