
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )


-- Executing script file `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/C432/tech/yosys_script.ys' --

1. Executing Liberty frontend.
Imported 134 cell types from liberty file.

2. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/C432/Circuit432synth.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/C432/Circuit432synth.v' to AST representation.
Generating RTLIL representation for module `\PriorityA'.
Generating RTLIL representation for module `\PriorityB'.
Generating RTLIL representation for module `\PriorityC'.
Generating RTLIL representation for module `\EncodeChan'.
Generating RTLIL representation for module `\DecodeChan'.
Generating RTLIL representation for module `\TopLevel432b'.
Generating RTLIL representation for module `\Circuit432'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Finding top of design hierarchy..
root of   3 design levels: Circuit432          
root of   2 design levels: TopLevel432b        
root of   1 design levels: DecodeChan          
root of   1 design levels: EncodeChan          
root of   1 design levels: PriorityC           
root of   1 design levels: PriorityB           
root of   1 design levels: PriorityA           
Automatically selected Circuit432 as design top module.

3.1.2. Analyzing design hierarchy..
Top module:  \Circuit432
Used module:     \TopLevel432b
Used module:         \DecodeChan
Used module:         \EncodeChan
Used module:         \PriorityC
Used module:         \PriorityB
Used module:         \PriorityA

3.1.3. Analyzing design hierarchy..
Top module:  \Circuit432
Used module:     \TopLevel432b
Used module:         \DecodeChan
Used module:         \EncodeChan
Used module:         \PriorityC
Used module:         \PriorityB
Used module:         \PriorityA
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module TopLevel432b.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityC.
Optimizing module PriorityB.
Optimizing module PriorityA.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module TopLevel432b.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityC.
Optimizing module PriorityB.
Optimizing module PriorityA.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \TopLevel432b..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityA..

3.5. Executing CHECK pass (checking for obvious problems).
Checking module Circuit432...
Checking module DecodeChan...
Checking module EncodeChan...
Checking module PriorityA...
Checking module PriorityB...
Checking module PriorityC...
Checking module TopLevel432b...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Circuit432..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DecodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \EncodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityB..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TopLevel432b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Circuit432.
  Optimizing cells in module \DecodeChan.
  Optimizing cells in module \EncodeChan.
  Optimizing cells in module \PriorityA.
  Optimizing cells in module \PriorityB.
  Optimizing cells in module \PriorityC.
  Optimizing cells in module \TopLevel432b.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Circuit432..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DecodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \EncodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityB..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TopLevel432b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Circuit432.
  Optimizing cells in module \DecodeChan.
  Optimizing cells in module \EncodeChan.
  Optimizing cells in module \PriorityA.
  Optimizing cells in module \PriorityB.
  Optimizing cells in module \PriorityC.
  Optimizing cells in module \TopLevel432b.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.8.9. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Circuit432:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module DecodeChan:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module EncodeChan:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module PriorityA:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module PriorityB:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module PriorityC:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module TopLevel432b:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Circuit432..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DecodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \EncodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityB..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TopLevel432b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Circuit432.
  Optimizing cells in module \DecodeChan.
  Optimizing cells in module \EncodeChan.
  Optimizing cells in module \PriorityA.
  Optimizing cells in module \PriorityB.
  Optimizing cells in module \PriorityC.
  Optimizing cells in module \TopLevel432b.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Circuit432..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DecodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \EncodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityB..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TopLevel432b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Circuit432.
  Optimizing cells in module \DecodeChan.
  Optimizing cells in module \EncodeChan.
  Optimizing cells in module \PriorityA.
  Optimizing cells in module \PriorityB.
  Optimizing cells in module \PriorityC.
  Optimizing cells in module \TopLevel432b.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/OpenSourceTools/fpga-toolchain/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~69 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\Circuit432' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `\DecodeChan' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.3. Extracting gate netlist of module `\EncodeChan' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.4. Extracting gate netlist of module `\PriorityA' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.5. Extracting gate netlist of module `\PriorityB' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.6. Extracting gate netlist of module `\PriorityC' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.7. Extracting gate netlist of module `\TopLevel432b' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \Circuit432
Used module:     \TopLevel432b
Used module:         \PriorityA
Used module:         \PriorityB
Used module:         \PriorityC
Used module:         \EncodeChan
Used module:         \DecodeChan

3.24.2. Analyzing design hierarchy..
Top module:  \Circuit432
Used module:     \TopLevel432b
Used module:         \PriorityA
Used module:         \PriorityB
Used module:         \PriorityC
Used module:         \EncodeChan
Used module:         \DecodeChan
Removed 0 unused modules.

3.25. Printing statistics.

=== Circuit432 ===

   Number of wires:                 43
   Number of wire bits:             43
   Number of public wires:          43
   Number of public wire bits:      43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     TopLevel432b                    1

=== DecodeChan ===

   Number of wires:                 11
   Number of wire bits:             22
   Number of public wires:          11
   Number of public wire bits:      22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     AND2_X1                         1
     AOI221_X1                       1
     INV_X1                          5
     NAND2_X1                        1
     NAND3_X1                        2
     NAND4_X1                        1
     OAI21_X1                        1
     OR4_X1                          1

=== EncodeChan ===

   Number of wires:                 26
   Number of wire bits:             66
   Number of public wires:          26
   Number of public wire bits:      66
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     AOI22_X1                        9
     NAND2_X1                        9
     NAND3_X1                        9

=== PriorityA ===

   Number of wires:                 19
   Number of wire bits:             43
   Number of public wires:          19
   Number of public wire bits:      43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     INV_X1                         11
     OAI21_X1                        9
     OAI221_X1                       2
     OAI222_X1                       1
     OAI22_X1                        1
     OR2_X1                          1

=== PriorityB ===

   Number of wires:                 25
   Number of wire bits:             57
   Number of public wires:          25
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     AND3_X1                         1
     AND4_X1                         1
     INV_X1                          9
     NAND2_X1                        9
     NAND3_X1                        9
     NAND4_X1                        1

=== PriorityC ===

   Number of wires:                 25
   Number of wire bits:             57
   Number of public wires:          25
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     AND3_X1                         1
     AND4_X1                         1
     INV_X1                          9
     NAND4_X1                       10

=== TopLevel432b ===

   Number of wires:                 11
   Number of wire bits:             70
   Number of public wires:          11
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     DecodeChan                      1
     EncodeChan                      1
     PriorityA                       1
     PriorityB                       1
     PriorityC                       1

=== design hierarchy ===

   Circuit432                        1
     TopLevel432b                    1
       DecodeChan                    1
       EncodeChan                    1
       PriorityA                     1
       PriorityB                     1
       PriorityC                     1

   Number of wires:                160
   Number of wire bits:            358
   Number of public wires:         160
   Number of public wire bits:     358
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     AND2_X1                         1
     AND3_X1                         2
     AND4_X1                         2
     AOI221_X1                       1
     AOI22_X1                        9
     INV_X1                         34
     NAND2_X1                       19
     NAND3_X1                       20
     NAND4_X1                       12
     OAI21_X1                       10
     OAI221_X1                       2
     OAI222_X1                       1
     OAI22_X1                        1
     OR2_X1                          1
     OR4_X1                          1

3.26. Executing CHECK pass (checking for obvious problems).
Checking module Circuit432...
Checking module DecodeChan...
Checking module EncodeChan...
Checking module PriorityA...
Checking module PriorityB...
Checking module PriorityC...
Checking module TopLevel432b...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\Circuit432':
Mapping DFF cells in module `\DecodeChan':
Mapping DFF cells in module `\EncodeChan':
Mapping DFF cells in module `\PriorityA':
Mapping DFF cells in module `\PriorityB':
Mapping DFF cells in module `\PriorityC':
Mapping DFF cells in module `\TopLevel432b':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Circuit432..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DecodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \EncodeChan..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityB..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \PriorityC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TopLevel432b..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Circuit432.
  Optimizing cells in module \DecodeChan.
  Optimizing cells in module \EncodeChan.
  Optimizing cells in module \PriorityA.
  Optimizing cells in module \PriorityB.
  Optimizing cells in module \PriorityC.
  Optimizing cells in module \TopLevel432b.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Finding identical cells in module `\DecodeChan'.
Finding identical cells in module `\EncodeChan'.
Finding identical cells in module `\PriorityA'.
Finding identical cells in module `\PriorityB'.
Finding identical cells in module `\PriorityC'.
Finding identical cells in module `\TopLevel432b'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..
Finding unused cells or wires in module \DecodeChan..
Finding unused cells or wires in module \EncodeChan..
Finding unused cells or wires in module \PriorityA..
Finding unused cells or wires in module \PriorityB..
Finding unused cells or wires in module \PriorityC..
Finding unused cells or wires in module \TopLevel432b..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.
Optimizing module DecodeChan.
Optimizing module EncodeChan.
Optimizing module PriorityA.
Optimizing module PriorityB.
Optimizing module PriorityC.
Optimizing module TopLevel432b.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\Circuit432' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.2. Extracting gate netlist of module `\DecodeChan' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.3. Extracting gate netlist of module `\EncodeChan' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.4. Extracting gate netlist of module `\PriorityA' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.5. Extracting gate netlist of module `\PriorityB' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.6. Extracting gate netlist of module `\PriorityC' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.7. Extracting gate netlist of module `\TopLevel432b' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Deleting now unused module DecodeChan.
Deleting now unused module EncodeChan.
Deleting now unused module PriorityA.
Deleting now unused module PriorityB.
Deleting now unused module PriorityC.
Deleting now unused module TopLevel432b.
<suppressed ~6 debug messages>

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 32 unused wires.

9. Executing HILOMAP pass (mapping to constant drivers).

10. Executing HILOMAP pass (mapping to constant drivers).

11. Executing SPLITNETS pass (splitting up multi-bit signals).

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Circuit432..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Circuit432.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Circuit432'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Circuit432..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Circuit432.

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing Verilog backend.
Dumping module `\Circuit432'.

14. Executing BLIF backend.

15. Executing JSON backend.

16. Printing statistics.

=== Circuit432 ===

   Number of wires:                152
   Number of wire bits:            152
   Number of public wires:         152
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     AND2_X1                         1
     AND3_X1                         2
     AND4_X1                         2
     AOI221_X1                       1
     AOI22_X1                        9
     INV_X1                         34
     NAND2_X1                       19
     NAND3_X1                       20
     NAND4_X1                       12
     OAI21_X1                       10
     OAI221_X1                       2
     OAI222_X1                       1
     OAI22_X1                        1
     OR2_X1                          1
     OR4_X1                          1

Warnings: 8 unique messages, 72 total
End of script. Logfile hash: c5c218e30f, CPU: user 3.14s system 0.07s
Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )
Time spent: 14% 9x opt_dff (0 sec), 13% 17x opt_expr (0 sec), ...
