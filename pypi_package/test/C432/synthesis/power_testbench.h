#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <math.h>
#include "systemc.h"
#include "power_netlist.h"
#include "utilities.h"
#include "power_analysis.h"


using namespace sc_core;

SC_MODULE( testbench ) {

    sc_signal_pw<sc_logic> in4 = sc_signal_pw<sc_logic>("in4");
    sc_signal_pw<sc_logic> in17 = sc_signal_pw<sc_logic>("in17");
    sc_signal_pw<sc_logic> in30 = sc_signal_pw<sc_logic>("in30");
    sc_signal_pw<sc_logic> in43 = sc_signal_pw<sc_logic>("in43");
    sc_signal_pw<sc_logic> in56 = sc_signal_pw<sc_logic>("in56");
    sc_signal_pw<sc_logic> in69 = sc_signal_pw<sc_logic>("in69");
    sc_signal_pw<sc_logic> in82 = sc_signal_pw<sc_logic>("in82");
    sc_signal_pw<sc_logic> in95 = sc_signal_pw<sc_logic>("in95");
    sc_signal_pw<sc_logic> in108 = sc_signal_pw<sc_logic>("in108");
    sc_signal_pw<sc_logic> in1 = sc_signal_pw<sc_logic>("in1");
    sc_signal_pw<sc_logic> in11 = sc_signal_pw<sc_logic>("in11");
    sc_signal_pw<sc_logic> in24 = sc_signal_pw<sc_logic>("in24");
    sc_signal_pw<sc_logic> in37 = sc_signal_pw<sc_logic>("in37");
    sc_signal_pw<sc_logic> in50 = sc_signal_pw<sc_logic>("in50");
    sc_signal_pw<sc_logic> in63 = sc_signal_pw<sc_logic>("in63");
    sc_signal_pw<sc_logic> in76 = sc_signal_pw<sc_logic>("in76");
    sc_signal_pw<sc_logic> in89 = sc_signal_pw<sc_logic>("in89");
    sc_signal_pw<sc_logic> in102 = sc_signal_pw<sc_logic>("in102");
    sc_signal_pw<sc_logic> in8 = sc_signal_pw<sc_logic>("in8");
    sc_signal_pw<sc_logic> in21 = sc_signal_pw<sc_logic>("in21");
    sc_signal_pw<sc_logic> in34 = sc_signal_pw<sc_logic>("in34");
    sc_signal_pw<sc_logic> in47 = sc_signal_pw<sc_logic>("in47");
    sc_signal_pw<sc_logic> in60 = sc_signal_pw<sc_logic>("in60");
    sc_signal_pw<sc_logic> in73 = sc_signal_pw<sc_logic>("in73");
    sc_signal_pw<sc_logic> in86 = sc_signal_pw<sc_logic>("in86");
    sc_signal_pw<sc_logic> in99 = sc_signal_pw<sc_logic>("in99");
    sc_signal_pw<sc_logic> in112 = sc_signal_pw<sc_logic>("in112");
    sc_signal_pw<sc_logic> in14 = sc_signal_pw<sc_logic>("in14");
    sc_signal_pw<sc_logic> in27 = sc_signal_pw<sc_logic>("in27");
    sc_signal_pw<sc_logic> in40 = sc_signal_pw<sc_logic>("in40");
    sc_signal_pw<sc_logic> in53 = sc_signal_pw<sc_logic>("in53");
    sc_signal_pw<sc_logic> in66 = sc_signal_pw<sc_logic>("in66");
    sc_signal_pw<sc_logic> in79 = sc_signal_pw<sc_logic>("in79");
    sc_signal_pw<sc_logic> in92 = sc_signal_pw<sc_logic>("in92");
    sc_signal_pw<sc_logic> in105 = sc_signal_pw<sc_logic>("in105");
    sc_signal_pw<sc_logic> in115 = sc_signal_pw<sc_logic>("in115");
    sc_signal_pw<sc_logic> out223 = sc_signal_pw<sc_logic>("out223");
    sc_signal_pw<sc_logic> out329 = sc_signal_pw<sc_logic>("out329");
    sc_signal_pw<sc_logic> out370 = sc_signal_pw<sc_logic>("out370");
    sc_signal_pw<sc_logic> out421 = sc_signal_pw<sc_logic>("out421");
    sc_signal_pw<sc_logic> out430 = sc_signal_pw<sc_logic>("out430");
    sc_signal_pw<sc_logic> out431 = sc_signal_pw<sc_logic>("out431");
    sc_signal_pw<sc_logic> out432 = sc_signal_pw<sc_logic>("out432");
    sc_event ready2update;
    sc_event ready2reset;

    Circuit432* cut;
    power_analysis* power_module;
    std::array<sc_signal_pw<sc_logic>*, 152> signal_arr;

    SC_HAS_PROCESS(testbench);
    testbench(sc_module_name _name){
        power_module = new power_analysis();
            power_module->read_gate_prop_json("gate_properties.json");
            power_module->read_gate_signal_json("gate_signal_json_file.json", "gate_properties.json");
            power_module->tech_parameter_json("45nm_timing_power.json");
            power_module->read_net_cap_json("gate_cap.json");
        cut = new Circuit432("cut");
            cut->in4(in4);
            cut->in17(in17);
            cut->in30(in30);
            cut->in43(in43);
            cut->in56(in56);
            cut->in69(in69);
            cut->in82(in82);
            cut->in95(in95);
            cut->in108(in108);
            cut->in1(in1);
            cut->in11(in11);
            cut->in24(in24);
            cut->in37(in37);
            cut->in50(in50);
            cut->in63(in63);
            cut->in76(in76);
            cut->in89(in89);
            cut->in102(in102);
            cut->in8(in8);
            cut->in21(in21);
            cut->in34(in34);
            cut->in47(in47);
            cut->in60(in60);
            cut->in73(in73);
            cut->in86(in86);
            cut->in99(in99);
            cut->in112(in112);
            cut->in14(in14);
            cut->in27(in27);
            cut->in40(in40);
            cut->in53(in53);
            cut->in66(in66);
            cut->in79(in79);
            cut->in92(in92);
            cut->in105(in105);
            cut->in115(in115);
            cut->out223(out223);
            cut->out329(out329);
            cut->out370(out370);
            cut->out421(out421);
            cut->out430(out430);
            cut->out431(out431);
            cut->out432(out432);

        SC_THREAD(signaling);

        SC_METHOD(power_on_cycle);
            sensitive << ready2update;
            dont_initialize();

        access_signals();


    }

    void signaling(void){
        wait(SC_ZERO_TIME);
        reset_togglings();
        wait(10, SC_NS);
        in4.write(SC_LOGIC_1);
        in17.write(SC_LOGIC_1);
        in30.write(SC_LOGIC_1);
        in43.write(SC_LOGIC_1);
        in56.write(SC_LOGIC_1);
        in69.write(SC_LOGIC_1);
        in82.write(SC_LOGIC_1);
        in95.write(SC_LOGIC_1);
        in108.write(SC_LOGIC_1);
        in1.write(SC_LOGIC_1);
        in11.write(SC_LOGIC_1);
        in24.write(SC_LOGIC_1);
        in37.write(SC_LOGIC_1);
        in50.write(SC_LOGIC_1);
        in63.write(SC_LOGIC_1);
        in76.write(SC_LOGIC_1);
        in89.write(SC_LOGIC_1);
        in102.write(SC_LOGIC_1);
        in8.write(SC_LOGIC_1);
        in21.write(SC_LOGIC_1);
        in34.write(SC_LOGIC_1);
        in47.write(SC_LOGIC_1);
        in60.write(SC_LOGIC_1);
        in73.write(SC_LOGIC_1);
        in86.write(SC_LOGIC_1);
        in99.write(SC_LOGIC_1);
        in112.write(SC_LOGIC_1);
        in14.write(SC_LOGIC_1);
        in27.write(SC_LOGIC_1);
        in40.write(SC_LOGIC_1);
        in53.write(SC_LOGIC_1);
        in66.write(SC_LOGIC_1);
        in79.write(SC_LOGIC_1);
        in92.write(SC_LOGIC_1);
        in105.write(SC_LOGIC_1);
        in115.write(SC_LOGIC_1);
        wait(SC_ZERO_TIME);
        wait(10, SC_NS);
        ready2update.notify();
    }

    void power_on_cycle(void){
        power_module->update_signal<sc_dt::sc_logic, 152>(signal_arr);
        std::vector<std::string> input_signal_name = {"in4", "in17", "in30", "in43", "in56", "in69", "in82", "in95", "in108", "in1", "in11", "in24", "in37", "in50", "in63", "in76", "in89", "in102", "in8", "in21", "in34", "in47", "in60", "in73", "in86", "in99", "in112", "in14", "in27", "in40", "in53", "in66", "in79", "in92", "in105", "in115"};
        power_module->timing_analysis("test", input_signal_name);
        std::vector<float> pwr_OAI21_X1_1 = power_module->power_per_gate("OAI21_X1_1");
        std::vector<float> pwr_OAI21_X1_2 = power_module->power_per_gate("OAI21_X1_2");
        std::vector<float> pwr_OAI21_X1_3 = power_module->power_per_gate("OAI21_X1_3");
        std::vector<float> pwr_OAI21_X1_4 = power_module->power_per_gate("OAI21_X1_4");
        std::vector<float> pwr_OAI21_X1_5 = power_module->power_per_gate("OAI21_X1_5");
        std::vector<float> pwr_OAI21_X1_6 = power_module->power_per_gate("OAI21_X1_6");
        std::vector<float> pwr_OAI21_X1_7 = power_module->power_per_gate("OAI21_X1_7");
        std::vector<float> pwr_OAI21_X1_8 = power_module->power_per_gate("OAI21_X1_8");
        std::vector<float> pwr_OAI21_X1_9 = power_module->power_per_gate("OAI21_X1_9");
        std::vector<float> pwr_OAI21_X1_10 = power_module->power_per_gate("OAI21_X1_10");
        std::vector<float> pwr_OR2_X1_1 = power_module->power_per_gate("OR2_X1_1");
        std::vector<float> pwr_OAI221_X1_1 = power_module->power_per_gate("OAI221_X1_1");
        std::vector<float> pwr_OAI221_X1_2 = power_module->power_per_gate("OAI221_X1_2");
        std::vector<float> pwr_INV_X1_1 = power_module->power_per_gate("INV_X1_1");
        std::vector<float> pwr_INV_X1_2 = power_module->power_per_gate("INV_X1_2");
        std::vector<float> pwr_INV_X1_3 = power_module->power_per_gate("INV_X1_3");
        std::vector<float> pwr_INV_X1_4 = power_module->power_per_gate("INV_X1_4");
        std::vector<float> pwr_INV_X1_5 = power_module->power_per_gate("INV_X1_5");
        std::vector<float> pwr_INV_X1_6 = power_module->power_per_gate("INV_X1_6");
        std::vector<float> pwr_INV_X1_7 = power_module->power_per_gate("INV_X1_7");
        std::vector<float> pwr_INV_X1_8 = power_module->power_per_gate("INV_X1_8");
        std::vector<float> pwr_INV_X1_9 = power_module->power_per_gate("INV_X1_9");
        std::vector<float> pwr_INV_X1_10 = power_module->power_per_gate("INV_X1_10");
        std::vector<float> pwr_INV_X1_11 = power_module->power_per_gate("INV_X1_11");
        std::vector<float> pwr_INV_X1_12 = power_module->power_per_gate("INV_X1_12");
        std::vector<float> pwr_INV_X1_13 = power_module->power_per_gate("INV_X1_13");
        std::vector<float> pwr_INV_X1_14 = power_module->power_per_gate("INV_X1_14");
        std::vector<float> pwr_INV_X1_15 = power_module->power_per_gate("INV_X1_15");
        std::vector<float> pwr_INV_X1_16 = power_module->power_per_gate("INV_X1_16");
        std::vector<float> pwr_INV_X1_17 = power_module->power_per_gate("INV_X1_17");
        std::vector<float> pwr_INV_X1_18 = power_module->power_per_gate("INV_X1_18");
        std::vector<float> pwr_INV_X1_19 = power_module->power_per_gate("INV_X1_19");
        std::vector<float> pwr_INV_X1_20 = power_module->power_per_gate("INV_X1_20");
        std::vector<float> pwr_INV_X1_21 = power_module->power_per_gate("INV_X1_21");
        std::vector<float> pwr_INV_X1_22 = power_module->power_per_gate("INV_X1_22");
        std::vector<float> pwr_INV_X1_23 = power_module->power_per_gate("INV_X1_23");
        std::vector<float> pwr_INV_X1_24 = power_module->power_per_gate("INV_X1_24");
        std::vector<float> pwr_INV_X1_25 = power_module->power_per_gate("INV_X1_25");
        std::vector<float> pwr_INV_X1_26 = power_module->power_per_gate("INV_X1_26");
        std::vector<float> pwr_INV_X1_27 = power_module->power_per_gate("INV_X1_27");
        std::vector<float> pwr_INV_X1_28 = power_module->power_per_gate("INV_X1_28");
        std::vector<float> pwr_INV_X1_29 = power_module->power_per_gate("INV_X1_29");
        std::vector<float> pwr_INV_X1_30 = power_module->power_per_gate("INV_X1_30");
        std::vector<float> pwr_INV_X1_31 = power_module->power_per_gate("INV_X1_31");
        std::vector<float> pwr_INV_X1_32 = power_module->power_per_gate("INV_X1_32");
        std::vector<float> pwr_INV_X1_33 = power_module->power_per_gate("INV_X1_33");
        std::vector<float> pwr_INV_X1_34 = power_module->power_per_gate("INV_X1_34");
        std::vector<float> pwr_OAI222_X1_1 = power_module->power_per_gate("OAI222_X1_1");
        std::vector<float> pwr_OAI22_X1_1 = power_module->power_per_gate("OAI22_X1_1");
        std::vector<float> pwr_NAND2_X1_1 = power_module->power_per_gate("NAND2_X1_1");
        std::vector<float> pwr_NAND2_X1_2 = power_module->power_per_gate("NAND2_X1_2");
        std::vector<float> pwr_NAND2_X1_3 = power_module->power_per_gate("NAND2_X1_3");
        std::vector<float> pwr_NAND2_X1_4 = power_module->power_per_gate("NAND2_X1_4");
        std::vector<float> pwr_NAND2_X1_5 = power_module->power_per_gate("NAND2_X1_5");
        std::vector<float> pwr_NAND2_X1_6 = power_module->power_per_gate("NAND2_X1_6");
        std::vector<float> pwr_NAND2_X1_7 = power_module->power_per_gate("NAND2_X1_7");
        std::vector<float> pwr_NAND2_X1_8 = power_module->power_per_gate("NAND2_X1_8");
        std::vector<float> pwr_NAND2_X1_9 = power_module->power_per_gate("NAND2_X1_9");
        std::vector<float> pwr_NAND2_X1_10 = power_module->power_per_gate("NAND2_X1_10");
        std::vector<float> pwr_NAND2_X1_11 = power_module->power_per_gate("NAND2_X1_11");
        std::vector<float> pwr_NAND2_X1_12 = power_module->power_per_gate("NAND2_X1_12");
        std::vector<float> pwr_NAND2_X1_13 = power_module->power_per_gate("NAND2_X1_13");
        std::vector<float> pwr_NAND2_X1_14 = power_module->power_per_gate("NAND2_X1_14");
        std::vector<float> pwr_NAND2_X1_15 = power_module->power_per_gate("NAND2_X1_15");
        std::vector<float> pwr_NAND2_X1_16 = power_module->power_per_gate("NAND2_X1_16");
        std::vector<float> pwr_NAND2_X1_17 = power_module->power_per_gate("NAND2_X1_17");
        std::vector<float> pwr_NAND2_X1_18 = power_module->power_per_gate("NAND2_X1_18");
        std::vector<float> pwr_NAND2_X1_19 = power_module->power_per_gate("NAND2_X1_19");
        std::vector<float> pwr_NAND4_X1_1 = power_module->power_per_gate("NAND4_X1_1");
        std::vector<float> pwr_NAND4_X1_2 = power_module->power_per_gate("NAND4_X1_2");
        std::vector<float> pwr_NAND4_X1_3 = power_module->power_per_gate("NAND4_X1_3");
        std::vector<float> pwr_NAND4_X1_4 = power_module->power_per_gate("NAND4_X1_4");
        std::vector<float> pwr_NAND4_X1_5 = power_module->power_per_gate("NAND4_X1_5");
        std::vector<float> pwr_NAND4_X1_6 = power_module->power_per_gate("NAND4_X1_6");
        std::vector<float> pwr_NAND4_X1_7 = power_module->power_per_gate("NAND4_X1_7");
        std::vector<float> pwr_NAND4_X1_8 = power_module->power_per_gate("NAND4_X1_8");
        std::vector<float> pwr_NAND4_X1_9 = power_module->power_per_gate("NAND4_X1_9");
        std::vector<float> pwr_NAND4_X1_10 = power_module->power_per_gate("NAND4_X1_10");
        std::vector<float> pwr_NAND4_X1_11 = power_module->power_per_gate("NAND4_X1_11");
        std::vector<float> pwr_NAND4_X1_12 = power_module->power_per_gate("NAND4_X1_12");
        std::vector<float> pwr_AND4_X1_1 = power_module->power_per_gate("AND4_X1_1");
        std::vector<float> pwr_AND4_X1_2 = power_module->power_per_gate("AND4_X1_2");
        std::vector<float> pwr_NAND3_X1_1 = power_module->power_per_gate("NAND3_X1_1");
        std::vector<float> pwr_NAND3_X1_2 = power_module->power_per_gate("NAND3_X1_2");
        std::vector<float> pwr_NAND3_X1_3 = power_module->power_per_gate("NAND3_X1_3");
        std::vector<float> pwr_NAND3_X1_4 = power_module->power_per_gate("NAND3_X1_4");
        std::vector<float> pwr_NAND3_X1_5 = power_module->power_per_gate("NAND3_X1_5");
        std::vector<float> pwr_NAND3_X1_6 = power_module->power_per_gate("NAND3_X1_6");
        std::vector<float> pwr_NAND3_X1_7 = power_module->power_per_gate("NAND3_X1_7");
        std::vector<float> pwr_NAND3_X1_8 = power_module->power_per_gate("NAND3_X1_8");
        std::vector<float> pwr_NAND3_X1_9 = power_module->power_per_gate("NAND3_X1_9");
        std::vector<float> pwr_NAND3_X1_10 = power_module->power_per_gate("NAND3_X1_10");
        std::vector<float> pwr_NAND3_X1_11 = power_module->power_per_gate("NAND3_X1_11");
        std::vector<float> pwr_NAND3_X1_12 = power_module->power_per_gate("NAND3_X1_12");
        std::vector<float> pwr_NAND3_X1_13 = power_module->power_per_gate("NAND3_X1_13");
        std::vector<float> pwr_NAND3_X1_14 = power_module->power_per_gate("NAND3_X1_14");
        std::vector<float> pwr_NAND3_X1_15 = power_module->power_per_gate("NAND3_X1_15");
        std::vector<float> pwr_NAND3_X1_16 = power_module->power_per_gate("NAND3_X1_16");
        std::vector<float> pwr_NAND3_X1_17 = power_module->power_per_gate("NAND3_X1_17");
        std::vector<float> pwr_NAND3_X1_18 = power_module->power_per_gate("NAND3_X1_18");
        std::vector<float> pwr_NAND3_X1_19 = power_module->power_per_gate("NAND3_X1_19");
        std::vector<float> pwr_NAND3_X1_20 = power_module->power_per_gate("NAND3_X1_20");
        std::vector<float> pwr_AND3_X1_1 = power_module->power_per_gate("AND3_X1_1");
        std::vector<float> pwr_AND3_X1_2 = power_module->power_per_gate("AND3_X1_2");
        std::vector<float> pwr_AOI22_X1_1 = power_module->power_per_gate("AOI22_X1_1");
        std::vector<float> pwr_AOI22_X1_2 = power_module->power_per_gate("AOI22_X1_2");
        std::vector<float> pwr_AOI22_X1_3 = power_module->power_per_gate("AOI22_X1_3");
        std::vector<float> pwr_AOI22_X1_4 = power_module->power_per_gate("AOI22_X1_4");
        std::vector<float> pwr_AOI22_X1_5 = power_module->power_per_gate("AOI22_X1_5");
        std::vector<float> pwr_AOI22_X1_6 = power_module->power_per_gate("AOI22_X1_6");
        std::vector<float> pwr_AOI22_X1_7 = power_module->power_per_gate("AOI22_X1_7");
        std::vector<float> pwr_AOI22_X1_8 = power_module->power_per_gate("AOI22_X1_8");
        std::vector<float> pwr_AOI22_X1_9 = power_module->power_per_gate("AOI22_X1_9");
        std::vector<float> pwr_AND2_X1_1 = power_module->power_per_gate("AND2_X1_1");
        std::vector<float> pwr_AOI221_X1_1 = power_module->power_per_gate("AOI221_X1_1");
        std::vector<float> pwr_OR4_X1_1 = power_module->power_per_gate("OR4_X1_1");

        float dynamic_power = pwr_OAI21_X1_1[0] + pwr_OAI21_X1_2[0] + pwr_OAI21_X1_3[0] + pwr_OAI21_X1_4[0] + pwr_OAI21_X1_5[0] + pwr_OAI21_X1_6[0] + pwr_OAI21_X1_7[0] + pwr_OAI21_X1_8[0] + pwr_OAI21_X1_9[0] + pwr_OAI21_X1_10[0] + pwr_OR2_X1_1[0] + pwr_OAI221_X1_1[0] + pwr_OAI221_X1_2[0] + pwr_INV_X1_1[0] + pwr_INV_X1_2[0] + pwr_INV_X1_3[0] + pwr_INV_X1_4[0] + pwr_INV_X1_5[0] + pwr_INV_X1_6[0] + pwr_INV_X1_7[0] + pwr_INV_X1_8[0] + pwr_INV_X1_9[0] + pwr_INV_X1_10[0] + pwr_INV_X1_11[0] + pwr_INV_X1_12[0] + pwr_INV_X1_13[0] + pwr_INV_X1_14[0] + pwr_INV_X1_15[0] + pwr_INV_X1_16[0] + pwr_INV_X1_17[0] + pwr_INV_X1_18[0] + pwr_INV_X1_19[0] + pwr_INV_X1_20[0] + pwr_INV_X1_21[0] + pwr_INV_X1_22[0] + pwr_INV_X1_23[0] + pwr_INV_X1_24[0] + pwr_INV_X1_25[0] + pwr_INV_X1_26[0] + pwr_INV_X1_27[0] + pwr_INV_X1_28[0] + pwr_INV_X1_29[0] + pwr_INV_X1_30[0] + pwr_INV_X1_31[0] + pwr_INV_X1_32[0] + pwr_INV_X1_33[0] + pwr_INV_X1_34[0] + pwr_OAI222_X1_1[0] + pwr_OAI22_X1_1[0] + pwr_NAND2_X1_1[0] + pwr_NAND2_X1_2[0] + pwr_NAND2_X1_3[0] + pwr_NAND2_X1_4[0] + pwr_NAND2_X1_5[0] + pwr_NAND2_X1_6[0] + pwr_NAND2_X1_7[0] + pwr_NAND2_X1_8[0] + pwr_NAND2_X1_9[0] + pwr_NAND2_X1_10[0] + pwr_NAND2_X1_11[0] + pwr_NAND2_X1_12[0] + pwr_NAND2_X1_13[0] + pwr_NAND2_X1_14[0] + pwr_NAND2_X1_15[0] + pwr_NAND2_X1_16[0] + pwr_NAND2_X1_17[0] + pwr_NAND2_X1_18[0] + pwr_NAND2_X1_19[0] + pwr_NAND4_X1_1[0] + pwr_NAND4_X1_2[0] + pwr_NAND4_X1_3[0] + pwr_NAND4_X1_4[0] + pwr_NAND4_X1_5[0] + pwr_NAND4_X1_6[0] + pwr_NAND4_X1_7[0] + pwr_NAND4_X1_8[0] + pwr_NAND4_X1_9[0] + pwr_NAND4_X1_10[0] + pwr_NAND4_X1_11[0] + pwr_NAND4_X1_12[0] + pwr_AND4_X1_1[0] + pwr_AND4_X1_2[0] + pwr_NAND3_X1_1[0] + pwr_NAND3_X1_2[0] + pwr_NAND3_X1_3[0] + pwr_NAND3_X1_4[0] + pwr_NAND3_X1_5[0] + pwr_NAND3_X1_6[0] + pwr_NAND3_X1_7[0] + pwr_NAND3_X1_8[0] + pwr_NAND3_X1_9[0] + pwr_NAND3_X1_10[0] + pwr_NAND3_X1_11[0] + pwr_NAND3_X1_12[0] + pwr_NAND3_X1_13[0] + pwr_NAND3_X1_14[0] + pwr_NAND3_X1_15[0] + pwr_NAND3_X1_16[0] + pwr_NAND3_X1_17[0] + pwr_NAND3_X1_18[0] + pwr_NAND3_X1_19[0] + pwr_NAND3_X1_20[0] + pwr_AND3_X1_1[0] + pwr_AND3_X1_2[0] + pwr_AOI22_X1_1[0] + pwr_AOI22_X1_2[0] + pwr_AOI22_X1_3[0] + pwr_AOI22_X1_4[0] + pwr_AOI22_X1_5[0] + pwr_AOI22_X1_6[0] + pwr_AOI22_X1_7[0] + pwr_AOI22_X1_8[0] + pwr_AOI22_X1_9[0] + pwr_AND2_X1_1[0] + pwr_AOI221_X1_1[0] + pwr_OR4_X1_1[0] ;
        float net_switching_power = pwr_OAI21_X1_1[1] + pwr_OAI21_X1_2[1] + pwr_OAI21_X1_3[1] + pwr_OAI21_X1_4[1] + pwr_OAI21_X1_5[1] + pwr_OAI21_X1_6[1] + pwr_OAI21_X1_7[1] + pwr_OAI21_X1_8[1] + pwr_OAI21_X1_9[1] + pwr_OAI21_X1_10[1] + pwr_OR2_X1_1[1] + pwr_OAI221_X1_1[1] + pwr_OAI221_X1_2[1] + pwr_INV_X1_1[1] + pwr_INV_X1_2[1] + pwr_INV_X1_3[1] + pwr_INV_X1_4[1] + pwr_INV_X1_5[1] + pwr_INV_X1_6[1] + pwr_INV_X1_7[1] + pwr_INV_X1_8[1] + pwr_INV_X1_9[1] + pwr_INV_X1_10[1] + pwr_INV_X1_11[1] + pwr_INV_X1_12[1] + pwr_INV_X1_13[1] + pwr_INV_X1_14[1] + pwr_INV_X1_15[1] + pwr_INV_X1_16[1] + pwr_INV_X1_17[1] + pwr_INV_X1_18[1] + pwr_INV_X1_19[1] + pwr_INV_X1_20[1] + pwr_INV_X1_21[1] + pwr_INV_X1_22[1] + pwr_INV_X1_23[1] + pwr_INV_X1_24[1] + pwr_INV_X1_25[1] + pwr_INV_X1_26[1] + pwr_INV_X1_27[1] + pwr_INV_X1_28[1] + pwr_INV_X1_29[1] + pwr_INV_X1_30[1] + pwr_INV_X1_31[1] + pwr_INV_X1_32[1] + pwr_INV_X1_33[1] + pwr_INV_X1_34[1] + pwr_OAI222_X1_1[1] + pwr_OAI22_X1_1[1] + pwr_NAND2_X1_1[1] + pwr_NAND2_X1_2[1] + pwr_NAND2_X1_3[1] + pwr_NAND2_X1_4[1] + pwr_NAND2_X1_5[1] + pwr_NAND2_X1_6[1] + pwr_NAND2_X1_7[1] + pwr_NAND2_X1_8[1] + pwr_NAND2_X1_9[1] + pwr_NAND2_X1_10[1] + pwr_NAND2_X1_11[1] + pwr_NAND2_X1_12[1] + pwr_NAND2_X1_13[1] + pwr_NAND2_X1_14[1] + pwr_NAND2_X1_15[1] + pwr_NAND2_X1_16[1] + pwr_NAND2_X1_17[1] + pwr_NAND2_X1_18[1] + pwr_NAND2_X1_19[1] + pwr_NAND4_X1_1[1] + pwr_NAND4_X1_2[1] + pwr_NAND4_X1_3[1] + pwr_NAND4_X1_4[1] + pwr_NAND4_X1_5[1] + pwr_NAND4_X1_6[1] + pwr_NAND4_X1_7[1] + pwr_NAND4_X1_8[1] + pwr_NAND4_X1_9[1] + pwr_NAND4_X1_10[1] + pwr_NAND4_X1_11[1] + pwr_NAND4_X1_12[1] + pwr_AND4_X1_1[1] + pwr_AND4_X1_2[1] + pwr_NAND3_X1_1[1] + pwr_NAND3_X1_2[1] + pwr_NAND3_X1_3[1] + pwr_NAND3_X1_4[1] + pwr_NAND3_X1_5[1] + pwr_NAND3_X1_6[1] + pwr_NAND3_X1_7[1] + pwr_NAND3_X1_8[1] + pwr_NAND3_X1_9[1] + pwr_NAND3_X1_10[1] + pwr_NAND3_X1_11[1] + pwr_NAND3_X1_12[1] + pwr_NAND3_X1_13[1] + pwr_NAND3_X1_14[1] + pwr_NAND3_X1_15[1] + pwr_NAND3_X1_16[1] + pwr_NAND3_X1_17[1] + pwr_NAND3_X1_18[1] + pwr_NAND3_X1_19[1] + pwr_NAND3_X1_20[1] + pwr_AND3_X1_1[1] + pwr_AND3_X1_2[1] + pwr_AOI22_X1_1[1] + pwr_AOI22_X1_2[1] + pwr_AOI22_X1_3[1] + pwr_AOI22_X1_4[1] + pwr_AOI22_X1_5[1] + pwr_AOI22_X1_6[1] + pwr_AOI22_X1_7[1] + pwr_AOI22_X1_8[1] + pwr_AOI22_X1_9[1] + pwr_AND2_X1_1[1] + pwr_AOI221_X1_1[1] + pwr_OR4_X1_1[1] ;
        float total_power = dynamic_power + net_switching_power;
        std::cout << "net switching power: " << net_switching_power << std::endl;
        std::cout << "dynamic power : " << dynamic_power << std::endl;
        std::cout << "total power per cycle: " << total_power << std::endl;
        reset_togglings();
    }

    void reset_togglings(void){
        for(auto& signal_pointer: signal_arr){
            signal_pointer->reset_toggling();
            }
    }

    void access_signals(void){
        signal_arr[0] = &(in4);
        power_module->set_transition_time("in4", 0.0);
        signal_arr[1] = &(in17);
        power_module->set_transition_time("in17", 0.0);
        signal_arr[2] = &(in30);
        power_module->set_transition_time("in30", 0.0);
        signal_arr[3] = &(in43);
        power_module->set_transition_time("in43", 0.0);
        signal_arr[4] = &(in56);
        power_module->set_transition_time("in56", 0.0);
        signal_arr[5] = &(in69);
        power_module->set_transition_time("in69", 0.0);
        signal_arr[6] = &(in82);
        power_module->set_transition_time("in82", 0.0);
        signal_arr[7] = &(in95);
        power_module->set_transition_time("in95", 0.0);
        signal_arr[8] = &(in108);
        power_module->set_transition_time("in108", 0.0);
        signal_arr[9] = &(in1);
        power_module->set_transition_time("in1", 0.0);
        signal_arr[10] = &(in11);
        power_module->set_transition_time("in11", 0.0);
        signal_arr[11] = &(in24);
        power_module->set_transition_time("in24", 0.0);
        signal_arr[12] = &(in37);
        power_module->set_transition_time("in37", 0.0);
        signal_arr[13] = &(in50);
        power_module->set_transition_time("in50", 0.0);
        signal_arr[14] = &(in63);
        power_module->set_transition_time("in63", 0.0);
        signal_arr[15] = &(in76);
        power_module->set_transition_time("in76", 0.0);
        signal_arr[16] = &(in89);
        power_module->set_transition_time("in89", 0.0);
        signal_arr[17] = &(in102);
        power_module->set_transition_time("in102", 0.0);
        signal_arr[18] = &(in8);
        power_module->set_transition_time("in8", 0.0);
        signal_arr[19] = &(in21);
        power_module->set_transition_time("in21", 0.0);
        signal_arr[20] = &(in34);
        power_module->set_transition_time("in34", 0.0);
        signal_arr[21] = &(in47);
        power_module->set_transition_time("in47", 0.0);
        signal_arr[22] = &(in60);
        power_module->set_transition_time("in60", 0.0);
        signal_arr[23] = &(in73);
        power_module->set_transition_time("in73", 0.0);
        signal_arr[24] = &(in86);
        power_module->set_transition_time("in86", 0.0);
        signal_arr[25] = &(in99);
        power_module->set_transition_time("in99", 0.0);
        signal_arr[26] = &(in112);
        power_module->set_transition_time("in112", 0.0);
        signal_arr[27] = &(in14);
        power_module->set_transition_time("in14", 0.0);
        signal_arr[28] = &(in27);
        power_module->set_transition_time("in27", 0.0);
        signal_arr[29] = &(in40);
        power_module->set_transition_time("in40", 0.0);
        signal_arr[30] = &(in53);
        power_module->set_transition_time("in53", 0.0);
        signal_arr[31] = &(in66);
        power_module->set_transition_time("in66", 0.0);
        signal_arr[32] = &(in79);
        power_module->set_transition_time("in79", 0.0);
        signal_arr[33] = &(in92);
        power_module->set_transition_time("in92", 0.0);
        signal_arr[34] = &(in105);
        power_module->set_transition_time("in105", 0.0);
        signal_arr[35] = &(in115);
        power_module->set_transition_time("in115", 0.0);
        signal_arr[36] = &(out223);
        signal_arr[37] = &(out329);
        signal_arr[38] = &(out370);
        signal_arr[39] = &(out421);
        signal_arr[40] = &(out430);
        signal_arr[41] = &(out431);
        signal_arr[42] = &(out432);
        signal_arr[43] = &(cut->Ckt432_I_0);
        signal_arr[44] = &(cut->Ckt432_I_1);
        signal_arr[45] = &(cut->Ckt432_I_2);
        signal_arr[46] = &(cut->Ckt432_I_3);
        signal_arr[47] = &(cut->Ckt432_I_4);
        signal_arr[48] = &(cut->Ckt432_I_5);
        signal_arr[49] = &(cut->Ckt432_I_6);
        signal_arr[50] = &(cut->Ckt432_I_7);
        signal_arr[51] = &(cut->Ckt432_I_8);
        signal_arr[52] = &(cut->Ckt432_M1_X1_0);
        signal_arr[53] = &(cut->Ckt432_M1_X1_1);
        signal_arr[54] = &(cut->Ckt432_M1_X1_2);
        signal_arr[55] = &(cut->Ckt432_M1_X1_3);
        signal_arr[56] = &(cut->Ckt432_M1_X1_4);
        signal_arr[57] = &(cut->Ckt432_M1_X1_5);
        signal_arr[58] = &(cut->Ckt432_M1_X1_6);
        signal_arr[59] = &(cut->Ckt432_M1_X1_7);
        signal_arr[60] = &(cut->Ckt432_M1_X1_8);
        signal_arr[61] = &(cut->Ckt432_M1_n1);
        signal_arr[62] = &(cut->Ckt432_M1_n10);
        signal_arr[63] = &(cut->Ckt432_M1_n11);
        signal_arr[64] = &(cut->Ckt432_M1_n12);
        signal_arr[65] = &(cut->Ckt432_M1_n13);
        signal_arr[66] = &(cut->Ckt432_M1_n14);
        signal_arr[67] = &(cut->Ckt432_M1_n15);
        signal_arr[68] = &(cut->Ckt432_M1_n2);
        signal_arr[69] = &(cut->Ckt432_M1_n3);
        signal_arr[70] = &(cut->Ckt432_M1_n4);
        signal_arr[71] = &(cut->Ckt432_M1_n5);
        signal_arr[72] = &(cut->Ckt432_M1_n6);
        signal_arr[73] = &(cut->Ckt432_M1_n7);
        signal_arr[74] = &(cut->Ckt432_M1_n8);
        signal_arr[75] = &(cut->Ckt432_M1_n9);
        signal_arr[76] = &(cut->Ckt432_M2_X2_0);
        signal_arr[77] = &(cut->Ckt432_M2_X2_1);
        signal_arr[78] = &(cut->Ckt432_M2_X2_2);
        signal_arr[79] = &(cut->Ckt432_M2_X2_3);
        signal_arr[80] = &(cut->Ckt432_M2_X2_4);
        signal_arr[81] = &(cut->Ckt432_M2_X2_5);
        signal_arr[82] = &(cut->Ckt432_M2_X2_6);
        signal_arr[83] = &(cut->Ckt432_M2_X2_7);
        signal_arr[84] = &(cut->Ckt432_M2_X2_8);
        signal_arr[85] = &(cut->Ckt432_M2_n1);
        signal_arr[86] = &(cut->Ckt432_M2_n10);
        signal_arr[87] = &(cut->Ckt432_M2_n11);
        signal_arr[88] = &(cut->Ckt432_M2_n12);
        signal_arr[89] = &(cut->Ckt432_M2_n13);
        signal_arr[90] = &(cut->Ckt432_M2_n14);
        signal_arr[91] = &(cut->Ckt432_M2_n15);
        signal_arr[92] = &(cut->Ckt432_M2_n16);
        signal_arr[93] = &(cut->Ckt432_M2_n17);
        signal_arr[94] = &(cut->Ckt432_M2_n18);
        signal_arr[95] = &(cut->Ckt432_M2_n19);
        signal_arr[96] = &(cut->Ckt432_M2_n2);
        signal_arr[97] = &(cut->Ckt432_M2_n20);
        signal_arr[98] = &(cut->Ckt432_M2_n3);
        signal_arr[99] = &(cut->Ckt432_M2_n4);
        signal_arr[100] = &(cut->Ckt432_M2_n5);
        signal_arr[101] = &(cut->Ckt432_M2_n6);
        signal_arr[102] = &(cut->Ckt432_M2_n7);
        signal_arr[103] = &(cut->Ckt432_M2_n8);
        signal_arr[104] = &(cut->Ckt432_M2_n9);
        signal_arr[105] = &(cut->Ckt432_M3_n1);
        signal_arr[106] = &(cut->Ckt432_M3_n10);
        signal_arr[107] = &(cut->Ckt432_M3_n11);
        signal_arr[108] = &(cut->Ckt432_M3_n12);
        signal_arr[109] = &(cut->Ckt432_M3_n13);
        signal_arr[110] = &(cut->Ckt432_M3_n14);
        signal_arr[111] = &(cut->Ckt432_M3_n15);
        signal_arr[112] = &(cut->Ckt432_M3_n16);
        signal_arr[113] = &(cut->Ckt432_M3_n17);
        signal_arr[114] = &(cut->Ckt432_M3_n18);
        signal_arr[115] = &(cut->Ckt432_M3_n19);
        signal_arr[116] = &(cut->Ckt432_M3_n2);
        signal_arr[117] = &(cut->Ckt432_M3_n20);
        signal_arr[118] = &(cut->Ckt432_M3_n3);
        signal_arr[119] = &(cut->Ckt432_M3_n4);
        signal_arr[120] = &(cut->Ckt432_M3_n5);
        signal_arr[121] = &(cut->Ckt432_M3_n6);
        signal_arr[122] = &(cut->Ckt432_M3_n7);
        signal_arr[123] = &(cut->Ckt432_M3_n8);
        signal_arr[124] = &(cut->Ckt432_M3_n9);
        signal_arr[125] = &(cut->Ckt432_M4_n1);
        signal_arr[126] = &(cut->Ckt432_M4_n10);
        signal_arr[127] = &(cut->Ckt432_M4_n11);
        signal_arr[128] = &(cut->Ckt432_M4_n12);
        signal_arr[129] = &(cut->Ckt432_M4_n13);
        signal_arr[130] = &(cut->Ckt432_M4_n14);
        signal_arr[131] = &(cut->Ckt432_M4_n15);
        signal_arr[132] = &(cut->Ckt432_M4_n16);
        signal_arr[133] = &(cut->Ckt432_M4_n17);
        signal_arr[134] = &(cut->Ckt432_M4_n18);
        signal_arr[135] = &(cut->Ckt432_M4_n2);
        signal_arr[136] = &(cut->Ckt432_M4_n3);
        signal_arr[137] = &(cut->Ckt432_M4_n4);
        signal_arr[138] = &(cut->Ckt432_M4_n5);
        signal_arr[139] = &(cut->Ckt432_M4_n6);
        signal_arr[140] = &(cut->Ckt432_M4_n7);
        signal_arr[141] = &(cut->Ckt432_M4_n8);
        signal_arr[142] = &(cut->Ckt432_M4_n9);
        signal_arr[143] = &(cut->Ckt432_M5_n1);
        signal_arr[144] = &(cut->Ckt432_M5_n2);
        signal_arr[145] = &(cut->Ckt432_M5_n3);
        signal_arr[146] = &(cut->Ckt432_M5_n4);
        signal_arr[147] = &(cut->Ckt432_M5_n5);
        signal_arr[148] = &(cut->Ckt432_M5_n6);
        signal_arr[149] = &(cut->Ckt432_M5_n7);
        signal_arr[150] = &(cut->Ckt432_M5_n8);
        signal_arr[151] = &(cut->Ckt432_M5_n9);
    }

};
