
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36 (git sha1 8f07a0d8404, clang 15.0.0 -fPIC -Os)


-- Executing script file `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/yosys_script.ys' --

1. Executing GHDL.
Importing module MAPn.
Importing module mapn_1_6_1_1_1_1_1_12.
Importing module convergence_accumulator_plate_4.
Importing module multiplier_accumulator_plate_1_12.
Importing module convergence_accumulator_plate_6.
Importing module add.
Importing module mux_cascading.
Importing module cap_controller.
Importing module map_controller.
Importing module map_add.
Importing module counter_3.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: counter_3           
root of   0 design levels: map_add             
root of   0 design levels: map_controller      
root of   1 design levels: cap_controller      
root of   0 design levels: mux_cascading       
root of   0 design levels: add                 
root of   2 design levels: convergence_accumulator_plate_6
root of   1 design levels: multiplier_accumulator_plate_1_12
root of   2 design levels: convergence_accumulator_plate_4
root of   3 design levels: mapn_1_6_1_1_1_1_1_12
root of   4 design levels: MAPn                
Automatically selected MAPn as design top module.

2.2. Analyzing design hierarchy..
Top module:  \MAPn
Used module:     \convergence_accumulator_plate_4
Used module:         \cap_controller
Used module:             \counter_3
Used module:         \mux_cascading
Used module:         \add
Used module:     \mapn_1_6_1_1_1_1_1_12
Used module:         \convergence_accumulator_plate_6
Used module:         \multiplier_accumulator_plate_1_12
Used module:             \map_add
Used module:             \map_controller

2.3. Analyzing design hierarchy..
Top module:  \MAPn
Used module:     \convergence_accumulator_plate_4
Used module:         \cap_controller
Used module:             \counter_3
Used module:         \mux_cascading
Used module:         \add
Used module:     \mapn_1_6_1_1_1_1_1_12
Used module:         \convergence_accumulator_plate_6
Used module:         \multiplier_accumulator_plate_1_12
Used module:             \map_add
Used module:             \map_controller
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \MAPn
Used module:     \convergence_accumulator_plate_4
Used module:         \cap_controller
Used module:             \counter_3
Used module:         \mux_cascading
Used module:         \add
Used module:     \mapn_1_6_1_1_1_1_1_12
Used module:         \convergence_accumulator_plate_6
Used module:         \multiplier_accumulator_plate_1_12
Used module:             \map_add
Used module:             \map_controller

3.1.2. Analyzing design hierarchy..
Top module:  \MAPn
Used module:     \convergence_accumulator_plate_4
Used module:         \cap_controller
Used module:             \counter_3
Used module:         \mux_cascading
Used module:         \add
Used module:     \mapn_1_6_1_1_1_1_1_12
Used module:         \convergence_accumulator_plate_6
Used module:         \multiplier_accumulator_plate_1_12
Used module:             \map_add
Used module:             \map_controller
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
<suppressed ~2 debug messages>
Optimizing module cap_controller.
<suppressed ~3 debug messages>
Optimizing module mux_cascading.
<suppressed ~1 debug messages>
Optimizing module add.
Optimizing module convergence_accumulator_plate_6.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module convergence_accumulator_plate_4.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module MAPn.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module cap_controller.
Optimizing module mux_cascading.
Optimizing module add.
Optimizing module convergence_accumulator_plate_6.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module convergence_accumulator_plate_4.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module MAPn.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \mux_cascading..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \MAPn..
Removed 2 unused cells and 65 unused wires.
<suppressed ~13 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module MAPn...
Checking module add...
Checking module cap_controller...
Checking module convergence_accumulator_plate_4...
Checking module convergence_accumulator_plate_6...
Checking module counter_3...
Checking module map_add...
Checking module map_controller...
Warning: found logic loop in module map_controller:
    cell \347 ($mux)
    cell \371 ($pmux)
    wire $auto$ghdl.cc:806:import_module$91 [0]
    wire \c [0]
Warning: found logic loop in module map_controller:
    cell \347 ($mux)
    cell \371 ($pmux)
    wire $auto$ghdl.cc:806:import_module$91 [0]
    wire \c [1]
Warning: found logic loop in module map_controller:
    cell \347 ($mux)
    cell \371 ($pmux)
    wire $auto$ghdl.cc:806:import_module$91 [0]
    wire \c [2]
Warning: found logic loop in module map_controller:
    cell \347 ($mux)
    cell \371 ($pmux)
    wire $auto$ghdl.cc:806:import_module$91 [0]
    wire \c [3]
Warning: found logic loop in module map_controller:
    cell \371 ($pmux)
    wire \c [0]
Checking module mapn_1_6_1_1_1_1_1_12...
Checking module multiplier_accumulator_plate_1_12...
Checking module mux_cascading...
Found and reported 5 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
<suppressed ~12 debug messages>
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
<suppressed ~6 debug messages>
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 6 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux \273.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1 multiplexer ports.
<suppressed ~17 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
    New ctrl vector for $pmux cell \292: { $auto$ghdl.cc:806:import_module$74 $auto$ghdl.cc:806:import_module$71 $auto$opt_reduce.cc:134:opt_pmux$127 }
    New ctrl vector for $pmux cell \308: $auto$ghdl.cc:806:import_module$69
    New ctrl vector for $pmux cell \313: $auto$ghdl.cc:806:import_module$74
    New ctrl vector for $pmux cell \318: $auto$ghdl.cc:806:import_module$75
    New ctrl vector for $pmux cell \323: $auto$ghdl.cc:806:import_module$74
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
    New ctrl vector for $pmux cell \370: { $auto$ghdl.cc:806:import_module$99 $auto$ghdl.cc:806:import_module$94 $auto$ghdl.cc:806:import_module$92 }
    New ctrl vector for $pmux cell \371: $auto$ghdl.cc:806:import_module$92
    New ctrl vector for $pmux cell \383: $auto$ghdl.cc:806:import_module$99
    New ctrl vector for $pmux cell \388: $auto$ghdl.cc:806:import_module$100
    New ctrl vector for $pmux cell \393: $auto$ghdl.cc:806:import_module$99
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 10 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
<suppressed ~3 debug messages>
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
<suppressed ~6 debug messages>
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 3 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 0 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register cap_controller.ps.
Found FSM state register map_controller.ps.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\ps' from module `\cap_controller'.
  found $dff cell for state register: \329
  root of input selection tree: $auto$ghdl.cc:806:import_module$66
  found reset state: 2'00 (guessed from mux tree)
  found ctrl input: \rst
  found ctrl input: $auto$opt_reduce.cc:134:opt_pmux$127
  found ctrl input: $auto$ghdl.cc:806:import_module$71
  found ctrl input: $auto$ghdl.cc:806:import_module$74
  found state code: 2'00
  found state code: 2'01
  found ctrl input: \run
  found state code: 2'10
  found ctrl input: $auto$ghdl.cc:806:import_module$72
  found state code: 2'11
  found ctrl output: $auto$ghdl.cc:806:import_module$69
  found ctrl output: $auto$ghdl.cc:806:import_module$71
  found ctrl output: $auto$ghdl.cc:806:import_module$74
  found ctrl output: $auto$ghdl.cc:806:import_module$75
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_pmux$127 $auto$ghdl.cc:806:import_module$72 \run \rst }
  ctrl outputs: { $auto$ghdl.cc:806:import_module$75 $auto$ghdl.cc:806:import_module$74 $auto$ghdl.cc:806:import_module$71 $auto$ghdl.cc:806:import_module$69 $auto$ghdl.cc:806:import_module$66 }
  transition:       2'00 4'---0 ->       2'01 6'000101
  transition:       2'00 4'---1 ->       2'00 6'000100
  transition:       2'10 4'-0-0 ->       2'10 6'010010
  transition:       2'10 4'-1-0 ->       2'11 6'010011
  transition:       2'10 4'---1 ->       2'00 6'010000
  transition:       2'01 4'--00 ->       2'01 6'001001
  transition:       2'01 4'--10 ->       2'10 6'001010
  transition:       2'01 4'---1 ->       2'00 6'001000
  transition:       2'11 4'---0 ->       2'01 6'100001
  transition:       2'11 4'---1 ->       2'00 6'100000
Extracting FSM `\ps' from module `\map_controller'.
  found $dff cell for state register: \406
  root of input selection tree: $auto$ghdl.cc:806:import_module$87
  found reset state: 2'00 (guessed from mux tree)
  found ctrl input: \rst
  found ctrl input: $auto$ghdl.cc:806:import_module$92
  found ctrl input: $auto$ghdl.cc:806:import_module$94
  found ctrl input: $auto$ghdl.cc:806:import_module$103
  found state code: 2'00
  found ctrl input: \run
  found ctrl input: \pause
  found state code: 2'10
  found state code: 2'01
  found ctrl input: $auto$ghdl.cc:806:import_module$96
  found state code: 2'11
  found ctrl output: $auto$ghdl.cc:806:import_module$92
  found ctrl output: $auto$ghdl.cc:806:import_module$94
  found ctrl output: $auto$ghdl.cc:806:import_module$103
  found ctrl output: $auto$ghdl.cc:806:import_module$100
  ctrl inputs: { $auto$ghdl.cc:806:import_module$96 \pause \run \rst }
  ctrl outputs: { $auto$ghdl.cc:806:import_module$103 $auto$ghdl.cc:806:import_module$100 $auto$ghdl.cc:806:import_module$94 $auto$ghdl.cc:806:import_module$92 $auto$ghdl.cc:806:import_module$87 }
  transition:       2'00 4'--00 ->       2'00 6'000100
  transition:       2'00 4'-010 ->       2'10 6'000110
  transition:       2'00 4'-110 ->       2'01 6'000101
  transition:       2'00 4'---1 ->       2'00 6'000100
  transition:       2'10 4'00-0 ->       2'10 6'100010
  transition:       2'10 4'10-0 ->       2'11 6'100011
  transition:       2'10 4'-1-0 ->       2'01 6'100001
  transition:       2'10 4'---1 ->       2'00 6'100000
  transition:       2'01 4'-0-0 ->       2'10 6'001010
  transition:       2'01 4'-1-0 ->       2'01 6'001001
  transition:       2'01 4'---1 ->       2'00 6'001000
  transition:       2'11 4'---0 ->       2'00 6'010000
  transition:       2'11 4'---1 ->       2'00 6'010000

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ps$128' from module `\cap_controller'.
  Removing unused input signal $auto$opt_reduce.cc:134:opt_pmux$127.
Optimizing FSM `$fsm$\ps$134' from module `\map_controller'.
  Merging pattern 4'---0 and 4'---1 from group (3 0 6'010000).
  Merging pattern 4'---1 and 4'---0 from group (3 0 6'010000).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 21 unused cells and 21 unused wires.
<suppressed ~25 debug messages>

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ps$128' from module `\cap_controller'.
  Removing unused output signal $auto$ghdl.cc:806:import_module$66 [0].
  Removing unused output signal $auto$ghdl.cc:806:import_module$66 [1].
  Removing unused output signal $auto$ghdl.cc:806:import_module$71.
Optimizing FSM `$fsm$\ps$134' from module `\map_controller'.
  Removing unused output signal $auto$ghdl.cc:806:import_module$87 [0].
  Removing unused output signal $auto$ghdl.cc:806:import_module$87 [1].
  Removing unused output signal $auto$ghdl.cc:806:import_module$94.

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\ps$128' from module `\cap_controller' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> ---1
  10 -> --1-
  01 -> -1--
  11 -> 1---
Recoding FSM `$fsm$\ps$134' from module `\map_controller' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00 -> ---1
  10 -> --1-
  01 -> -1--
  11 -> 1---

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\ps$128' from module `cap_controller':
-------------------------------------

  Information on FSM $fsm$\ps$128 (\ps):

  Number of input signals:    3
  Number of output signals:   3
  Number of state bits:       4

  Input signals:
    0: \rst
    1: \run
    2: $auto$ghdl.cc:806:import_module$72

  Output signals:
    0: $auto$ghdl.cc:806:import_module$69
    1: $auto$ghdl.cc:806:import_module$74
    2: $auto$ghdl.cc:806:import_module$75

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 3'--1   ->     0 3'001
      1:     0 3'--0   ->     2 3'001
      2:     1 3'--1   ->     0 3'010
      3:     1 3'0-0   ->     1 3'010
      4:     1 3'1-0   ->     3 3'010
      5:     2 3'--1   ->     0 3'000
      6:     2 3'-10   ->     1 3'000
      7:     2 3'-00   ->     2 3'000
      8:     3 3'--1   ->     0 3'100
      9:     3 3'--0   ->     2 3'100

-------------------------------------

FSM `$fsm$\ps$134' from module `map_controller':
-------------------------------------

  Information on FSM $fsm$\ps$134 (\ps):

  Number of input signals:    4
  Number of output signals:   3
  Number of state bits:       4

  Input signals:
    0: \rst
    1: \run
    2: \pause
    3: $auto$ghdl.cc:806:import_module$96

  Output signals:
    0: $auto$ghdl.cc:806:import_module$92
    1: $auto$ghdl.cc:806:import_module$100
    2: $auto$ghdl.cc:806:import_module$103

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 4'--00   ->     0 3'001
      1:     0 4'---1   ->     0 3'001
      2:     0 4'-010   ->     1 3'001
      3:     0 4'-110   ->     2 3'001
      4:     1 4'---1   ->     0 3'100
      5:     1 4'00-0   ->     1 3'100
      6:     1 4'-1-0   ->     2 3'100
      7:     1 4'10-0   ->     3 3'100
      8:     2 4'---1   ->     0 3'000
      9:     2 4'-0-0   ->     1 3'000
     10:     2 4'-1-0   ->     2 3'000
     11:     3 4'----   ->     0 3'010

-------------------------------------

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\ps$128' from module `\cap_controller'.
Mapping FSM `$fsm$\ps$134' from module `\map_controller'.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
<suppressed ~4 debug messages>
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
<suppressed ~4 debug messages>
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \199 ($dff) from module add (D = $auto$ghdl.cc:806:import_module$43, Q = \d_reg1).
Adding EN signal on \198 ($dff) from module add (D = \d_reg1, Q = \outm1).
Adding SRST signal on \437 ($dff) from module counter_3 (D = $auto$ghdl.cc:806:import_module$123, Q = \counter, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$213 ($sdff) from module counter_3 (D = $auto$ghdl.cc:806:import_module$122, Q = \counter).
Adding SRST signal on \425 ($dff) from module map_add (D = $auto$ghdl.cc:806:import_module$116, Q = \d_reg2, rval = 0).
Adding EN signal on $auto$ff.cc:266:slice$215 ($sdff) from module map_add (D = $auto$ghdl.cc:806:import_module$116, Q = \d_reg2).
Adding EN signal on \424 ($dff) from module map_add (D = \d_reg2, Q = \outreg).
Adding SRST signal on \407 ($dff) from module map_controller (D = $auto$ghdl.cc:806:import_module$109, Q = \i, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$226 ($sdff) from module map_controller (D = $auto$ghdl.cc:806:import_module$108, Q = \i).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 9 unused cells and 25 unused wires.
<suppressed ~14 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
<suppressed ~1 debug messages>
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
<suppressed ~1 debug messages>
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from wire MAPn.regocap.
Removed top 2 bits (of 4) from port B of cell cap_controller.\260 ($sub).
Removed top 3 bits (of 4) from port B of cell counter_3.\431 ($add).
Removed top 1 bits (of 3) from port B of cell map_controller.$auto$fsm_map.cc:77:implement_pattern_cache$182 ($eq).
Removed top 3 bits (of 4) from port B of cell map_controller.\356 ($sub).
Removed top 3 bits (of 4) from port B of cell map_controller.\400 ($add).
Removed top 1 bits (of 3) from wire mapn_1_6_1_1_1_1_1_12.regocap.
Removed top 16 bits (of 32) from port A of cell multiplier_accumulator_plate_1_12.\155 ($mul).
Removed top 16 bits (of 32) from port B of cell multiplier_accumulator_plate_1_12.\155 ($mul).
Removed top 3 bits (of 4) from port B of cell mux_cascading.\208 ($eq).
Removed top 2 bits (of 4) from port B of cell mux_cascading.\211 ($eq).
Removed top 2 bits (of 4) from port B of cell mux_cascading.\214 ($eq).
Removed top 1 bits (of 4) from port B of cell mux_cascading.\217 ($eq).
Removed top 1 bits (of 4) from port B of cell mux_cascading.\220 ($eq).
Removed top 1 bits (of 4) from port B of cell mux_cascading.\223 ($eq).
Removed top 1 bits (of 4) from port B of cell mux_cascading.\226 ($eq).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MAPn:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module add:
  creating $macc model for \196 ($add).
  creating $alu model for $macc \196.
  creating $alu cell for \196: $auto$alumacc.cc:485:replace_alu$230
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cap_controller:
  creating $macc model for \260 ($sub).
  creating $alu model for $macc \260.
  creating $alu model for \281 ($gt): new $alu
  creating $alu cell for \281: $auto$alumacc.cc:485:replace_alu$234
  creating $alu cell for \260: $auto$alumacc.cc:485:replace_alu$239
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module convergence_accumulator_plate_4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module convergence_accumulator_plate_6:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module counter_3:
  creating $macc model for \431 ($add).
  creating $alu model for $macc \431.
  creating $alu cell for \431: $auto$alumacc.cc:485:replace_alu$242
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module map_add:
  creating $macc model for \423 ($add).
  creating $alu model for $macc \423.
  creating $alu cell for \423: $auto$alumacc.cc:485:replace_alu$245
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module map_controller:
  creating $macc model for \356 ($sub).
  creating $macc model for \400 ($add).
  creating $alu model for $macc \400.
  creating $alu model for $macc \356.
  creating $alu cell for \356: $auto$alumacc.cc:485:replace_alu$248
  creating $alu cell for \400: $auto$alumacc.cc:485:replace_alu$251
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mapn_1_6_1_1_1_1_1_12:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module multiplier_accumulator_plate_1_12:
  creating $macc model for \155 ($mul).
  creating $macc cell for \155: $auto$alumacc.cc:365:replace_macc$254
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module mux_cascading:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
<suppressed ~2 debug messages>
Optimizing module cap_controller.
<suppressed ~4 debug messages>
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
<suppressed ~1 debug messages>
Optimizing module map_controller.
<suppressed ~2 debug messages>
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$209 ($dffe) from module add (D = \val1, Q = \d_reg1, rval = 0).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 2 unused cells and 5 unused wires.
<suppressed ~5 debug messages>

3.17.5. Rerunning OPT passes. (Removed registers in this run.)

3.17.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.17.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.17.8. Executing OPT_DFF pass (perform DFF optimizations).

3.17.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.17.10. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/Cellar/yosys/0.36/share/yosys/techmap.v
Parsing Verilog input from `/usr/local/Cellar/yosys/0.36/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$8d502f02b5b0b72663c46788e07dcce65ffb9a1e\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
Using extmapper maccmap for cells of type $macc.
  add \din * \w (16x16 bits, signed)
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000100000 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$8742280fdebca84e1c87f2a86ed84f62d558f4cc\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $sdffce.
No more expansions possible.
<suppressed ~1318 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
<suppressed ~36 debug messages>
Optimizing module cap_controller.
<suppressed ~28 debug messages>
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
<suppressed ~21 debug messages>
Optimizing module map_add.
<suppressed ~36 debug messages>
Optimizing module map_controller.
<suppressed ~53 debug messages>
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
<suppressed ~903 debug messages>
Optimizing module mux_cascading.
<suppressed ~60 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
<suppressed ~3 debug messages>
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
<suppressed ~18 debug messages>
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
<suppressed ~1566 debug messages>
Finding identical cells in module `\mux_cascading'.
<suppressed ~156 debug messages>
Removed a total of 581 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 170 unused cells and 636 unused wires.
<suppressed ~177 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\MAPn' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.2. Extracting gate netlist of module `\add' to `<abc-temp-dir>/input.blif'..
Extracted 222 gates and 289 wires to a netlist network with 67 inputs and 33 outputs.

3.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:               AND cells:       13
ABC RESULTS:                OR cells:       45
ABC RESULTS:              XNOR cells:       34
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       28
ABC RESULTS:            ANDNOT cells:       47
ABC RESULTS:               XOR cells:       29
ABC RESULTS:        internal signals:      189
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       33
Removing temp directory.

3.22.3. Extracting gate netlist of module `\cap_controller' to `<abc-temp-dir>/input.blif'..
Extracted 46 gates and 60 wires to a netlist network with 14 inputs and 3 outputs.

3.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:        4
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:                OR cells:        9
ABC RESULTS:            ANDNOT cells:       12
ABC RESULTS:        internal signals:       43
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        3
Removing temp directory.

3.22.4. Extracting gate netlist of module `\convergence_accumulator_plate_4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.5. Extracting gate netlist of module `\convergence_accumulator_plate_6' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.6. Extracting gate netlist of module `\counter_3' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

3.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.6.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.7. Extracting gate netlist of module `\map_add' to `<abc-temp-dir>/input.blif'..
Extracted 257 gates and 325 wires to a netlist network with 67 inputs and 34 outputs.

3.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       15
ABC RESULTS:               NOT cells:       11
ABC RESULTS:              XNOR cells:       21
ABC RESULTS:             ORNOT cells:       18
ABC RESULTS:                OR cells:       36
ABC RESULTS:               NOR cells:       10
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               XOR cells:       42
ABC RESULTS:            ANDNOT cells:       95
ABC RESULTS:        internal signals:      224
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       34
Removing temp directory.

3.22.8. Extracting gate netlist of module `\map_controller' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$7044: \c [0] -> $techmap$auto$alumacc.cc:485:replace_alu$248.lcu.$and$/usr/local/Cellar/yosys/0.36/share/yosys/techmap.v:240$5422_Y
                                              \c [0] -> $auto$alumacc.cc:485:replace_alu$248.Y [1]
                                              \c [0] -> $auto$ghdl.cc:806:import_module$91 [0]
                                              \c [0] -> $auto$alumacc.cc:485:replace_alu$248.Y [0]
                                              \c [0] -> \c [0]
Breaking loop using new signal $abcloop$7045: \c [2] -> $auto$alumacc.cc:485:replace_alu$248.CO [2]
                                              \c [2] -> $auto$ghdl.cc:806:import_module$91 [2]
                                              \c [2] -> $auto$alumacc.cc:485:replace_alu$248.X [2]
                                              \c [2] -> \c [2]
Breaking loop using new signal $abcloop$7046: \c [1] -> $auto$alumacc.cc:485:replace_alu$248.CO [1]
                                              \c [1] -> $auto$ghdl.cc:806:import_module$91 [1]
                                              \c [1] -> $auto$alumacc.cc:485:replace_alu$248.X [1]
                                              \c [1] -> \c [1]
Breaking loop using new signal $abcloop$7047: \c [3] -> $auto$ghdl.cc:806:import_module$91 [3]
                                              \c [3] -> $auto$alumacc.cc:485:replace_alu$248.X [3]
                                              \c [3] -> \c [3]
Extracted 63 gates and 82 wires to a netlist network with 19 inputs and 12 outputs.

3.22.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.8.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        8
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:                OR cells:       11
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:               AND cells:        2
ABC RESULTS:               XOR cells:        8
ABC RESULTS:        internal signals:       51
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       12
Removing temp directory.

3.22.9. Extracting gate netlist of module `\mapn_1_6_1_1_1_1_1_12' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.10. Extracting gate netlist of module `\multiplier_accumulator_plate_1_12' to `<abc-temp-dir>/input.blif'..
Extracted 1754 gates and 1786 wires to a netlist network with 32 inputs and 32 outputs.

3.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.10.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      106
ABC RESULTS:             ORNOT cells:       24
ABC RESULTS:               AND cells:      180
ABC RESULTS:               NOT cells:       30
ABC RESULTS:                OR cells:      227
ABC RESULTS:               NOR cells:       68
ABC RESULTS:            ANDNOT cells:      551
ABC RESULTS:               XOR cells:      457
ABC RESULTS:              XNOR cells:      125
ABC RESULTS:        internal signals:     1722
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       32
Removing temp directory.

3.22.11. Extracting gate netlist of module `\mux_cascading' to `<abc-temp-dir>/input.blif'..
Extracted 1083 gates and 1600 wires to a netlist network with 516 inputs and 32 outputs.

3.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.11.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:       35
ABC RESULTS:                OR cells:      381
ABC RESULTS:            ANDNOT cells:      636
ABC RESULTS:        internal signals:     1052
ABC RESULTS:           input signals:      516
ABC RESULTS:          output signals:       32
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
<suppressed ~4 debug messages>
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 1 unused cells and 1443 unused wires.
<suppressed ~44 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \MAPn
Used module:     \convergence_accumulator_plate_4
Used module:         \add
Used module:         \cap_controller
Used module:             \counter_3
Used module:         \mux_cascading
Used module:     \mapn_1_6_1_1_1_1_1_12
Used module:         \convergence_accumulator_plate_6
Used module:         \multiplier_accumulator_plate_1_12
Used module:             \map_add
Used module:             \map_controller

3.24.2. Analyzing design hierarchy..
Top module:  \MAPn
Used module:     \convergence_accumulator_plate_4
Used module:         \add
Used module:         \cap_controller
Used module:             \counter_3
Used module:         \mux_cascading
Used module:     \mapn_1_6_1_1_1_1_1_12
Used module:         \convergence_accumulator_plate_6
Used module:         \multiplier_accumulator_plate_1_12
Used module:             \map_add
Used module:             \map_controller
Removed 0 unused modules.

3.25. Printing statistics.

=== MAPn ===

   Number of wires:                 21
   Number of wire bits:           1105
   Number of public wires:          21
   Number of public wire bits:    1105
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     convergence_accumulator_plate_4      1
     mapn_1_6_1_1_1_1_1_12           4

=== add ===

   Number of wires:                199
   Number of wire bits:            354
   Number of public wires:           9
   Number of public wire bits:     164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                286
     $_ANDNOT_                      47
     $_AND_                         13
     $_DFFE_PP_                     32
     $_NAND_                        18
     $_NOR_                         28
     $_ORNOT_                        8
     $_OR_                          45
     $_SDFFCE_PN0P_                 32
     $_XNOR_                        34
     $_XOR_                         29

=== cap_controller ===

   Number of wires:                 42
   Number of wire bits:             60
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $_ANDNOT_                      12
     $_DFF_P_                        4
     $_ORNOT_                        3
     $_OR_                           9
     $_XNOR_                         1
     $_XOR_                          4
     counter_3                       1

=== convergence_accumulator_plate_4 ===

   Number of wires:                 18
   Number of wire bits:            786
   Number of public wires:          18
   Number of public wire bits:     786
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     add                             1
     cap_controller                  1
     mux_cascading                   1

=== convergence_accumulator_plate_6 ===

   Number of wires:                 18
   Number of wire bits:            850
   Number of public wires:          18
   Number of public wire bits:     850
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     add                             1
     cap_controller                  1
     mux_cascading                   1

=== counter_3 ===

   Number of wires:                  9
   Number of wire bits:             21
   Number of public wires:           5
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_ANDNOT_                       1
     $_NAND_                         1
     $_NOT_                          1
     $_SDFFE_PP0P_                   4
     $_XNOR_                         1
     $_XOR_                          2

=== map_add ===

   Number of wires:                274
   Number of wire bits:            398
   Number of public wires:           8
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                330
     $_ANDNOT_                      95
     $_AND_                         15
     $_DFFE_PP_                     32
     $_NAND_                        18
     $_NOR_                         10
     $_NOT_                         11
     $_ORNOT_                       18
     $_OR_                          36
     $_SDFFE_PP0P_                  32
     $_XNOR_                        21
     $_XOR_                         42

=== map_controller ===

   Number of wires:                 52
   Number of wire bits:             70
   Number of public wires:          11
   Number of public wire bits:      23
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                       9
     $_AND_                          2
     $_DFF_P_                        4
     $_MUX_                          8
     $_NOR_                          2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          11
     $_SDFFE_PP0P_                   4
     $_XNOR_                         2
     $_XOR_                          8

=== mapn_1_6_1_1_1_1_1_12 ===

   Number of wires:                 25
   Number of wire bits:            660
   Number of public wires:          25
   Number of public wire bits:     660
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     convergence_accumulator_plate_6      1
     multiplier_accumulator_plate_1_12      6

=== multiplier_accumulator_plate_1_12 ===

   Number of wires:               1750
   Number of wire bits:           1873
   Number of public wires:          14
   Number of public wire bits:     137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1770
     $_ANDNOT_                     551
     $_AND_                        180
     $_NAND_                       106
     $_NOR_                         68
     $_NOT_                         30
     $_ORNOT_                       24
     $_OR_                         227
     $_XNOR_                       125
     $_XOR_                        457
     map_add                         1
     map_controller                  1

=== mux_cascading ===

   Number of wires:               1037
   Number of wire bits:           2155
   Number of public wires:           6
   Number of public wire bits:    1124
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1063
     $_ANDNOT_                     636
     $_AND_                          1
     $_NAND_                        10
     $_ORNOT_                       35
     $_OR_                         381

=== design hierarchy ===

   MAPn                              1
     convergence_accumulator_plate_4      1
       add                           1
       cap_controller                1
         counter_3                   1
       mux_cascading                 1
     mapn_1_6_1_1_1_1_1_12           4
       convergence_accumulator_plate_6      1
         add                         1
         cap_controller              1
           counter_3                 1
         mux_cascading               1
       multiplier_accumulator_plate_1_12      6
         map_add                     1
         map_controller              1

   Number of wires:              56470
   Number of wire bits:          77065
   Number of public wires:        1168
   Number of public wire bits:   21589
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              58632
     $_ANDNOT_                   19200
     $_AND_                       4798
     $_DFFE_PP_                    928
     $_DFF_P_                      116
     $_MUX_                        192
     $_NAND_                      3121
     $_NOR_                       2060
     $_NOT_                       1013
     $_ORNOT_                     1334
     $_OR_                        8751
     $_SDFFCE_PN0P_                160
     $_SDFFE_PP0P_                 884
     $_XNOR_                      3732
     $_XOR_                      12343

3.26. Executing CHECK pass (checking for obvious problems).
Checking module MAPn...
Checking module add...
Checking module cap_controller...
Checking module convergence_accumulator_plate_4...
Checking module convergence_accumulator_plate_6...
Checking module counter_3...
Checking module map_add...
Checking module map_controller...
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7049 ($_MUX_)
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7050 ($_MUX_)
    wire $abc$7043$new_n33
    wire \c [0]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7050 ($_MUX_)
    wire \c [0]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7051 ($_MUX_)
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7052 ($_MUX_)
    wire $abc$7043$new_n35
    wire \c [1]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7052 ($_MUX_)
    wire \c [1]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7053 ($_MUX_)
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7054 ($_MUX_)
    wire $abc$7043$new_n37
    wire \c [2]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7054 ($_MUX_)
    wire \c [2]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7055 ($_MUX_)
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7056 ($_MUX_)
    wire $abc$7043$new_n39
    wire \c [3]
Warning: found logic loop in module map_controller:
    cell $abc$7043$auto$blifparse.cc:386:parse_blif$7056 ($_MUX_)
    wire \c [3]
Checking module mapn_1_6_1_1_1_1_1_12...
Checking module multiplier_accumulator_plate_1_12...
Checking module mux_cascading...
Found and reported 8 problems.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
<suppressed ~3 debug messages>
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

4.10. Finished OPT passes. (There is nothing left to do.)

5. Executing Liberty frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib
Imported 134 cell types from liberty file.

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

6.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\MAPn':
Mapping DFF cells in module `\add':
  mapped 64 $_DFF_P_ cells to \DFF_X1 cells.
Mapping DFF cells in module `\cap_controller':
  mapped 4 $_DFF_P_ cells to \DFF_X1 cells.
Mapping DFF cells in module `\convergence_accumulator_plate_4':
Mapping DFF cells in module `\convergence_accumulator_plate_6':
Mapping DFF cells in module `\counter_3':
  mapped 4 $_DFF_P_ cells to \DFF_X1 cells.
Mapping DFF cells in module `\map_add':
  mapped 64 $_DFF_P_ cells to \DFF_X1 cells.
Mapping DFF cells in module `\map_controller':
  mapped 8 $_DFF_P_ cells to \DFF_X1 cells.
Mapping DFF cells in module `\mapn_1_6_1_1_1_1_1_12':
Mapping DFF cells in module `\multiplier_accumulator_plate_1_12':
Mapping DFF cells in module `\mux_cascading':

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 2 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

7.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

7.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

7.16. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\MAPn' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.2. Extracting gate netlist of module `\add' to `<abc-temp-dir>/input.blif'..
Extracted 318 gates and 418 wires to a netlist network with 99 inputs and 64 outputs.

8.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:           AND4_X1 cells:        1
ABC RESULTS:           AND2_X1 cells:        7
ABC RESULTS:           NOR3_X1 cells:        4
ABC RESULTS:            OR2_X1 cells:        9
ABC RESULTS:           NOR4_X1 cells:        1
ABC RESULTS:          OAI22_X1 cells:        8
ABC RESULTS:           XOR2_X1 cells:       11
ABC RESULTS:          NAND3_X1 cells:        5
ABC RESULTS:          NAND4_X1 cells:        7
ABC RESULTS:          XNOR2_X1 cells:       23
ABC RESULTS:         OAI211_X1 cells:        1
ABC RESULTS:          NAND2_X1 cells:       93
ABC RESULTS:          OAI21_X1 cells:       48
ABC RESULTS:           NOR2_X1 cells:       50
ABC RESULTS:           MUX2_X1 cells:       23
ABC RESULTS:            INV_X1 cells:       48
ABC RESULTS:          AOI22_X1 cells:        1
ABC RESULTS:          AOI21_X1 cells:       35
ABC RESULTS:        internal signals:      255
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:       64
Removing temp directory.

8.3. Extracting gate netlist of module `\cap_controller' to `<abc-temp-dir>/input.blif'..
Extracted 29 gates and 43 wires to a netlist network with 14 inputs and 3 outputs.

8.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.3.2. Re-integrating ABC results.
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:           NOR2_X1 cells:        2
ABC RESULTS:          AOI21_X1 cells:        1
ABC RESULTS:            OR2_X1 cells:        1
ABC RESULTS:           AND4_X1 cells:        1
ABC RESULTS:            INV_X1 cells:        9
ABC RESULTS:          OAI21_X1 cells:        5
ABC RESULTS:          NAND3_X1 cells:        5
ABC RESULTS:          NAND2_X1 cells:       10
ABC RESULTS:           NOR3_X1 cells:        1
ABC RESULTS:        internal signals:       26
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        3
Removing temp directory.

8.4. Extracting gate netlist of module `\convergence_accumulator_plate_4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.5. Extracting gate netlist of module `\convergence_accumulator_plate_6' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.6. Extracting gate netlist of module `\counter_3' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 21 wires to a netlist network with 7 inputs and 4 outputs.

8.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.6.2. Re-integrating ABC results.
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:           AND3_X1 cells:        1
ABC RESULTS:          OAI21_X1 cells:        1
ABC RESULTS:          NAND4_X1 cells:        1
ABC RESULTS:           NOR2_X1 cells:        4
ABC RESULTS:          NAND2_X1 cells:        2
ABC RESULTS:            INV_X1 cells:        3
ABC RESULTS:           AND2_X1 cells:        2
ABC RESULTS:          NAND3_X1 cells:        1
ABC RESULTS:          AOI21_X1 cells:        1
ABC RESULTS:        internal signals:       10
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        4
Removing temp directory.

8.7. Extracting gate netlist of module `\map_add' to `<abc-temp-dir>/input.blif'..
Extracted 362 gates and 462 wires to a netlist network with 99 inputs and 64 outputs.

8.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.7.2. Re-integrating ABC results.
ABC RESULTS:           MUX2_X1 cells:       21
ABC RESULTS:           AND4_X1 cells:        3
ABC RESULTS:          NAND4_X1 cells:        9
ABC RESULTS:          XNOR2_X1 cells:       10
ABC RESULTS:            OR3_X1 cells:        3
ABC RESULTS:           NOR3_X1 cells:        3
ABC RESULTS:           NOR4_X1 cells:        1
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:            OR2_X1 cells:       15
ABC RESULTS:           AND2_X1 cells:       16
ABC RESULTS:           NOR2_X1 cells:       35
ABC RESULTS:          NAND2_X1 cells:      108
ABC RESULTS:           XOR2_X1 cells:        3
ABC RESULTS:          OAI21_X1 cells:       40
ABC RESULTS:            INV_X1 cells:       62
ABC RESULTS:         OAI211_X1 cells:        9
ABC RESULTS:          NAND3_X1 cells:       26
ABC RESULTS:          AOI21_X1 cells:       68
ABC RESULTS:        internal signals:      299
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:       64
Removing temp directory.

8.8. Extracting gate netlist of module `\map_controller' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$11361: \c [0] -> $abc$7043$new_n48
                                               \c [0] -> $abc$7043$new_n45
                                               \c [0] -> $abc$7043$new_n44
                                               \c [0] -> $abc$7043$new_n33
                                               \c [0] -> \c [0]
Breaking loop using new signal $abcloop$11362: \c [2] -> $abc$7043$new_n51
                                               \c [2] -> $abc$7043$new_n49
                                               \c [2] -> $abc$7043$new_n37
                                               \c [2] -> \c [2]
Breaking loop using new signal $abcloop$11363: \c [1] -> $abc$7043$new_n48
                                               \c [1] -> $abc$7043$new_n45
                                               \c [1] -> $abc$7043$new_n35
                                               \c [1] -> \c [1]
Breaking loop using new signal $abcloop$11364: \c [3] -> $abc$7043$new_n52
                                               \c [3] -> $abc$7043$new_n39
                                               \c [3] -> \c [3]
Extracted 54 gates and 75 wires to a netlist network with 20 inputs and 12 outputs.

8.8.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.8.2. Re-integrating ABC results.
ABC RESULTS:          NAND4_X1 cells:        1
ABC RESULTS:         OAI211_X1 cells:        1
ABC RESULTS:          NAND3_X1 cells:       10
ABC RESULTS:            INV_X1 cells:       15
ABC RESULTS:           NOR2_X1 cells:        9
ABC RESULTS:           NOR3_X1 cells:        4
ABC RESULTS:          OAI21_X1 cells:        5
ABC RESULTS:          NAND2_X1 cells:       17
ABC RESULTS:          AOI21_X1 cells:        7
ABC RESULTS:        internal signals:       43
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       12
Removing temp directory.

8.9. Extracting gate netlist of module `\mapn_1_6_1_1_1_1_1_12' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.10. Extracting gate netlist of module `\multiplier_accumulator_plate_1_12' to `<abc-temp-dir>/input.blif'..
Extracted 1768 gates and 1800 wires to a netlist network with 32 inputs and 32 outputs.

8.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.10.2. Re-integrating ABC results.
ABC RESULTS:           NOR4_X1 cells:        3
ABC RESULTS:          AOI22_X1 cells:       51
ABC RESULTS:          OAI22_X1 cells:        8
ABC RESULTS:           AND4_X1 cells:        4
ABC RESULTS:           AND2_X1 cells:       68
ABC RESULTS:         OAI221_X1 cells:        2
ABC RESULTS:           AND3_X1 cells:       92
ABC RESULTS:         OAI211_X1 cells:       29
ABC RESULTS:          NAND3_X1 cells:      643
ABC RESULTS:          NAND4_X1 cells:      107
ABC RESULTS:            INV_X1 cells:      354
ABC RESULTS:          AOI21_X1 cells:      393
ABC RESULTS:            OR2_X1 cells:       17
ABC RESULTS:          OAI21_X1 cells:      408
ABC RESULTS:          NAND2_X1 cells:      653
ABC RESULTS:           MUX2_X1 cells:        1
ABC RESULTS:           XOR2_X1 cells:       19
ABC RESULTS:           NOR3_X1 cells:       23
ABC RESULTS:           NOR2_X1 cells:      107
ABC RESULTS:          XNOR2_X1 cells:       62
ABC RESULTS:        internal signals:     1736
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       32
Removing temp directory.

8.11. Extracting gate netlist of module `\mux_cascading' to `<abc-temp-dir>/input.blif'..
Extracted 1063 gates and 1579 wires to a netlist network with 516 inputs and 32 outputs.

8.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/DiBA_recursive__UG/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.11.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:        2
ABC RESULTS:          OAI22_X1 cells:       95
ABC RESULTS:          NAND2_X1 cells:       64
ABC RESULTS:            INV_X1 cells:      227
ABC RESULTS:          OAI21_X1 cells:       33
ABC RESULTS:           NOR2_X1 cells:      102
ABC RESULTS:          NAND3_X1 cells:      191
ABC RESULTS:           AND4_X1 cells:       32
ABC RESULTS:          NAND4_X1 cells:      138
ABC RESULTS:        internal signals:     1031
ABC RESULTS:           input signals:      516
ABC RESULTS:          output signals:       32
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 0 unused cells and 4363 unused wires.
<suppressed ~8 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing SPLITNETS pass (splitting up multi-bit signals).

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /usr/local/Cellar/yosys/0.36/share/yosys/techmap.v
Parsing Verilog input from `/usr/local/Cellar/yosys/0.36/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\MAPn' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.2. Extracting gate netlist of module `\add' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.3. Extracting gate netlist of module `\cap_controller' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.4. Extracting gate netlist of module `\convergence_accumulator_plate_4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.5. Extracting gate netlist of module `\convergence_accumulator_plate_6' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.6. Extracting gate netlist of module `\counter_3' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.7. Extracting gate netlist of module `\map_add' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.8. Extracting gate netlist of module `\map_controller' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.9. Extracting gate netlist of module `\mapn_1_6_1_1_1_1_1_12' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.10. Extracting gate netlist of module `\multiplier_accumulator_plate_1_12' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.11. Extracting gate netlist of module `\mux_cascading' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 0 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

13.9. Rerunning OPT passes. (Maybe there is more to do..)

13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

13.13. Executing OPT_DFF pass (perform DFF optimizations).

13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

13.16. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 2167 unused wires.

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

15. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port MAPn.clk using BUF_X1.
Mapping port MAPn.din using BUF_X1.
Don't map output port MAPn.dout: Missing option -outpad.
Mapping port MAPn.pause using BUF_X1.
Don't map output port MAPn.reg_out: Missing option -outpad.
Mapping port MAPn.rst using BUF_X1.
Mapping port MAPn.run using BUF_X1.
Mapping port MAPn.w using BUF_X1.
Mapping port add.add_reg using BUF_X1.
Mapping port add.clk using BUF_X1.
Mapping port add.din using BUF_X1.
Don't map output port add.dout: Missing option -outpad.
Mapping port add.in_reg using BUF_X1.
Mapping port add.reg_out using BUF_X1.
Don't map output port cap_controller.add_reg: Missing option -outpad.
Mapping port cap_controller.clk using BUF_X1.
Mapping port cap_controller.count using BUF_X1.
Don't map output port cap_controller.in_reg: Missing option -outpad.
Don't map output port cap_controller.out_reg: Missing option -outpad.
Mapping port cap_controller.rst using BUF_X1.
Mapping port cap_controller.run using BUF_X1.
Don't map output port cap_controller.sel: Missing option -outpad.
Mapping port convergence_accumulator_plate_4.clk using BUF_X1.
Mapping port convergence_accumulator_plate_4.din using BUF_X1.
Don't map output port convergence_accumulator_plate_4.dout: Missing option -outpad.
Don't map output port convergence_accumulator_plate_4.reg_out: Missing option -outpad.
Mapping port convergence_accumulator_plate_4.rst using BUF_X1.
Mapping port convergence_accumulator_plate_4.run using BUF_X1.
Mapping port convergence_accumulator_plate_6.clk using BUF_X1.
Mapping port convergence_accumulator_plate_6.din using BUF_X1.
Don't map output port convergence_accumulator_plate_6.dout: Missing option -outpad.
Don't map output port convergence_accumulator_plate_6.reg_out: Missing option -outpad.
Mapping port convergence_accumulator_plate_6.rst using BUF_X1.
Mapping port convergence_accumulator_plate_6.run using BUF_X1.
Don't map output port counter_3.c: Missing option -outpad.
Mapping port counter_3.clk using BUF_X1.
Mapping port counter_3.en using BUF_X1.
Mapping port counter_3.rst using BUF_X1.
Mapping port map_add.add_reg using BUF_X1.
Mapping port map_add.clk using BUF_X1.
Mapping port map_add.din1 using BUF_X1.
Don't map output port map_add.dout: Missing option -outpad.
Mapping port map_add.reg_out using BUF_X1.
Mapping port map_add.rst using BUF_X1.
Don't map output port map_controller.add_reg: Missing option -outpad.
Mapping port map_controller.clk using BUF_X1.
Mapping port map_controller.count using BUF_X1.
Don't map output port map_controller.out_reg: Missing option -outpad.
Mapping port map_controller.pause using BUF_X1.
Mapping port map_controller.rst using BUF_X1.
Mapping port map_controller.run using BUF_X1.
Mapping port mapn_1_6_1_1_1_1_1_12.clk using BUF_X1.
Mapping port mapn_1_6_1_1_1_1_1_12.din using BUF_X1.
Don't map output port mapn_1_6_1_1_1_1_1_12.dout: Missing option -outpad.
Mapping port mapn_1_6_1_1_1_1_1_12.pause using BUF_X1.
Don't map output port mapn_1_6_1_1_1_1_1_12.reg_out: Missing option -outpad.
Mapping port mapn_1_6_1_1_1_1_1_12.rst using BUF_X1.
Mapping port mapn_1_6_1_1_1_1_1_12.run using BUF_X1.
Mapping port mapn_1_6_1_1_1_1_1_12.w using BUF_X1.
Mapping port multiplier_accumulator_plate_1_12.clk using BUF_X1.
Mapping port multiplier_accumulator_plate_1_12.din using BUF_X1.
Don't map output port multiplier_accumulator_plate_1_12.dout: Missing option -outpad.
Mapping port multiplier_accumulator_plate_1_12.pause using BUF_X1.
Don't map output port multiplier_accumulator_plate_1_12.reg_out: Missing option -outpad.
Mapping port multiplier_accumulator_plate_1_12.rst using BUF_X1.
Mapping port multiplier_accumulator_plate_1_12.run using BUF_X1.
Mapping port multiplier_accumulator_plate_1_12.w using BUF_X1.
Mapping port mux_cascading.din using BUF_X1.
Don't map output port mux_cascading.dout: Missing option -outpad.
Mapping port mux_cascading.sel using BUF_X1.

16. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Marking already mapped port: BUF_X1.Z[0].
Don't map input port MAPn.clk: Missing option -inpad.
Don't map input port MAPn.din: Missing option -inpad.
Don't map input port MAPn.pause: Missing option -inpad.
Don't map input port MAPn.rst: Missing option -inpad.
Don't map input port MAPn.run: Missing option -inpad.
Don't map input port MAPn.w: Missing option -inpad.
Mapping port MAPn.dout using BUF_X1.
Mapping port MAPn.reg_out using BUF_X1.
Don't map input port add.add_reg: Missing option -inpad.
Don't map input port add.clk: Missing option -inpad.
Don't map input port add.din: Missing option -inpad.
Don't map input port add.in_reg: Missing option -inpad.
Don't map input port add.reg_out: Missing option -inpad.
Mapping port add.dout using BUF_X1.
Don't map input port cap_controller.clk: Missing option -inpad.
Don't map input port cap_controller.count: Missing option -inpad.
Don't map input port cap_controller.rst: Missing option -inpad.
Don't map input port cap_controller.run: Missing option -inpad.
Mapping port cap_controller.add_reg using BUF_X1.
Mapping port cap_controller.in_reg using BUF_X1.
Mapping port cap_controller.out_reg using BUF_X1.
Mapping port cap_controller.sel using BUF_X1.
Don't map input port convergence_accumulator_plate_4.clk: Missing option -inpad.
Don't map input port convergence_accumulator_plate_4.din: Missing option -inpad.
Don't map input port convergence_accumulator_plate_4.rst: Missing option -inpad.
Don't map input port convergence_accumulator_plate_4.run: Missing option -inpad.
Mapping port convergence_accumulator_plate_4.dout using BUF_X1.
Mapping port convergence_accumulator_plate_4.reg_out using BUF_X1.
Don't map input port convergence_accumulator_plate_6.clk: Missing option -inpad.
Don't map input port convergence_accumulator_plate_6.din: Missing option -inpad.
Don't map input port convergence_accumulator_plate_6.rst: Missing option -inpad.
Don't map input port convergence_accumulator_plate_6.run: Missing option -inpad.
Mapping port convergence_accumulator_plate_6.dout using BUF_X1.
Mapping port convergence_accumulator_plate_6.reg_out using BUF_X1.
Don't map input port counter_3.clk: Missing option -inpad.
Don't map input port counter_3.en: Missing option -inpad.
Don't map input port counter_3.rst: Missing option -inpad.
Mapping port counter_3.c using BUF_X1.
Don't map input port map_add.add_reg: Missing option -inpad.
Don't map input port map_add.clk: Missing option -inpad.
Don't map input port map_add.din1: Missing option -inpad.
Don't map input port map_add.reg_out: Missing option -inpad.
Don't map input port map_add.rst: Missing option -inpad.
Mapping port map_add.dout using BUF_X1.
Don't map input port map_controller.clk: Missing option -inpad.
Don't map input port map_controller.count: Missing option -inpad.
Don't map input port map_controller.pause: Missing option -inpad.
Don't map input port map_controller.rst: Missing option -inpad.
Don't map input port map_controller.run: Missing option -inpad.
Mapping port map_controller.add_reg using BUF_X1.
Mapping port map_controller.out_reg using BUF_X1.
Don't map input port mapn_1_6_1_1_1_1_1_12.clk: Missing option -inpad.
Don't map input port mapn_1_6_1_1_1_1_1_12.din: Missing option -inpad.
Don't map input port mapn_1_6_1_1_1_1_1_12.pause: Missing option -inpad.
Don't map input port mapn_1_6_1_1_1_1_1_12.rst: Missing option -inpad.
Don't map input port mapn_1_6_1_1_1_1_1_12.run: Missing option -inpad.
Don't map input port mapn_1_6_1_1_1_1_1_12.w: Missing option -inpad.
Mapping port mapn_1_6_1_1_1_1_1_12.dout using BUF_X1.
Mapping port mapn_1_6_1_1_1_1_1_12.reg_out using BUF_X1.
Don't map input port multiplier_accumulator_plate_1_12.clk: Missing option -inpad.
Don't map input port multiplier_accumulator_plate_1_12.din: Missing option -inpad.
Don't map input port multiplier_accumulator_plate_1_12.pause: Missing option -inpad.
Don't map input port multiplier_accumulator_plate_1_12.rst: Missing option -inpad.
Don't map input port multiplier_accumulator_plate_1_12.run: Missing option -inpad.
Don't map input port multiplier_accumulator_plate_1_12.w: Missing option -inpad.
Mapping port multiplier_accumulator_plate_1_12.dout using BUF_X1.
Mapping port multiplier_accumulator_plate_1_12.reg_out using BUF_X1.
Don't map input port mux_cascading.din: Missing option -inpad.
Don't map input port mux_cascading.sel: Missing option -inpad.
Mapping port mux_cascading.dout using BUF_X1.

17. Executing Verilog backend.

17.1. Executing BMUXMAP pass.

17.2. Executing DEMUXMAP pass.
Dumping module `\MAPn'.
Dumping module `\add'.
Dumping module `\cap_controller'.
Dumping module `\convergence_accumulator_plate_4'.
Dumping module `\convergence_accumulator_plate_6'.
Dumping module `\counter_3'.
Dumping module `\map_add'.
Dumping module `\map_controller'.
Dumping module `\mapn_1_6_1_1_1_1_1_12'.
Dumping module `\multiplier_accumulator_plate_1_12'.
Dumping module `\mux_cascading'.

18. Executing BLIF backend.

19. Executing JSON backend.

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

20.6. Executing OPT_DFF pass (perform DFF optimizations).

20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..
Removed 0 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

20.9. Rerunning OPT passes. (Maybe there is more to do..)

20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MAPn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cap_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \convergence_accumulator_plate_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \counter_3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \map_controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mapn_1_6_1_1_1_1_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_accumulator_plate_1_12..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux_cascading..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MAPn.
  Optimizing cells in module \add.
  Optimizing cells in module \cap_controller.
  Optimizing cells in module \convergence_accumulator_plate_4.
  Optimizing cells in module \convergence_accumulator_plate_6.
  Optimizing cells in module \counter_3.
  Optimizing cells in module \map_add.
  Optimizing cells in module \map_controller.
  Optimizing cells in module \mapn_1_6_1_1_1_1_1_12.
  Optimizing cells in module \multiplier_accumulator_plate_1_12.
  Optimizing cells in module \mux_cascading.
Performed a total of 0 changes.

20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MAPn'.
Finding identical cells in module `\add'.
Finding identical cells in module `\cap_controller'.
Finding identical cells in module `\convergence_accumulator_plate_4'.
Finding identical cells in module `\convergence_accumulator_plate_6'.
Finding identical cells in module `\counter_3'.
Finding identical cells in module `\map_add'.
Finding identical cells in module `\map_controller'.
Finding identical cells in module `\mapn_1_6_1_1_1_1_1_12'.
Finding identical cells in module `\multiplier_accumulator_plate_1_12'.
Finding identical cells in module `\mux_cascading'.
Removed a total of 0 cells.

20.13. Executing OPT_DFF pass (perform DFF optimizations).

20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MAPn.
Optimizing module add.
Optimizing module cap_controller.
Optimizing module convergence_accumulator_plate_4.
Optimizing module convergence_accumulator_plate_6.
Optimizing module counter_3.
Optimizing module map_add.
Optimizing module map_controller.
Optimizing module mapn_1_6_1_1_1_1_1_12.
Optimizing module multiplier_accumulator_plate_1_12.
Optimizing module mux_cascading.

20.16. Finished OPT passes. (There is nothing left to do.)

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MAPn..
Finding unused cells or wires in module \add..
Finding unused cells or wires in module \cap_controller..
Finding unused cells or wires in module \convergence_accumulator_plate_4..
Finding unused cells or wires in module \convergence_accumulator_plate_6..
Finding unused cells or wires in module \counter_3..
Finding unused cells or wires in module \map_add..
Finding unused cells or wires in module \map_controller..
Finding unused cells or wires in module \mapn_1_6_1_1_1_1_1_12..
Finding unused cells or wires in module \multiplier_accumulator_plate_1_12..
Finding unused cells or wires in module \mux_cascading..

22. Printing statistics.

=== MAPn ===

   Number of wires:                148
   Number of wire bits:           1742
   Number of public wires:         140
   Number of public wire bits:     937
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                810
     BUF_X1                        805
     convergence_accumulator_plate_4      1
     mapn_1_6_1_1_1_1_1_12           4

=== add ===

   Number of wires:                514
   Number of wire bits:            607
   Number of public wires:          70
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                507
     AND2_X1                         7
     AND4_X1                         1
     AOI21_X1                       35
     AOI22_X1                        1
     BUF_X1                         68
     DFF_X1                         64
     INV_X1                         48
     MUX2_X1                        23
     NAND2_X1                       93
     NAND3_X1                        5
     NAND4_X1                        7
     NOR2_X1                        50
     NOR3_X1                         4
     NOR4_X1                         1
     OAI211_X1                       1
     OAI21_X1                       48
     OAI22_X1                        8
     OR2_X1                          9
     XNOR2_X1                       23
     XOR2_X1                        11

=== cap_controller ===

   Number of wires:                 57
   Number of wire bits:             69
   Number of public wires:           9
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     AND4_X1                         1
     AOI211_X1                       1
     AOI21_X1                        1
     BUF_X1                         14
     DFF_X1                          4
     INV_X1                          9
     NAND2_X1                       10
     NAND3_X1                        5
     NOR2_X1                         2
     NOR3_X1                         1
     OAI21_X1                        5
     OR2_X1                          1
     counter_3                       1

=== convergence_accumulator_plate_4 ===

   Number of wires:                 50
   Number of wire bits:            366
   Number of public wires:          44
   Number of public wire bits:     202
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                167
     BUF_X1                        164
     add                             1
     cap_controller                  1
     mux_cascading                   1

=== convergence_accumulator_plate_6 ===

   Number of wires:                 50
   Number of wire bits:            494
   Number of public wires:          44
   Number of public wire bits:     266
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                231
     BUF_X1                        228
     add                             1
     cap_controller                  1
     mux_cascading                   1

=== counter_3 ===

   Number of wires:                 32
   Number of wire bits:             35
   Number of public wires:           8
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     AND2_X1                         2
     AND3_X1                         1
     AOI211_X1                       1
     AOI21_X1                        1
     BUF_X1                          7
     DFF_X1                          4
     INV_X1                          3
     NAND2_X1                        2
     NAND3_X1                        1
     NAND4_X1                        1
     NOR2_X1                         4
     OAI21_X1                        1

=== map_add ===

   Number of wires:                572
   Number of wire bits:            665
   Number of public wires:          70
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                565
     AND2_X1                        16
     AND4_X1                         3
     AOI211_X1                       1
     AOI21_X1                       68
     BUF_X1                         68
     DFF_X1                         64
     INV_X1                         62
     MUX2_X1                        21
     NAND2_X1                      108
     NAND3_X1                       26
     NAND4_X1                        9
     NOR2_X1                        35
     NOR3_X1                         3
     NOR4_X1                         1
     OAI211_X1                       9
     OAI21_X1                       40
     OR2_X1                         15
     OR3_X1                          3
     XNOR2_X1                       10
     XOR2_X1                         3

=== map_controller ===

   Number of wires:                 97
   Number of wire bits:            103
   Number of public wires:          17
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     AOI21_X1                        7
     BUF_X1                         10
     DFF_X1                          8
     INV_X1                         15
     NAND2_X1                       17
     NAND3_X1                       10
     NAND4_X1                        1
     NOR2_X1                         9
     NOR3_X1                         4
     OAI211_X1                       1
     OAI21_X1                        5

=== mapn_1_6_1_1_1_1_1_12 ===

   Number of wires:                214
   Number of wire bits:            656
   Number of public wires:         206
   Number of public wire bits:     427
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                236
     BUF_X1                        229
     convergence_accumulator_plate_6      1
     multiplier_accumulator_plate_1_12      6

=== multiplier_accumulator_plate_1_12 ===

   Number of wires:               3061
   Number of wire bits:           3183
   Number of public wires:          41
   Number of public wire bits:     102
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3115
     AND2_X1                        68
     AND3_X1                        92
     AND4_X1                         4
     AOI21_X1                      393
     AOI22_X1                       51
     BUF_X1                         69
     INV_X1                        354
     MUX2_X1                         1
     NAND2_X1                      653
     NAND3_X1                      643
     NAND4_X1                      107
     NOR2_X1                       107
     NOR3_X1                        23
     NOR4_X1                         3
     OAI211_X1                      29
     OAI21_X1                      408
     OAI221_X1                       2
     OAI22_X1                        8
     OR2_X1                         17
     XNOR2_X1                       62
     XOR2_X1                        19
     map_add                         1
     map_controller                  1

=== mux_cascading ===

   Number of wires:                889
   Number of wire bits:           1948
   Number of public wires:          35
   Number of public wire bits:     580
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1432
     AND2_X1                         2
     AND4_X1                        32
     BUF_X1                        548
     INV_X1                        227
     NAND2_X1                       64
     NAND3_X1                      191
     NAND4_X1                      138
     NOR2_X1                       102
     OAI21_X1                       33
     OAI22_X1                       95

=== design hierarchy ===

   MAPn                              1
     convergence_accumulator_plate_4      1
       add                           1
       cap_controller                1
         counter_3                   1
       mux_cascading                 1
     mapn_1_6_1_1_1_1_1_12           4
       convergence_accumulator_plate_6      1
         add                         1
         cap_controller              1
           counter_3                 1
         mux_cascading               1
       multiplier_accumulator_plate_1_12      6
         map_add                     1
         map_controller              1

   Number of wires:              98234
   Number of wire bits:         114827
   Number of public wires:        4866
   Number of public wire bits:   13697
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:             103262
     AND2_X1                      2071
     AND3_X1                      2213
     AND4_X1                       338
     AOI211_X1                      34
     AOI21_X1                    11417
     AOI22_X1                     1229
     BUF_X1                       9510
     DFF_X1                       2088
     INV_X1                      11779
     MUX2_X1                       643
     NAND2_X1                    19517
     NAND3_X1                    17306
     NAND4_X1                     3538
     NOR2_X1                      4414
     NOR3_X1                       745
     NOR4_X1                       101
     OAI211_X1                     941
     OAI21_X1                    11307
     OAI221_X1                      48
     OAI22_X1                      707
     OR2_X1                        818
     OR3_X1                         72
     XNOR2_X1                     1843
     XOR2_X1                       583

Warnings: 21 unique messages, 85 total
End of script. Logfile hash: 948d9b412e, CPU: user 4.12s system 0.20s
Yosys 0.36 (git sha1 8f07a0d8404, clang 15.0.0 -fPIC -Os)
Time spent: 49% 3x abc (3 sec), 10% 31x opt_clean (0 sec), ...
