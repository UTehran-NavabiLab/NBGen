
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )


-- Executing script file `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/yosys_script.ys' --

1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:161)
Generating RTLIL representation for module `\ARU'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28.2-33.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\LGU'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:50.2-61.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\Register'.
Generating RTLIL representation for module `\INC'.
Generating RTLIL representation for module `\IMM'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:105.2-114.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\Mux4to1'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125.2-134.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\Mux2to1'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145.2-150.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\Tristate'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:56)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:57)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:59)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:60)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:61)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:62)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:64)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:64)
Warning: Yosys has only limited support for tri-state logic at the moment. (/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Datapath.v:65)
Generating RTLIL representation for module `\Datapath'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v' to AST representation.
Generating RTLIL representation for module `\Controller'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81.2-269.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271.2-302.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/TopLevel.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/TopLevel.v' to AST representation.
Generating RTLIL representation for module `\TopLevel'.
Successfully finished Verilog frontend.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Finding top of design hierarchy..
root of   2 design levels: TopLevel            
root of   0 design levels: Controller          
root of   1 design levels: Datapath            
root of   0 design levels: Tristate            
root of   0 design levels: Mux2to1             
root of   0 design levels: Mux4to1             
root of   0 design levels: IMM                 
root of   0 design levels: INC                 
root of   0 design levels: Register            
root of   0 design levels: LGU                 
root of   0 design levels: ARU                 
Automatically selected TopLevel as design top module.

5.2. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         \Tristate
Used module:         \INC
Used module:         \IMM
Used module:         \Register
Used module:         \Mux4to1
Used module:         \Mux2to1
Used module:         \ARU
Used module:         \LGU
Parameter 1 (\N) = 1

5.3. Executing AST frontend in derive mode using pre-parsed AST for module `\Register'.
Parameter 1 (\N) = 1
Generating RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Parameter 1 (\N) = 1
Found cached RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Parameter 1 (\N) = 1
Found cached RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Parameter 1 (\N) = 1
Found cached RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Parameter 1 (\N) = 4

5.4. Executing AST frontend in derive mode using pre-parsed AST for module `\Register'.
Parameter 1 (\N) = 4
Generating RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Parameter 1 (\N) = 16

5.5. Executing AST frontend in derive mode using pre-parsed AST for module `\Register'.
Parameter 1 (\N) = 16
Generating RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 4

5.6. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux4to1'.
Parameter 1 (\N) = 4
Generating RTLIL representation for module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125.2-134.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Parameter 1 (\N) = 2

5.7. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux2to1'.
Parameter 1 (\N) = 2
Generating RTLIL representation for module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145.2-150.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Parameter 1 (\N) = 16

5.8. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux4to1'.
Parameter 1 (\N) = 16
Generating RTLIL representation for module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125.2-134.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16

5.9. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux2to1'.
Parameter 1 (\N) = 16
Generating RTLIL representation for module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145.2-150.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 4

5.10. Executing AST frontend in derive mode using pre-parsed AST for module `\Mux2to1'.
Parameter 1 (\N) = 4
Generating RTLIL representation for module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145.2-150.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Parameter 1 (\N) = 16
Found cached RTLIL representation for module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.

5.11. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         \Tristate
Used module:         \INC
Used module:         \IMM
Used module:         $paramod\Register\N=s32'00000000000000000000000000000001
Used module:         $paramod\Register\N=s32'00000000000000000000000000000100
Used module:         $paramod\Register\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000010
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000100
Used module:         \ARU
Used module:         \LGU

5.12. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         \Tristate
Used module:         \INC
Used module:         \IMM
Used module:         $paramod\Register\N=s32'00000000000000000000000000000001
Used module:         $paramod\Register\N=s32'00000000000000000000000000000100
Used module:         $paramod\Register\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000010
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000100
Used module:         \ARU
Used module:         \LGU
Removing unused module `\Mux2to1'.
Removing unused module `\Mux4to1'.
Removing unused module `\Register'.
Removed 3 unused modules.
Mapping positional arguments of cell TopLevel.CU (Controller).
Mapping positional arguments of cell TopLevel.DP (Datapath).
Mapping positional arguments of cell Datapath.TriBuff (Tristate).
Mapping positional arguments of cell Datapath.INC_2 (INC).
Mapping positional arguments of cell Datapath.INC_1 (INC).
Mapping positional arguments of cell Datapath.IMM1 (IMM).
Mapping positional arguments of cell Datapath.SR_V ($paramod\Register\N=s32'00000000000000000000000000000001).
Mapping positional arguments of cell Datapath.SR_C ($paramod\Register\N=s32'00000000000000000000000000000001).
Mapping positional arguments of cell Datapath.SR_N ($paramod\Register\N=s32'00000000000000000000000000000001).
Mapping positional arguments of cell Datapath.SR_Z ($paramod\Register\N=s32'00000000000000000000000000000001).
Mapping positional arguments of cell Datapath.OF ($paramod\Register\N=s32'00000000000000000000000000000100).
Mapping positional arguments of cell Datapath.IN ($paramod\Register\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.PC ($paramod\Register\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.IR ($paramod\Register\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.AC ($paramod\Register\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux10 ($paramod\Mux4to1\N=s32'00000000000000000000000000000100).
Mapping positional arguments of cell Datapath.mux9 ($paramod\Mux2to1\N=s32'00000000000000000000000000000010).
Mapping positional arguments of cell Datapath.mux8 ($paramod\Mux4to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux7 ($paramod\Mux4to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux6 ($paramod\Mux2to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux5 ($paramod\Mux4to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux4 ($paramod\Mux2to1\N=s32'00000000000000000000000000000100).
Mapping positional arguments of cell Datapath.mux3 ($paramod\Mux4to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux2 ($paramod\Mux2to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.mux1 ($paramod\Mux2to1\N=s32'00000000000000000000000000010000).
Mapping positional arguments of cell Datapath.ARU1 (ARU).
Mapping positional arguments of cell Datapath.LGU1 (LGU).

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         \Tristate
Used module:         \INC
Used module:         \IMM
Used module:         $paramod\Register\N=s32'00000000000000000000000000000001
Used module:         $paramod\Register\N=s32'00000000000000000000000000000100
Used module:         $paramod\Register\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000010
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000100
Used module:         \ARU
Used module:         \LGU

6.1.2. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         \Tristate
Used module:         \INC
Used module:         \IMM
Used module:         $paramod\Register\N=s32'00000000000000000000000000000001
Used module:         $paramod\Register\N=s32'00000000000000000000000000000100
Used module:         $paramod\Register\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000010
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000100
Used module:         \ARU
Used module:         \LGU
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$52 in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Marked 4 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$51 in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Marked 3 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$50 in module $paramod\Register\N=s32'00000000000000000000000000010000.
Marked 3 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$49 in module $paramod\Register\N=s32'00000000000000000000000000000100.
Marked 3 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$48 in module $paramod\Register\N=s32'00000000000000000000000000000001.
Removed 1 dead cases from process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271$46 in module Controller.
Marked 3 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271$46 in module Controller.
Removed 1 dead cases from process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45 in module Controller.
Marked 6 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45 in module Controller.
Marked 1 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:74$44 in module Controller.
Marked 2 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$55 in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Marked 2 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$54 in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Marked 4 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:105$29 in module IMM.
Marked 4 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$53 in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Marked 5 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:50$14 in module LGU.
Marked 2 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28$1 in module ARU.
Removed a total of 2 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 58 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `$paramod\Register\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$50'.
Found async reset \rst in `$paramod\Register\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$49'.
Found async reset \rst in `$paramod\Register\N=s32'00000000000000000000000000000001.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$48'.
Found async reset \rst in `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:74$44'.

6.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\Mux2to1\N=s32'00000000000000000000000000000010.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$52'.
     1/2: $2\out[1:0]
     2/2: $1\out[1:0]
Creating decoders for process `$paramod\Mux4to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$51'.
     1/4: $4\out[3:0]
     2/4: $3\out[3:0]
     3/4: $2\out[3:0]
     4/4: $1\out[3:0]
Creating decoders for process `$paramod\Register\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$50'.
     1/3: $3\out[15:0]
     2/3: $2\out[15:0]
     3/3: $1\out[15:0]
Creating decoders for process `$paramod\Register\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$49'.
     1/3: $3\out[3:0]
     2/3: $2\out[3:0]
     3/3: $1\out[3:0]
Creating decoders for process `$paramod\Register\N=s32'00000000000000000000000000000001.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$48'.
     1/3: $3\out[0:0]
     2/3: $2\out[0:0]
     3/3: $1\out[0:0]
Creating decoders for process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271$46'.
     1/3: $3\nstate[1:0]
     2/3: $2\nstate[1:0]
     3/3: $1\nstate[1:0]
Creating decoders for process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
     1/145: $5\ldPC[0:0]
     2/145: $5\selINC_PC[0:0]
     3/145: $6\INC1[0:0]
     4/145: $5\ldAC[0:0]
     5/145: $3\selMEM_AC[0:0]
     6/145: $3\readMEM[0:0]
     7/145: $2\selIN_ADR[0:0]
     8/145: $3\writeMEM[0:0]
     9/145: $5\ldSR[3:0]
    10/145: $2\selIN_MEM[0:0]
    11/145: $3\selARU_SR[0:0]
    12/145: $3\seldataBus[0:0]
    13/145: $3\selIR_ADR[0:0]
    14/145: $3\selAC_MEM[0:0]
    15/145: $5\selARU_AC[0:0]
    16/145: $3\selMEM_LGU[0:0]
    17/145: $3\selMO_ARU[0:0]
    18/145: $3\conOF[0:0]
    19/145: $5\ADD[0:0]
    20/145: $4\INC2[0:0]
    21/145: $5\INC1[0:0]
    22/145: $4\ldPC[0:0]
    23/145: $4\selINC_PC[0:0]
    24/145: $4\INC1[0:0]
    25/145: $4\ldOF[0:0]
    26/145: $4\selPC_OF[0:0]
    27/145: $4\ldSR[3:0]
    28/145: $4\selLGU_SR[0:0]
    29/145: $4\selIMM_PC[0:0]
    30/145: $4\selLGU_AC[0:0]
    31/145: $4\selARU_AC[0:0]
    32/145: $4\zeroAC[0:0]
    33/145: $4\ldAC[0:0]
    34/145: $4\sel1_ARU[0:0]
    35/145: $4\LSB0E[0:0]
    36/145: $4\NOT[0:0]
    37/145: $4\ADD[0:0]
    38/145: $3\ldSR[3:0]
    39/145: $3\selLGU_SR[0:0]
    40/145: $3\INC1[0:0]
    41/145: $3\selPC_OF[0:0]
    42/145: $3\ldOF[0:0]
    43/145: $3\selIMM_PC[0:0]
    44/145: $3\selINC_PC[0:0]
    45/145: $3\ldPC[0:0]
    46/145: $3\selLGU_AC[0:0]
    47/145: $3\selARU_AC[0:0]
    48/145: $3\zeroAC[0:0]
    49/145: $3\ldAC[0:0]
    50/145: $3\sel1_ARU[0:0]
    51/145: $3\LSB0E[0:0]
    52/145: $3\NOT[0:0]
    53/145: $3\ADD[0:0]
    54/145: $3\selSET_SR[0:0]
    55/145: $3\INC2[0:0]
    56/145: $3\selIMM_OF[0:0]
    57/145: $3\selIMM_LGU[0:0]
    58/145: $3\SE12bits[0:0]
    59/145: $3\SHF[1:0]
    60/145: $2\ldPC[0:0]
    61/145: $2\selINC_PC[0:0]
    62/145: $2\INC1[0:0]
    63/145: $2\ldAC[0:0]
    64/145: $2\selIMM_AC[0:0]
    65/145: $2\SE4bits[0:0]
    66/145: $2\writeMEM[0:0]
    67/145: $2\readMEM[0:0]
    68/145: $2\ldSR[3:0]
    69/145: $2\selPC_MEM[0:0]
    70/145: $2\selARU_SR[0:0]
    71/145: $2\selLGU_SR[0:0]
    72/145: $2\selSET_SR[0:0]
    73/145: $2\INC2[0:0]
    74/145: $2\seldataBus[0:0]
    75/145: $2\selIR_ADR[0:0]
    76/145: $2\selAC_MEM[0:0]
    77/145: $2\selIMM_OF[0:0]
    78/145: $2\selPC_OF[0:0]
    79/145: $2\ldOF[0:0]
    80/145: $2\selMEM_IN[0:0]
    81/145: $2\selINC_IN[0:0]
    82/145: $2\ldIN[0:0]
    83/145: $2\selIMM_PC[0:0]
    84/145: $2\selMEM_PC[0:0]
    85/145: $2\selLGU_AC[0:0]
    86/145: $2\selARU_AC[0:0]
    87/145: $2\selMEM_AC[0:0]
    88/145: $2\zeroAC[0:0]
    89/145: $2\selMEM_LGU[0:0]
    90/145: $2\selIMM_LGU[0:0]
    91/145: $2\selMO_ARU[0:0]
    92/145: $2\sel1_ARU[0:0]
    93/145: $2\LSB0E[0:0]
    94/145: $2\SE12bits[0:0]
    95/145: $2\conOF[0:0]
    96/145: $2\SHF[1:0]
    97/145: $2\NOT[0:0]
    98/145: $2\AND[0:0]
    99/145: $2\MUL[0:0]
   100/145: $2\ADD[0:0]
   101/145: $1\readMEM[0:0]
   102/145: $1\ldIR[0:0]
   103/145: $1\selPC_ADR[0:0]
   104/145: $1\writeMEM[0:0]
   105/145: $1\ldSR[3:0]
   106/145: $1\selPC_MEM[0:0]
   107/145: $1\selIN_MEM[0:0]
   108/145: $1\selARU_SR[0:0]
   109/145: $1\selLGU_SR[0:0]
   110/145: $1\selSET_SR[0:0]
   111/145: $1\INC2[0:0]
   112/145: $1\INC1[0:0]
   113/145: $1\seldataBus[0:0]
   114/145: $1\selIR_ADR[0:0]
   115/145: $1\selAC_MEM[0:0]
   116/145: $1\selIN_ADR[0:0]
   117/145: $1\selIMM_OF[0:0]
   118/145: $1\selPC_OF[0:0]
   119/145: $1\ldOF[0:0]
   120/145: $1\selMEM_IN[0:0]
   121/145: $1\selINC_IN[0:0]
   122/145: $1\ldIN[0:0]
   123/145: $1\selIMM_PC[0:0]
   124/145: $1\selMEM_PC[0:0]
   125/145: $1\selINC_PC[0:0]
   126/145: $1\ldPC[0:0]
   127/145: $1\selLGU_AC[0:0]
   128/145: $1\selARU_AC[0:0]
   129/145: $1\selMEM_AC[0:0]
   130/145: $1\selIMM_AC[0:0]
   131/145: $1\zeroAC[0:0]
   132/145: $1\ldAC[0:0]
   133/145: $1\selMEM_LGU[0:0]
   134/145: $1\selIMM_LGU[0:0]
   135/145: $1\selMO_ARU[0:0]
   136/145: $1\sel1_ARU[0:0]
   137/145: $1\LSB0E[0:0]
   138/145: $1\SE4bits[0:0]
   139/145: $1\SE12bits[0:0]
   140/145: $1\conOF[0:0]
   141/145: $1\SHF[1:0]
   142/145: $1\NOT[0:0]
   143/145: $1\AND[0:0]
   144/145: $1\MUL[0:0]
   145/145: $1\ADD[0:0]
Creating decoders for process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:74$44'.
     1/1: $0\pstate[1:0]
Creating decoders for process `$paramod\Mux2to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$55'.
     1/2: $2\out[3:0]
     2/2: $1\out[3:0]
Creating decoders for process `$paramod\Mux2to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$54'.
     1/2: $2\out[15:0]
     2/2: $1\out[15:0]
Creating decoders for process `\IMM.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:105$29'.
     1/4: $4\out[15:0]
     2/4: $3\out[15:0]
     3/4: $2\out[15:0]
     4/4: $1\out[15:0]
Creating decoders for process `$paramod\Mux4to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$53'.
     1/4: $4\out[15:0]
     2/4: $3\out[15:0]
     3/4: $2\out[15:0]
     4/4: $1\out[15:0]
Creating decoders for process `\LGU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:50$14'.
     1/5: $5\out[15:0]
     2/5: $4\out[15:0]
     3/5: $3\out[15:0]
     4/5: $2\out[15:0]
     5/5: $1\out[15:0]
Creating decoders for process `\ARU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28$1'.
     1/3: $2\out[15:0]
     2/3: $1\C[0:0]
     3/3: $1\out[15:0]

6.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `$paramod\Mux2to1\N=s32'00000000000000000000000000000010.\out' from process `$paramod\Mux2to1\N=s32'00000000000000000000000000000010.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$52': $auto$proc_dlatch.cc:427:proc_dlatch$2138
Latch inferred for signal `$paramod\Mux4to1\N=s32'00000000000000000000000000000100.\out' from process `$paramod\Mux4to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$51': $auto$proc_dlatch.cc:427:proc_dlatch$2165
Latch inferred for signal `\Controller.\nstate' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271$46': $auto$proc_dlatch.cc:427:proc_dlatch$2248
No latch inferred for signal `\Controller.\ADD' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\MUL' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\AND' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\NOT' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\SHF' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\conOF' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\SE12bits' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\SE4bits' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\LSB0E' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\sel1_ARU' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selMO_ARU' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIMM_LGU' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selMEM_LGU' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\ldAC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\zeroAC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIMM_AC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selMEM_AC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selARU_AC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selLGU_AC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\ldPC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selINC_PC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selMEM_PC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIMM_PC' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\ldIN' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selINC_IN' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selMEM_IN' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\ldIR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\ldOF' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selPC_OF' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIMM_OF' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIN_ADR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selPC_ADR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selAC_MEM' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIR_ADR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\seldataBus' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\INC1' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\INC2' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selSET_SR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selLGU_SR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selARU_SR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selIN_MEM' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\selPC_MEM' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\ldSR' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\readMEM' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
No latch inferred for signal `\Controller.\writeMEM' from process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
Latch inferred for signal `$paramod\Mux2to1\N=s32'00000000000000000000000000000100.\out' from process `$paramod\Mux2to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$55': $auto$proc_dlatch.cc:427:proc_dlatch$2271
Latch inferred for signal `$paramod\Mux2to1\N=s32'00000000000000000000000000010000.\out' from process `$paramod\Mux2to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$54': $auto$proc_dlatch.cc:427:proc_dlatch$2298
Latch inferred for signal `\IMM.\out' from process `\IMM.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:105$29': $auto$proc_dlatch.cc:427:proc_dlatch$2325
Latch inferred for signal `$paramod\Mux4to1\N=s32'00000000000000000000000000010000.\out' from process `$paramod\Mux4to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$53': $auto$proc_dlatch.cc:427:proc_dlatch$2408
Latch inferred for signal `\LGU.\out' from process `\LGU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:50$14': $auto$proc_dlatch.cc:427:proc_dlatch$2491
Latch inferred for signal `\ARU.\C' from process `\ARU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28$1': $auto$proc_dlatch.cc:427:proc_dlatch$2614
Latch inferred for signal `\ARU.\out' from process `\ARU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28$1': $auto$proc_dlatch.cc:427:proc_dlatch$2625

6.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\Register\N=s32'00000000000000000000000000010000.\out' using process `$paramod\Register\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$50'.
  created $adff cell `$procdff$2652' with positive edge clock and positive level reset.
Creating register for signal `$paramod\Register\N=s32'00000000000000000000000000000100.\out' using process `$paramod\Register\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$49'.
  created $adff cell `$procdff$2653' with positive edge clock and positive level reset.
Creating register for signal `$paramod\Register\N=s32'00000000000000000000000000000001.\out' using process `$paramod\Register\N=s32'00000000000000000000000000000001.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$48'.
  created $adff cell `$procdff$2654' with positive edge clock and positive level reset.
Creating register for signal `\Controller.\pstate' using process `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:74$44'.
  created $adff cell `$procdff$2655' with positive edge clock and positive level reset.

6.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `$paramod\Mux2to1\N=s32'00000000000000000000000000000010.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$52'.
Removing empty process `$paramod\Mux2to1\N=s32'00000000000000000000000000000010.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$52'.
Found and cleaned up 4 empty switches in `$paramod\Mux4to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$51'.
Removing empty process `$paramod\Mux4to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$51'.
Found and cleaned up 2 empty switches in `$paramod\Register\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$50'.
Removing empty process `$paramod\Register\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$50'.
Found and cleaned up 2 empty switches in `$paramod\Register\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$49'.
Removing empty process `$paramod\Register\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$49'.
Found and cleaned up 2 empty switches in `$paramod\Register\N=s32'00000000000000000000000000000001.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$48'.
Removing empty process `$paramod\Register\N=s32'00000000000000000000000000000001.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:75$48'.
Found and cleaned up 3 empty switches in `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271$46'.
Removing empty process `Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:271$46'.
Found and cleaned up 6 empty switches in `\Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
Removing empty process `Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:81$45'.
Removing empty process `Controller.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/Controller.v:74$44'.
Found and cleaned up 2 empty switches in `$paramod\Mux2to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$55'.
Removing empty process `$paramod\Mux2to1\N=s32'00000000000000000000000000000100.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$55'.
Found and cleaned up 2 empty switches in `$paramod\Mux2to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$54'.
Removing empty process `$paramod\Mux2to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:145$54'.
Found and cleaned up 4 empty switches in `\IMM.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:105$29'.
Removing empty process `IMM.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:105$29'.
Found and cleaned up 4 empty switches in `$paramod\Mux4to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$53'.
Removing empty process `$paramod\Mux4to1\N=s32'00000000000000000000000000010000.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:125$53'.
Found and cleaned up 5 empty switches in `\LGU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:50$14'.
Removing empty process `LGU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:50$14'.
Found and cleaned up 2 empty switches in `\ARU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28$1'.
Removing empty process `ARU.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:28$1'.
Cleaned up 40 empty switches.

6.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
<suppressed ~10 debug messages>
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
<suppressed ~29 debug messages>
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module TopLevel.
Optimizing module Controller.
<suppressed ~90 debug messages>
Optimizing module Datapath.
Optimizing module Tristate.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
<suppressed ~10 debug messages>
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
<suppressed ~10 debug messages>
Optimizing module IMM.
<suppressed ~29 debug messages>
Optimizing module INC.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
<suppressed ~29 debug messages>
Optimizing module LGU.
<suppressed ~46 debug messages>
Optimizing module ARU.
<suppressed ~17 debug messages>

6.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module TopLevel.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module Tristate.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module IMM.
Optimizing module INC.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module LGU.
Optimizing module ARU.

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \Tristate..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \ARU..
Removed 12 unused cells and 559 unused wires.
<suppressed ~27 debug messages>

6.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\Mux2to1\N=s32'00000000000000000000000000000010...
Checking module $paramod\Mux2to1\N=s32'00000000000000000000000000000100...
Checking module $paramod\Mux2to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\Mux4to1\N=s32'00000000000000000000000000000100...
Checking module $paramod\Mux4to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\Register\N=s32'00000000000000000000000000000001...
Checking module $paramod\Register\N=s32'00000000000000000000000000000100...
Checking module $paramod\Register\N=s32'00000000000000000000000000010000...
Checking module ARU...
Checking module Controller...
Checking module Datapath...
Checking module IMM...
Checking module INC...
Checking module LGU...
Checking module TopLevel...
Checking module Tristate...
Found and reported 0 problems.

6.6. Executing OPT pass (performing simple optimizations).

6.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
<suppressed ~3 debug messages>
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
<suppressed ~3 debug messages>
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
<suppressed ~3 debug messages>
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
<suppressed ~18 debug messages>
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
<suppressed ~18 debug messages>
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Controller'.
<suppressed ~2871 debug messages>
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
<suppressed ~18 debug messages>
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
<suppressed ~30 debug messages>
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 989 cells.

6.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$117.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$108.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$99.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$283.
    dead port 2/2 on $mux $procmux$290.
    dead port 2/2 on $mux $procmux$1421.
    dead port 2/2 on $mux $procmux$1694.
    dead port 2/2 on $mux $procmux$297.
    dead port 2/2 on $mux $procmux$305.
    dead port 2/2 on $mux $procmux$1505.
    dead port 2/2 on $mux $procmux$312.
    dead port 2/2 on $mux $procmux$321.
    dead port 2/2 on $mux $procmux$323.
    dead port 2/2 on $mux $procmux$325.
    dead port 2/2 on $mux $procmux$1358.
    dead port 2/2 on $mux $procmux$334.
    dead port 2/2 on $mux $procmux$1190.
    dead port 2/2 on $mux $procmux$336.
    dead port 2/2 on $mux $procmux$1064.
    dead port 2/2 on $mux $procmux$338.
    dead port 2/2 on $mux $procmux$355.
    dead port 2/2 on $mux $procmux$357.
    dead port 2/2 on $mux $procmux$359.
    dead port 2/2 on $mux $procmux$376.
    dead port 2/2 on $mux $procmux$1820.
    dead port 2/2 on $mux $procmux$378.
    dead port 2/2 on $mux $procmux$380.
    dead port 2/2 on $mux $procmux$1001.
    dead port 2/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$1148.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$1106.
    dead port 2/2 on $mux $procmux$401.
    dead port 2/2 on $mux $procmux$419.
    dead port 2/2 on $mux $procmux$421.
    dead port 2/2 on $mux $procmux$1610.
    dead port 2/2 on $mux $procmux$423.
    dead port 2/2 on $mux $procmux$441.
    dead port 2/2 on $mux $procmux$443.
    dead port 2/2 on $mux $procmux$445.
    dead port 2/2 on $mux $procmux$1715.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$184.
    dead port 2/2 on $mux $procmux$463.
    dead port 2/2 on $mux $procmux$1253.
    dead port 2/2 on $mux $procmux$465.
    dead port 2/2 on $mux $procmux$481.
    dead port 2/2 on $mux $procmux$483.
    dead port 2/2 on $mux $procmux$485.
    dead port 2/2 on $mux $procmux$502.
    dead port 2/2 on $mux $procmux$504.
    dead port 2/2 on $mux $procmux$1442.
    dead port 2/2 on $mux $procmux$506.
    dead port 2/2 on $mux $procmux$1526.
    dead port 2/2 on $mux $procmux$521.
    dead port 2/2 on $mux $procmux$523.
    dead port 2/2 on $mux $procmux$525.
    dead port 2/2 on $mux $procmux$539.
    dead port 2/2 on $mux $procmux$541.
    dead port 2/2 on $mux $procmux$543.
    dead port 2/2 on $mux $procmux$559.
    dead port 2/2 on $mux $procmux$561.
    dead port 2/2 on $mux $procmux$563.
    dead port 2/2 on $mux $procmux$1316.
    dead port 2/2 on $mux $procmux$578.
    dead port 2/2 on $mux $procmux$580.
    dead port 2/2 on $mux $procmux$1379.
    dead port 2/2 on $mux $procmux$582.
    dead port 2/2 on $mux $procmux$596.
    dead port 2/2 on $mux $procmux$598.
    dead port 2/2 on $mux $procmux$600.
    dead port 2/2 on $mux $procmux$1631.
    dead port 2/2 on $mux $procmux$617.
    dead port 2/2 on $mux $procmux$619.
    dead port 2/2 on $mux $procmux$621.
    dead port 2/2 on $mux $procmux$1736.
    dead port 2/2 on $mux $procmux$636.
    dead port 2/2 on $mux $procmux$638.
    dead port 2/2 on $mux $procmux$640.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$174.
    dead port 2/2 on $mux $procmux$656.
    dead port 2/2 on $mux $procmux$658.
    dead port 2/2 on $mux $procmux$666.
    dead port 2/2 on $mux $procmux$668.
    dead port 2/2 on $mux $procmux$681.
    dead port 2/2 on $mux $procmux$1211.
    dead port 2/2 on $mux $procmux$683.
    dead port 2/2 on $mux $procmux$1043.
    dead port 2/2 on $mux $procmux$692.
    dead port 2/2 on $mux $procmux$192.
    dead port 2/2 on $mux $procmux$694.
    dead port 2/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$707.
    dead port 2/2 on $mux $procmux$709.
    dead port 2/2 on $mux $procmux$1547.
    dead port 2/2 on $mux $procmux$722.
    dead port 2/2 on $mux $procmux$724.
    dead port 2/2 on $mux $procmux$1463.
    dead port 2/2 on $mux $procmux$737.
    dead port 2/2 on $mux $procmux$739.
    dead port 2/2 on $mux $procmux$752.
    dead port 2/2 on $mux $procmux$754.
    dead port 2/2 on $mux $procmux$767.
    dead port 2/2 on $mux $procmux$769.
    dead port 2/2 on $mux $procmux$781.
    dead port 2/2 on $mux $procmux$783.
    dead port 2/2 on $mux $procmux$1757.
    dead port 2/2 on $mux $procmux$796.
    dead port 2/2 on $mux $procmux$1169.
    dead port 2/2 on $mux $procmux$798.
    dead port 2/2 on $mux $procmux$1274.
    dead port 2/2 on $mux $procmux$811.
    dead port 2/2 on $mux $procmux$813.
    dead port 2/2 on $mux $procmux$1652.
    dead port 2/2 on $mux $procmux$1085.
    dead port 2/2 on $mux $procmux$825.
    dead port 2/2 on $mux $procmux$827.
    dead port 2/2 on $mux $procmux$840.
    dead port 2/2 on $mux $procmux$842.
    dead port 2/2 on $mux $procmux$855.
    dead port 2/2 on $mux $procmux$857.
    dead port 2/2 on $mux $procmux$1127.
    dead port 2/2 on $mux $procmux$870.
    dead port 2/2 on $mux $procmux$872.
    dead port 2/2 on $mux $procmux$1337.
    dead port 2/2 on $mux $procmux$1400.
    dead port 2/2 on $mux $procmux$885.
    dead port 2/2 on $mux $procmux$887.
    dead port 2/2 on $mux $procmux$894.
    dead port 2/2 on $mux $procmux$896.
    dead port 2/2 on $mux $procmux$1568.
    dead port 2/2 on $mux $procmux$904.
    dead port 2/2 on $mux $procmux$906.
    dead port 2/2 on $mux $procmux$918.
    dead port 2/2 on $mux $procmux$920.
    dead port 2/2 on $mux $procmux$1778.
    dead port 2/2 on $mux $procmux$202.
    dead port 2/2 on $mux $procmux$931.
    dead port 2/2 on $mux $procmux$933.
    dead port 2/2 on $mux $procmux$210.
    dead port 2/2 on $mux $procmux$1484.
    dead port 2/2 on $mux $procmux$945.
    dead port 2/2 on $mux $procmux$947.
    dead port 2/2 on $mux $procmux$1673.
    dead port 2/2 on $mux $procmux$957.
    dead port 2/2 on $mux $procmux$219.
    dead port 2/2 on $mux $procmux$959.
    dead port 2/2 on $mux $procmux$228.
    dead port 2/2 on $mux $procmux$235.
    dead port 2/2 on $mux $procmux$1232.
    dead port 2/2 on $mux $procmux$1022.
    dead port 2/2 on $mux $procmux$243.
    dead port 2/2 on $mux $procmux$250.
    dead port 2/2 on $mux $procmux$980.
    dead port 2/2 on $mux $procmux$259.
    dead port 2/2 on $mux $procmux$1799.
    dead port 2/2 on $mux $procmux$267.
    dead port 2/2 on $mux $procmux$276.
    dead port 2/2 on $mux $procmux$1589.
    dead port 2/2 on $mux $procmux$1295.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 161 multiplexer ports.
<suppressed ~58 debug messages>

6.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
    New ctrl vector for $pmux cell $procmux$478: $auto$opt_reduce.cc:134:opt_mux$2657
    New ctrl vector for $pmux cell $procmux$1740: { $auto$opt_reduce.cc:134:opt_mux$2659 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1719: { $auto$opt_reduce.cc:134:opt_mux$2661 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1068: { $auto$opt_reduce.cc:134:opt_mux$2665 $auto$opt_reduce.cc:134:opt_mux$2663 }
    New ctrl vector for $pmux cell $procmux$1257: { $auto$opt_reduce.cc:134:opt_mux$2669 $auto$opt_reduce.cc:134:opt_mux$2667 }
    New ctrl vector for $pmux cell $procmux$1215: { $auto$opt_reduce.cc:134:opt_mux$2671 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1110: { $auto$opt_reduce.cc:134:opt_mux$2675 $auto$opt_reduce.cc:134:opt_mux$2673 }
    New ctrl vector for $pmux cell $procmux$1698: { $auto$opt_reduce.cc:134:opt_mux$2679 $auto$opt_reduce.cc:134:opt_mux$2677 }
    New ctrl vector for $pmux cell $procmux$1047: { $procmux$1000_CMP $auto$opt_reduce.cc:134:opt_mux$2681 }
    New ctrl vector for $pmux cell $procmux$1425: { $auto$opt_reduce.cc:134:opt_mux$2685 $auto$opt_reduce.cc:134:opt_mux$2683 }
    New ctrl vector for $pmux cell $procmux$1551: { $auto$opt_reduce.cc:134:opt_mux$2687 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1005: { $auto$opt_reduce.cc:134:opt_mux$2691 $auto$opt_reduce.cc:134:opt_mux$2689 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1467: { $procmux$1008_CMP $auto$opt_reduce.cc:134:opt_mux$2693 }
    New ctrl vector for $mux cell $procmux$765: { }
    New ctrl vector for $pmux cell $procmux$1530: { $procmux$1020_CMP $auto$opt_reduce.cc:134:opt_mux$2695 }
    New ctrl vector for $pmux cell $procmux$776: { $procmux$356_CMP $auto$opt_reduce.cc:134:opt_mux$2697 }
    New ctrl vector for $pmux cell $procmux$152: { $procmux$1002_CMP $procmux$153_CMP }
    New ctrl vector for $pmux cell $procmux$1446: { $auto$opt_reduce.cc:134:opt_mux$2701 $auto$opt_reduce.cc:134:opt_mux$2699 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1761: { $auto$opt_reduce.cc:134:opt_mux$2705 $auto$opt_reduce.cc:134:opt_mux$2703 }
    New ctrl vector for $pmux cell $procmux$820: { $procmux$356_CMP $auto$opt_reduce.cc:134:opt_mux$2707 }
    New ctrl vector for $pmux cell $procmux$1656: { $auto$opt_reduce.cc:134:opt_mux$2709 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1278: { $auto$opt_reduce.cc:134:opt_mux$2713 $auto$opt_reduce.cc:134:opt_mux$2711 }
    New ctrl vector for $pmux cell $procmux$1362: { $auto$opt_reduce.cc:134:opt_mux$2715 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1173: { $auto$opt_reduce.cc:134:opt_mux$2719 $auto$opt_reduce.cc:134:opt_mux$2717 }
    New ctrl vector for $pmux cell $procmux$575: $auto$opt_reduce.cc:134:opt_mux$2721
    New ctrl vector for $pmux cell $procmux$1089: { $auto$opt_reduce.cc:134:opt_mux$2725 $auto$opt_reduce.cc:134:opt_mux$2723 }
    New ctrl vector for $pmux cell $procmux$1152: { $procmux$1007_CMP $auto$opt_reduce.cc:134:opt_mux$2727 }
    New ctrl vector for $pmux cell $procmux$1404: { $procmux$1016_CMP $auto$opt_reduce.cc:134:opt_mux$2729 }
    New ctrl vector for $pmux cell $procmux$1131: { $auto$opt_reduce.cc:134:opt_mux$2735 $auto$opt_reduce.cc:134:opt_mux$2733 $procmux$1010_CMP $auto$opt_reduce.cc:134:opt_mux$2731 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1320: { $auto$opt_reduce.cc:134:opt_mux$2737 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1572: { $auto$opt_reduce.cc:134:opt_mux$2741 $auto$opt_reduce.cc:134:opt_mux$2739 }
    New ctrl vector for $pmux cell $procmux$927: $auto$opt_reduce.cc:134:opt_mux$2743
    New ctrl vector for $pmux cell $procmux$1341: { $auto$opt_reduce.cc:134:opt_mux$2745 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1194: { $auto$opt_reduce.cc:134:opt_mux$2749 $auto$opt_reduce.cc:134:opt_mux$2747 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1614: { $auto$opt_reduce.cc:134:opt_mux$2753 $auto$opt_reduce.cc:134:opt_mux$2751 }
    New ctrl vector for $pmux cell $procmux$207: $auto$opt_reduce.cc:134:opt_mux$2755
    New ctrl vector for $pmux cell $procmux$940: $auto$opt_reduce.cc:134:opt_mux$2757
    New ctrl vector for $pmux cell $procmux$178: $auto$opt_reduce.cc:134:opt_mux$2759
    New ctrl vector for $pmux cell $procmux$1782: { $procmux$1010_CMP $auto$opt_reduce.cc:134:opt_mux$2761 }
    New ctrl vector for $pmux cell $procmux$1593: { $auto$opt_reduce.cc:134:opt_mux$2765 $auto$opt_reduce.cc:134:opt_mux$2763 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$215: $auto$opt_reduce.cc:134:opt_mux$2767
    New ctrl vector for $pmux cell $procmux$1488: { $auto$opt_reduce.cc:134:opt_mux$2771 $auto$opt_reduce.cc:134:opt_mux$2769 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$458: $auto$opt_reduce.cc:134:opt_mux$2773
    New ctrl vector for $pmux cell $procmux$189: $auto$opt_reduce.cc:134:opt_mux$2775
    New ctrl vector for $pmux cell $procmux$963: { $auto$opt_reduce.cc:134:opt_mux$2779 $auto$opt_reduce.cc:134:opt_mux$2777 }
    New ctrl vector for $pmux cell $procmux$225: $auto$opt_reduce.cc:134:opt_mux$2781
    New ctrl vector for $pmux cell $procmux$1677: { $auto$opt_reduce.cc:134:opt_mux$2783 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$158: $auto$opt_reduce.cc:134:opt_mux$2785
    New ctrl vector for $pmux cell $procmux$168: $auto$opt_reduce.cc:134:opt_mux$2787
    New ctrl vector for $pmux cell $procmux$1383: { $auto$opt_reduce.cc:134:opt_mux$2791 $auto$opt_reduce.cc:134:opt_mux$2789 }
    New ctrl vector for $pmux cell $procmux$1236: { $auto$opt_reduce.cc:134:opt_mux$2793 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1026: { $auto$opt_reduce.cc:134:opt_mux$2797 $auto$opt_reduce.cc:134:opt_mux$2795 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$984: { $auto$opt_reduce.cc:134:opt_mux$2801 $auto$opt_reduce.cc:134:opt_mux$2799 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$256: $auto$opt_reduce.cc:134:opt_mux$2803
    New ctrl vector for $pmux cell $procmux$124: $auto$opt_reduce.cc:134:opt_mux$2805
    New ctrl vector for $pmux cell $procmux$1635: { $auto$opt_reduce.cc:134:opt_mux$2807 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1803: { $auto$opt_reduce.cc:134:opt_mux$2811 $auto$opt_reduce.cc:134:opt_mux$2809 $procmux$1006_CMP }
    New ctrl vector for $pmux cell $procmux$1299: { $procmux$1018_CMP $auto$opt_reduce.cc:134:opt_mux$2813 }
    New ctrl vector for $pmux cell $procmux$1509: { $auto$opt_reduce.cc:134:opt_mux$2817 $auto$opt_reduce.cc:134:opt_mux$2815 $procmux$1006_CMP }
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 59 changes.

6.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
<suppressed ~165 debug messages>
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 55 cells.

6.6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 0 unused cells and 1203 unused wires.
<suppressed ~12 debug messages>

6.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

6.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

6.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.6.13. Executing OPT_DFF pass (perform DFF optimizations).

6.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.6.16. Finished OPT passes. (There is nothing left to do.)

6.7. Executing FSM pass (extract and optimize FSM).

6.7.1. Executing FSM_DETECT pass (finding FSMs in design).

6.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.8. Executing OPT pass (performing simple optimizations).

6.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

6.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

6.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$2654 ($adff) from module $paramod\Register\N=s32'00000000000000000000000000000001 (D = $0\out[0:0], Q = \out).
Adding EN signal on $procdff$2653 ($adff) from module $paramod\Register\N=s32'00000000000000000000000000000100 (D = $0\out[3:0], Q = \out).
Adding EN signal on $procdff$2652 ($adff) from module $paramod\Register\N=s32'00000000000000000000000000010000 (D = $0\out[15:0], Q = \out).

6.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
<suppressed ~1 debug messages>
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
<suppressed ~1 debug messages>
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
<suppressed ~1 debug messages>
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.8.9. Rerunning OPT passes. (Maybe there is more to do..)

6.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

6.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

6.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.8.13. Executing OPT_DFF pass (perform DFF optimizations).

6.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.8.16. Finished OPT passes. (There is nothing left to do.)

6.9. Executing WREDUCE pass (reducing word size of cells).
Removed cell $paramod\Register\N=s32'00000000000000000000000000000001.$procmux$114 ($mux).
Removed cell $paramod\Register\N=s32'00000000000000000000000000000100.$procmux$105 ($mux).
Removed cell $paramod\Register\N=s32'00000000000000000000000000010000.$procmux$96 ($mux).
Removed top 1 bits (of 2) from mux cell Controller.$procmux$147 ($mux).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$322_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell Controller.$procmux$375_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell Controller.$procmux$459_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell Controller.$procmux$460_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell Controller.$procmux$538_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$664_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell Controller.$procmux$720_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$777_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Controller.$procmux$778_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Controller.$procmux$779_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell Controller.$procmux$1002_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$1014_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$1015_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$1016_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell Controller.$procmux$1017_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Controller.$procmux$1018_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell Controller.$procmux$1019_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell Controller.$procmux$1020_CMP0 ($eq).
Removed top 1 bits (of 2) from wire Controller.$2\nstate[1:0].
Removed top 1 bits (of 2) from port B of cell LGU.$eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:57$21 ($eq).

6.10. Executing PEEPOPT pass (run peephole optimizers).

6.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 0 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

6.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Register\N=s32'00000000000000000000000000000001:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Register\N=s32'00000000000000000000000000000100:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Register\N=s32'00000000000000000000000000010000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ARU:
  creating $macc model for $add$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:30$2 ($add).
  creating $macc model for $mul$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:32$3 ($mul).
  creating $alu model for $macc $add$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:30$2.
  creating $macc cell for $mul$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:32$3: $auto$alumacc.cc:365:replace_macc$2828
  creating $alu cell for $add$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:30$2: $auto$alumacc.cc:485:replace_alu$2829
  created 1 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module Controller:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Datapath:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module IMM:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module INC:
  creating $macc model for $add$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:93$28 ($add).
  creating $alu model for $macc $add$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:93$28.
  creating $alu cell for $add$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:93$28: $auto$alumacc.cc:485:replace_alu$2832
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module LGU:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module TopLevel:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module Tristate:
  created 0 $alu and 0 $macc cells.

6.13. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module LGU that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:56$20 ($sshr):
    Found 1 activation_patterns using ctrl signal { $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:55$19_Y \NOT \AND }.
    No candidates found.
  Analyzing resource sharing options for $shr$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:58$22 ($shr):
    Found 1 activation_patterns using ctrl signal { $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:57$21_Y $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:55$19_Y \NOT \AND }.
    No candidates found.
  Analyzing resource sharing options for $shl$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:60$24 ($shl):
    Found 1 activation_patterns using ctrl signal { $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:57$21_Y $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/DPComponents.v:55$19_Y \NOT \AND }.
    No candidates found.

6.14. Executing OPT pass (performing simple optimizations).

6.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~64 debug messages>

6.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

6.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.14.6. Executing OPT_DFF pass (perform DFF optimizations).

6.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.14.9. Finished OPT passes. (There is nothing left to do.)

6.15. Executing MEMORY pass.

6.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

6.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

6.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.17. Executing OPT pass (performing simple optimizations).

6.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
<suppressed ~122 debug messages>
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.
<suppressed ~1 debug messages>

6.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.17.3. Executing OPT_DFF pass (perform DFF optimizations).

6.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 15 unused cells and 37 unused wires.
<suppressed ~16 debug messages>

6.17.5. Finished fast OPT passes.

6.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.19. Executing OPT pass (performing simple optimizations).

6.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

6.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
    Consolidated identical input bits for $mux cell $procmux$124:
      Old ports: A=2'00, B=2'10, Y=$3\nstate[1:0]
      New ports: A=1'0, B=1'1, Y=$3\nstate[1:0] [1]
      New connections: $3\nstate[1:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$233:
      Old ports: A=4'0000, B=4'1111, Y=$5\ldSR[3:0]
      New ports: A=1'0, B=1'1, Y=$5\ldSR[3:0] [0]
      New connections: $5\ldSR[3:0] [3:1] = { $5\ldSR[3:0] [0] $5\ldSR[3:0] [0] $5\ldSR[3:0] [0] }
    Consolidated identical input bits for $mux cell $procmux$458:
      Old ports: A=4'0000, B=4'1100, Y=$4\ldSR[3:0]
      New ports: A=1'0, B=1'1, Y=$4\ldSR[3:0] [2]
      New connections: { $4\ldSR[3:0] [3] $4\ldSR[3:0] [1:0] } = { $4\ldSR[3:0] [2] 2'00 }
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
    Consolidated identical input bits for $mux cell $procmux$2034:
      Old ports: A={ \in0 [11] \in0 [11] \in0 [11] \in0 [11] \in0 }, B={ \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3:0] }, Y=$3\out[15:0]
      New ports: A=\in0 [11:4], B={ \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] \in0 [3] }, Y=$3\out[15:0] [11:4]
      New connections: { $3\out[15:0] [15:12] $3\out[15:0] [3:0] } = { $3\out[15:0] [11] $3\out[15:0] [11] $3\out[15:0] [11] $3\out[15:0] [11] \in0 [3:0] }
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 4 changes.

6.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.19.6. Executing OPT_SHARE pass.

6.19.7. Executing OPT_DFF pass (perform DFF optimizations).

6.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
<suppressed ~3 debug messages>
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.19.10. Rerunning OPT passes. (Maybe there is more to do..)

6.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

6.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

6.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.19.14. Executing OPT_SHARE pass.

6.19.15. Executing OPT_DFF pass (perform DFF optimizations).

6.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

6.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.19.18. Rerunning OPT passes. (Maybe there is more to do..)

6.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

6.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

6.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

6.19.22. Executing OPT_SHARE pass.

6.19.23. Executing OPT_DFF pass (perform DFF optimizations).

6.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

6.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

6.19.26. Finished OPT passes. (There is nothing left to do.)

6.20. Executing TECHMAP pass (map to technology primitives).

6.20.1. Executing Verilog-2005 frontend: /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/bin/../share/yosys/techmap.v
Parsing Verilog input from `/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$constmap:d38d98c7f121c352e37113a9a1041f7c16bf352c$paramod$a159fd594aa4d82d162ee007c81a76b61a65f2d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$constmap:d38d98c7f121c352e37113a9a1041f7c16bf352c$paramod$e6c40a88b049c1ead88f36127e998b9d1a0ad336\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:d38d98c7f121c352e37113a9a1041f7c16bf352c$paramod$a532526ff23e2a50bd298b320cfe75526c907658\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $dlatch.
Using template $paramod$cc01eb4b12ca3a903e6a730e12703045df75a1af\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xnor.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$bf2533632d512eac76dd186c0da49367e29b8e98\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$2470b7ea32c975a55c3ab8b283381b72d09e16d3\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper maccmap for cells of type $macc.
  add \in0 [7:0] * \in1 [7:0] (8x8 bits, unsigned)
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010001 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
No more expansions possible.
<suppressed ~1982 debug messages>

6.21. Executing OPT pass (performing simple optimizations).

6.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
<suppressed ~404 debug messages>
Optimizing module Controller.
<suppressed ~183 debug messages>
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
<suppressed ~84 debug messages>
Optimizing module LGU.
<suppressed ~39 debug messages>
Optimizing module TopLevel.
Optimizing module Tristate.

6.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
<suppressed ~39 debug messages>
Finding identical cells in module `\Controller'.
<suppressed ~906 debug messages>
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
<suppressed ~108 debug messages>
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 351 cells.

6.21.3. Executing OPT_DFF pass (perform DFF optimizations).

6.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 64 unused cells and 843 unused wires.
<suppressed ~71 debug messages>

6.21.5. Finished fast OPT passes.

6.22. Executing ABC pass (technology mapping using ABC).

6.22.1. Extracting gate netlist of module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 3 outputs.

6.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

6.22.2. Extracting gate netlist of module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 10 inputs and 5 outputs.

6.22.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.2.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        4
ABC RESULTS:               NOR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

6.22.3. Extracting gate netlist of module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 20 gates and 54 wires to a netlist network with 34 inputs and 17 outputs.

6.22.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.3.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:               NOR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       17
Removing temp directory.

6.22.4. Extracting gate netlist of module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 25 gates and 45 wires to a netlist network with 20 inputs and 5 outputs.

6.22.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.4.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               MUX cells:       12
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:        5
Removing temp directory.

6.22.5. Extracting gate netlist of module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 129 wires to a netlist network with 68 inputs and 17 outputs.

6.22.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.5.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               MUX cells:       48
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:        internal signals:       44
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       17
Removing temp directory.

6.22.6. Extracting gate netlist of module `$paramod\Register\N=s32'00000000000000000000000000000001' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.

6.22.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.6.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        2
Removing temp directory.

6.22.7. Extracting gate netlist of module `$paramod\Register\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 12 wires to a netlist network with 6 inputs and 5 outputs.

6.22.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.7.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        5
Removing temp directory.

6.22.8. Extracting gate netlist of module `$paramod\Register\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 36 wires to a netlist network with 18 inputs and 17 outputs.

6.22.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.8.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       17
Removing temp directory.

6.22.9. Extracting gate netlist of module `\ARU' to `<abc-temp-dir>/input.blif'..
Extracted 493 gates and 543 wires to a netlist network with 50 inputs and 20 outputs.

6.22.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.9.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       57
ABC RESULTS:            ANDNOT cells:      127
ABC RESULTS:               MUX cells:       17
ABC RESULTS:              NAND cells:       32
ABC RESULTS:               NOR cells:       35
ABC RESULTS:               NOT cells:       13
ABC RESULTS:                OR cells:       65
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              XNOR cells:       39
ABC RESULTS:               XOR cells:      104
ABC RESULTS:        internal signals:      473
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       20
Removing temp directory.

6.22.10. Extracting gate netlist of module `\Controller' to `<abc-temp-dir>/input.blif'..
Extracted 413 gates and 435 wires to a netlist network with 20 inputs and 49 outputs.

6.22.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       10
ABC RESULTS:            ANDNOT cells:      120
ABC RESULTS:               MUX cells:        7
ABC RESULTS:              NAND cells:        8
ABC RESULTS:               NOR cells:       26
ABC RESULTS:               NOT cells:        5
ABC RESULTS:                OR cells:      144
ABC RESULTS:             ORNOT cells:       22
ABC RESULTS:        internal signals:      366
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       49
Removing temp directory.

6.22.11. Extracting gate netlist of module `\Datapath' to `<abc-temp-dir>/input.blif'..
Extracted 15 gates and 27 wires to a netlist network with 12 inputs and 1 outputs.

6.22.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.11.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:                OR cells:        3
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        1
Removing temp directory.

6.22.12. Extracting gate netlist of module `\IMM' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 74 wires to a netlist network with 20 inputs and 17 outputs.

6.22.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.12.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       13
ABC RESULTS:               MUX cells:       28
ABC RESULTS:               NOR cells:        1
ABC RESULTS:                OR cells:        6
ABC RESULTS:        internal signals:       37
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       17
Removing temp directory.

6.22.13. Extracting gate netlist of module `\INC' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 60 wires to a netlist network with 18 inputs and 16 outputs.

6.22.13.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.13.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        9
ABC RESULTS:              NAND cells:        8
ABC RESULTS:                OR cells:        8
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:               XOR cells:        9
ABC RESULTS:        internal signals:       26
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       16
Removing temp directory.

6.22.14. Extracting gate netlist of module `\LGU' to `<abc-temp-dir>/input.blif'..
Extracted 409 gates and 462 wires to a netlist network with 52 inputs and 18 outputs.

6.22.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.22.14.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:            ANDNOT cells:       37
ABC RESULTS:               MUX cells:      252
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       22
ABC RESULTS:                OR cells:       77
ABC RESULTS:        internal signals:      392
ABC RESULTS:           input signals:       52
ABC RESULTS:          output signals:       18
Removing temp directory.

6.22.15. Extracting gate netlist of module `\TopLevel' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.22.16. Extracting gate netlist of module `\Tristate' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.23. Executing OPT pass (performing simple optimizations).

6.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
<suppressed ~16 debug messages>
Optimizing module Controller.
<suppressed ~3 debug messages>
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
<suppressed ~110 debug messages>
Optimizing module TopLevel.
Optimizing module Tristate.

6.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
<suppressed ~3 debug messages>
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 1 cells.

6.23.3. Executing OPT_DFF pass (perform DFF optimizations).

6.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 5 unused cells and 1077 unused wires.
<suppressed ~19 debug messages>

6.23.5. Finished fast OPT passes.

6.24. Executing HIERARCHY pass (managing design hierarchy).

6.24.1. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\Register\N=s32'00000000000000000000000000010000
Used module:         \ARU
Used module:         \IMM
Used module:         \INC
Used module:         \LGU
Used module:         $paramod\Register\N=s32'00000000000000000000000000000100
Used module:         $paramod\Register\N=s32'00000000000000000000000000000001
Used module:         \Tristate
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000010

6.24.2. Analyzing design hierarchy..
Top module:  \TopLevel
Used module:     \Controller
Used module:     \Datapath
Used module:         $paramod\Register\N=s32'00000000000000000000000000010000
Used module:         \ARU
Used module:         \IMM
Used module:         \INC
Used module:         \LGU
Used module:         $paramod\Register\N=s32'00000000000000000000000000000100
Used module:         $paramod\Register\N=s32'00000000000000000000000000000001
Used module:         \Tristate
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux4to1\N=s32'00000000000000000000000000010000
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000100
Used module:         $paramod\Mux2to1\N=s32'00000000000000000000000000000010
Removed 0 unused modules.

6.25. Printing statistics.

=== $paramod\Mux2to1\N=s32'00000000000000000000000000000010 ===

   Number of wires:                  7
   Number of wire bits:             11
   Number of public wires:           5
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $_DLATCH_N_                     2
     $_MUX_                          2
     $_NOR_                          1

=== $paramod\Mux2to1\N=s32'00000000000000000000000000000100 ===

   Number of wires:                  7
   Number of wire bits:             19
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $_DLATCH_N_                     4
     $_MUX_                          4
     $_NOR_                          1

=== $paramod\Mux2to1\N=s32'00000000000000000000000000010000 ===

   Number of wires:                  7
   Number of wire bits:             67
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $_DLATCH_N_                    16
     $_MUX_                         16
     $_NOR_                          1

=== $paramod\Mux4to1\N=s32'00000000000000000000000000000100 ===

   Number of wires:                 26
   Number of wire bits:             44
   Number of public wires:           9
   Number of public wire bits:      24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 24
     $_ANDNOT_                       1
     $_DLATCH_N_                     4
     $_MUX_                         12
     $_NOR_                          1
     $_OR_                           6

=== $paramod\Mux4to1\N=s32'00000000000000000000000000010000 ===

   Number of wires:                 50
   Number of wire bits:            140
   Number of public wires:           9
   Number of public wire bits:      84
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     $_ANDNOT_                       1
     $_DLATCH_N_                    16
     $_MUX_                         48
     $_NOR_                          1
     $_OR_                           6

=== $paramod\Register\N=s32'00000000000000000000000000000001 ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFFE_PP0P_                    1
     $_OR_                           1

=== $paramod\Register\N=s32'00000000000000000000000000000100 ===

   Number of wires:                  8
   Number of wire bits:             17
   Number of public wires:           6
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $_ANDNOT_                       4
     $_DFFE_PP0P_                    4
     $_OR_                           1

=== $paramod\Register\N=s32'00000000000000000000000000010000 ===

   Number of wires:                  8
   Number of wire bits:             53
   Number of public wires:           6
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $_ANDNOT_                      16
     $_DFFE_PP0P_                   16
     $_OR_                           1

=== ARU ===

   Number of wires:                488
   Number of wire bits:            564
   Number of public wires:           9
   Number of public wire bits:      54
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                513
     $_ANDNOT_                     127
     $_AND_                         57
     $_DLATCH_N_                    16
     $_DLATCH_P_                     1
     $_MUX_                         17
     $_NAND_                        32
     $_NOR_                         35
     $_NOT_                         12
     $_ORNOT_                        8
     $_OR_                          65
     $_XNOR_                        39
     $_XOR_                        104

=== Controller ===

   Number of wires:                345
   Number of wire bits:            367
   Number of public wires:          51
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                345
     $_ANDNOT_                     119
     $_AND_                         10
     $_DFF_PP0_                      2
     $_DLATCH_N_                     2
     $_MUX_                          7
     $_NAND_                         8
     $_NOR_                         26
     $_NOT_                          5
     $_ORNOT_                       22
     $_OR_                         144

=== Datapath ===

   Number of wires:                 87
   Number of wire bits:            388
   Number of public wires:          77
   Number of public wire bits:     378
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $_ANDNOT_                       4
     $_OR_                           3
     $_XOR_                          4
     $paramod\Mux2to1\N=s32'00000000000000000000000000000010      1
     $paramod\Mux2to1\N=s32'00000000000000000000000000000100      1
     $paramod\Mux2to1\N=s32'00000000000000000000000000010000      3
     $paramod\Mux4to1\N=s32'00000000000000000000000000000100      1
     $paramod\Mux4to1\N=s32'00000000000000000000000000010000      4
     $paramod\Register\N=s32'00000000000000000000000000000001      4
     $paramod\Register\N=s32'00000000000000000000000000000100      1
     $paramod\Register\N=s32'00000000000000000000000000010000      4
     ARU                             1
     IMM                             1
     INC                             2
     LGU                             1
     Tristate                        1

=== IMM ===

   Number of wires:                 40
   Number of wire bits:             84
   Number of public wires:           7
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     $_ANDNOT_                      13
     $_DLATCH_N_                    16
     $_MUX_                         28
     $_NOR_                          1
     $_OR_                           6

=== INC ===

   Number of wires:                 29
   Number of wire bits:             60
   Number of public wires:           3
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     $_ANDNOT_                       9
     $_NAND_                         8
     $_OR_                           8
     $_XNOR_                         8
     $_XOR_                          9

=== LGU ===

   Number of wires:                395
   Number of wire bits:            456
   Number of public wires:           8
   Number of public wire bits:      54
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                419
     $_ANDNOT_                      37
     $_AND_                         16
     $_DLATCH_N_                    16
     $_MUX_                        252
     $_NAND_                         1
     $_NOR_                          2
     $_NOT_                         18
     $_OR_                          77

=== TopLevel ===

   Number of wires:                 51
   Number of wire bits:            100
   Number of public wires:          51
   Number of public wire bits:     100
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     Controller                      1
     Datapath                        1

=== Tristate ===

   Number of wires:                  3
   Number of wire bits:             33
   Number of public wires:           3
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== design hierarchy ===

   TopLevel                          1
     Controller                      1
     Datapath                        1
       $paramod\Mux2to1\N=s32'00000000000000000000000000000010      1
       $paramod\Mux2to1\N=s32'00000000000000000000000000000100      1
       $paramod\Mux2to1\N=s32'00000000000000000000000000010000      3
       $paramod\Mux4to1\N=s32'00000000000000000000000000000100      1
       $paramod\Mux4to1\N=s32'00000000000000000000000000010000      4
       $paramod\Register\N=s32'00000000000000000000000000000001      4
       $paramod\Register\N=s32'00000000000000000000000000000100      1
       $paramod\Register\N=s32'00000000000000000000000000010000      4
       ARU                           1
       IMM                           1
       INC                           2
       LGU                           1
       Tristate                      1

   Number of wires:               1800
   Number of wire bits:           3208
   Number of public wires:         336
   Number of public wire bits:    1507
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2014
     $_ANDNOT_                     395
     $_AND_                         83
     $_DFFE_PP0P_                   72
     $_DFF_PP0_                      2
     $_DLATCH_N_                   172
     $_DLATCH_P_                     1
     $_MUX_                        562
     $_NAND_                        57
     $_NOR_                         74
     $_NOT_                         35
     $_ORNOT_                       30
     $_OR_                         350
     $_XNOR_                        55
     $_XOR_                        126

6.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\Mux2to1\N=s32'00000000000000000000000000000010...
Checking module $paramod\Mux2to1\N=s32'00000000000000000000000000000100...
Checking module $paramod\Mux2to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\Mux4to1\N=s32'00000000000000000000000000000100...
Checking module $paramod\Mux4to1\N=s32'00000000000000000000000000010000...
Checking module $paramod\Register\N=s32'00000000000000000000000000000001...
Checking module $paramod\Register\N=s32'00000000000000000000000000000100...
Checking module $paramod\Register\N=s32'00000000000000000000000000010000...
Checking module ARU...
Checking module Controller...
Checking module Datapath...
Checking module IMM...
Checking module INC...
Checking module LGU...
Checking module TopLevel...
Checking module Tristate...
Found and reported 0 problems.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
<suppressed ~7 debug messages>
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

7.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8156 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8149
        $abc$8038$auto$blifparse.cc:381:parse_blif$8155

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8197 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8191
        $abc$8038$auto$blifparse.cc:381:parse_blif$8196

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8223 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8217
        $abc$8038$auto$blifparse.cc:381:parse_blif$8222

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8248 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8242
        $abc$8038$auto$blifparse.cc:381:parse_blif$8247

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8266 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8260
        $abc$8038$auto$blifparse.cc:381:parse_blif$8265

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8284 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8278
        $abc$8038$auto$blifparse.cc:381:parse_blif$8283

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8302 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8296
        $abc$8038$auto$blifparse.cc:381:parse_blif$8301

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8319 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8313
        $abc$8038$auto$blifparse.cc:381:parse_blif$8318

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8333 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8327
        $abc$8038$auto$blifparse.cc:381:parse_blif$8332

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8347 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8341
        $abc$8038$auto$blifparse.cc:381:parse_blif$8346

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8361 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8355
        $abc$8038$auto$blifparse.cc:381:parse_blif$8360

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8375 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8369
        $abc$8038$auto$blifparse.cc:381:parse_blif$8374

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8389 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8383
        $abc$8038$auto$blifparse.cc:381:parse_blif$8388

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8403 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8397
        $abc$8038$auto$blifparse.cc:381:parse_blif$8402

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8417 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8411
        $abc$8038$auto$blifparse.cc:381:parse_blif$8416

    Found cells that share an operand and can be merged by moving the $_MUX_ $abc$8038$auto$blifparse.cc:381:parse_blif$8429 in front of them:
        $abc$8038$auto$blifparse.cc:381:parse_blif$8423
        $abc$8038$auto$blifparse.cc:381:parse_blif$8428

7.7. Executing OPT_DFF pass (perform DFF optimizations).

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

7.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
<suppressed ~16 debug messages>
Optimizing module TopLevel.
Optimizing module Tristate.

7.10. Rerunning OPT passes. (Maybe there is more to do..)

7.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

7.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

7.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

7.14. Executing OPT_SHARE pass.

7.15. Executing OPT_DFF pass (perform DFF optimizations).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

7.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

7.18. Rerunning OPT passes. (Maybe there is more to do..)

7.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

7.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

7.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

7.22. Executing OPT_SHARE pass.

7.23. Executing OPT_DFF pass (perform DFF optimizations).

7.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

7.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

7.26. Finished OPT passes. (There is nothing left to do.)

8. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_N (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_N_.
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFF_NN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN0_.
  cell DFF_NN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN1_.
  cell DFF_NP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP0_.
  cell DFF_NP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP1_.
  cell DFF_PN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  cell DFF_PN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN1_.
  cell DFF_PP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP0_.
  cell DFF_PP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP1_.
  final dff cell mappings:
    \DFF_N _DFF_N_ (.C( C), .D( D), .Q( Q));
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    \DFF_NN0 _DFF_NN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NN1 _DFF_NN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP0 _DFF_NP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP1 _DFF_NP1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN0 _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN1 _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP0 _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP1 _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

8.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010':
Mapping DFF cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100':
Mapping DFF cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000':
Mapping DFF cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100':
Mapping DFF cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000':
Mapping DFF cells in module `$paramod\Register\N=s32'00000000000000000000000000000001':
  mapped 1 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `$paramod\Register\N=s32'00000000000000000000000000000100':
  mapped 4 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `$paramod\Register\N=s32'00000000000000000000000000010000':
  mapped 16 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `\ARU':
Mapping DFF cells in module `\Controller':
  mapped 2 $_DFF_PP0_ cells to \DFF_PP0 cells.
Mapping DFF cells in module `\Datapath':
Mapping DFF cells in module `\IMM':
Mapping DFF cells in module `\INC':
Mapping DFF cells in module `\LGU':
Mapping DFF cells in module `\TopLevel':
Mapping DFF cells in module `\Tristate':

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Register\N=s32'00000000000000000000000000010000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ARU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Controller..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Datapath..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \IMM..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \INC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \LGU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \Tristate..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000000100.
  Optimizing cells in module $paramod\Register\N=s32'00000000000000000000000000010000.
  Optimizing cells in module \ARU.
  Optimizing cells in module \Controller.
  Optimizing cells in module \Datapath.
  Optimizing cells in module \IMM.
  Optimizing cells in module \INC.
  Optimizing cells in module \LGU.
  Optimizing cells in module \TopLevel.
  Optimizing cells in module \Tristate.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000000100'.
Finding identical cells in module `$paramod\Register\N=s32'00000000000000000000000000010000'.
Finding identical cells in module `\ARU'.
Finding identical cells in module `\Controller'.
Finding identical cells in module `\Datapath'.
Finding identical cells in module `\IMM'.
Finding identical cells in module `\INC'.
Finding identical cells in module `\LGU'.
Finding identical cells in module `\TopLevel'.
Finding identical cells in module `\Tristate'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000010..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux2to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Mux4to1\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod\Register\N=s32'00000000000000000000000000010000..
Finding unused cells or wires in module \ARU..
Finding unused cells or wires in module \Controller..
Finding unused cells or wires in module \Datapath..
Finding unused cells or wires in module \IMM..
Finding unused cells or wires in module \INC..
Finding unused cells or wires in module \LGU..
Finding unused cells or wires in module \TopLevel..
Finding unused cells or wires in module \Tristate..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000001.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000000100.
Optimizing module $paramod\Register\N=s32'00000000000000000000000000010000.
Optimizing module ARU.
Optimizing module Controller.
Optimizing module Datapath.
Optimizing module IMM.
Optimizing module INC.
Optimizing module LGU.
Optimizing module TopLevel.
Optimizing module Tristate.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing ABC pass (technology mapping using ABC).

10.1. Extracting gate netlist of module `$paramod\Mux2to1\N=s32'00000000000000000000000000000010' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 9 wires to a netlist network with 6 inputs and 3 outputs.

10.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        3
Removing temp directory.

10.2. Extracting gate netlist of module `$paramod\Mux2to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 15 wires to a netlist network with 10 inputs and 5 outputs.

10.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.2.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

10.3. Extracting gate netlist of module `$paramod\Mux2to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 51 wires to a netlist network with 34 inputs and 17 outputs.

10.3.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.3.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       48
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       17
Removing temp directory.

10.4. Extracting gate netlist of module `$paramod\Mux4to1\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 20 gates and 40 wires to a netlist network with 20 inputs and 5 outputs.

10.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.4.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       21
ABC RESULTS:               NOR cells:       15
ABC RESULTS:               NOT cells:       14
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:        5
Removing temp directory.

10.5. Extracting gate netlist of module `$paramod\Mux4to1\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 56 gates and 124 wires to a netlist network with 68 inputs and 17 outputs.

10.5.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.5.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       98
ABC RESULTS:               NOR cells:       34
ABC RESULTS:               NOT cells:       36
ABC RESULTS:        internal signals:       39
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       17
Removing temp directory.

10.6. Extracting gate netlist of module `$paramod\Register\N=s32'00000000000000000000000000000001' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 1 outputs.

10.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.6.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

10.7. Extracting gate netlist of module `$paramod\Register\N=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
Extracted 9 gates and 19 wires to a netlist network with 10 inputs and 4 outputs.

10.7.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.7.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        4
Removing temp directory.

10.8. Extracting gate netlist of module `$paramod\Register\N=s32'00000000000000000000000000010000' to `<abc-temp-dir>/input.blif'..
Extracted 33 gates and 67 wires to a netlist network with 34 inputs and 16 outputs.

10.8.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.8.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       48
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        1
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

10.9. Extracting gate netlist of module `\ARU' to `<abc-temp-dir>/input.blif'..
Extracted 496 gates and 546 wires to a netlist network with 50 inputs and 20 outputs.

10.9.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.9.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      419
ABC RESULTS:               NOR cells:      381
ABC RESULTS:               NOT cells:      152
ABC RESULTS:        internal signals:      476
ABC RESULTS:           input signals:       50
ABC RESULTS:          output signals:       20
Removing temp directory.

10.10. Extracting gate netlist of module `\Controller' to `<abc-temp-dir>/input.blif'..
Extracted 341 gates and 361 wires to a netlist network with 20 inputs and 49 outputs.

10.10.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.10.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      115
ABC RESULTS:               NOR cells:      103
ABC RESULTS:               NOT cells:       38
ABC RESULTS:        internal signals:      292
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       49
Removing temp directory.

10.11. Extracting gate netlist of module `\Datapath' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 23 wires to a netlist network with 12 inputs and 1 outputs.

10.11.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.11.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               NOT cells:        4
ABC RESULTS:        internal signals:       10
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        1
Removing temp directory.

10.12. Extracting gate netlist of module `\IMM' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 68 wires to a netlist network with 20 inputs and 17 outputs.

10.12.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.12.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       34
ABC RESULTS:               NOR cells:       17
ABC RESULTS:               NOT cells:       16
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:       20
ABC RESULTS:          output signals:       17
Removing temp directory.

10.13. Extracting gate netlist of module `\INC' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 60 wires to a netlist network with 18 inputs and 16 outputs.

10.13.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.13.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       18
ABC RESULTS:               NOR cells:       52
ABC RESULTS:               NOT cells:       19
ABC RESULTS:        internal signals:       26
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       16
Removing temp directory.

10.14. Extracting gate netlist of module `\LGU' to `<abc-temp-dir>/input.blif'..
Extracted 371 gates and 439 wires to a netlist network with 68 inputs and 51 outputs.

10.14.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

10.14.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      392
ABC RESULTS:               NOR cells:      225
ABC RESULTS:               NOT cells:       91
ABC RESULTS:        internal signals:      320
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       51
Removing temp directory.

10.15. Extracting gate netlist of module `\TopLevel' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

10.16. Extracting gate netlist of module `\Tristate' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

11. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\Mux2to1\N=s32'00000000000000000000000000000010.
Deleting now unused module $paramod\Mux2to1\N=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\Mux2to1\N=s32'00000000000000000000000000010000.
Deleting now unused module $paramod\Mux4to1\N=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\Mux4to1\N=s32'00000000000000000000000000010000.
Deleting now unused module $paramod\Register\N=s32'00000000000000000000000000000001.
Deleting now unused module $paramod\Register\N=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\Register\N=s32'00000000000000000000000000010000.
Deleting now unused module ARU.
Deleting now unused module Controller.
Deleting now unused module Datapath.
Deleting now unused module IMM.
Deleting now unused module INC.
Deleting now unused module LGU.
Deleting now unused module Tristate.
<suppressed ~27 debug messages>

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

12.6. Executing OPT_DFF pass (perform DFF optimizations).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..
Removed 0 unused cells and 2522 unused wires.
<suppressed ~1 debug messages>

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

12.9. Rerunning OPT passes. (Maybe there is more to do..)

12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

12.13. Executing OPT_DFF pass (perform DFF optimizations).

12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..

12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

12.16. Finished OPT passes. (There is nothing left to do.)

13. Executing HILOMAP pass (mapping to constant drivers).

14. Executing HILOMAP pass (mapping to constant drivers).

15. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map output port TopLevel.addrBus: Missing option -outpad.
Mapping port TopLevel.clk using BUF.
Don't map inout port TopLevel.dataBus: Missing option -inoutpad.
Don't map output port TopLevel.readMEM: Missing option -outpad.
Mapping port TopLevel.rst using BUF.
Don't map output port TopLevel.writeMEM: Missing option -outpad.

16. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port TopLevel.clk: Missing option -inpad.
Don't map input port TopLevel.rst: Missing option -inpad.
Mapping port TopLevel.addrBus using BUF.
Don't map inout port TopLevel.dataBus: Missing option -inoutpad.
Mapping port TopLevel.readMEM using BUF.
Mapping port TopLevel.writeMEM using BUF.

17. Executing SPLITNETS pass (splitting up multi-bit signals).

18. Executing OPT pass (performing simple optimizations).

18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

18.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

18.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

18.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

18.6. Executing OPT_DFF pass (perform DFF optimizations).

18.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..
Removed 30 unused cells and 96 unused wires.
<suppressed ~61 debug messages>

18.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

18.9. Rerunning OPT passes. (Maybe there is more to do..)

18.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

18.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

18.13. Executing OPT_DFF pass (perform DFF optimizations).

18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..

18.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

18.16. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 1126 unused wires.

19. Executing Verilog backend.
Dumping module `\TopLevel'.

20. Executing BLIF backend.

21. Executing JSON backend.

22. Executing TECHMAP pass (map to technology primitives).

22.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/DFF_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/DFF_map.v' to AST representation.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFF_N'.
Generating RTLIL representation for module `\DFF_PP0'.
Generating RTLIL representation for module `\DFF_PP1'.
Generating RTLIL representation for module `\DFF_PN0'.
Generating RTLIL representation for module `\DFF_PN1'.
Generating RTLIL representation for module `\DFF_NN0'.
Generating RTLIL representation for module `\DFF_NN1'.
Generating RTLIL representation for module `\DFF_NP0'.
Generating RTLIL representation for module `\DFF_NP1'.
Successfully finished Verilog frontend.

22.2. Continuing TECHMAP pass.
Using template DFF_PP0 for cells of type DFF_PP0.
No more expansions possible.
<suppressed ~86 debug messages>

23. Executing ABC pass (technology mapping using ABC).

23.1. Extracting gate netlist of module `\TopLevel' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..
Removed 0 unused cells and 518 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing TECHMAP pass (map to technology primitives).

25.1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/Logic_map.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/PUNEH_Verilog/tech/Logic_map.v' to AST representation.
Generating RTLIL representation for module `\BUF'.
Generating RTLIL representation for module `\TIELOM'.
Generating RTLIL representation for module `\TIEHIM'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\NOT'.
Generating RTLIL representation for module `\AND'.
Generating RTLIL representation for module `\NAND'.
Generating RTLIL representation for module `\OR'.
Generating RTLIL representation for module `\NOR'.
Generating RTLIL representation for module `\XOR'.
Generating RTLIL representation for module `\XNOR'.
Successfully finished Verilog frontend.

25.2. Continuing TECHMAP pass.
Using template NOT for cells of type NOT.
Using template NOR for cells of type NOR.
Using template NAND for cells of type NAND.
Using template TIELOM for cells of type TIELOM.
Using template TIEHIM for cells of type TIEHIM.
Using template BUF for cells of type BUF.
No more expansions possible.
<suppressed ~3393 debug messages>

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..
Removed 0 unused cells and 9526 unused wires.
<suppressed ~1 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopLevel..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopLevel.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopLevel'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopLevel.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopLevel..

28. Printing statistics.

=== TopLevel ===

   Number of wires:               3688
   Number of wire bits:           3718
   Number of public wires:         321
   Number of public wire bits:     351
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3642
     $_DLATCH_N_                   172
     $_DLATCH_P_                     1
     $mux                           16
     bufg                           58
     dff                            74
     nand_n                       1788
     nor_n                        1018
     notg                          515

29. Executing Verilog backend.
Dumping module `\TopLevel'.

30. Executing JSON backend.

Warnings: 9 unique messages, 10 total
End of script. Logfile hash: b4f87c5c44, CPU: user 31.51s system 0.15s
Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )
Time spent: 23% 4x write_verilog (8 sec), 12% 45x opt_expr (4 sec), ...
