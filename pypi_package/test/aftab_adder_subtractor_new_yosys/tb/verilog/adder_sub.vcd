$date
	Sat Jul 15 11:47:39 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module adder_sub_tb $end
$var wire 32 ! result [31:0] $end
$var wire 1 " cout $end
$var reg 32 # a [31:0] $end
$var reg 32 $ b [31:0] $end
$var reg 1 % pass $end
$var reg 1 & subsel $end
$scope module MUT $end
$var wire 32 ' a [31:0] $end
$var wire 32 ( b [31:0] $end
$var wire 1 % pass $end
$var wire 1 & subsel $end
$var wire 32 ) result [31:0] $end
$var wire 1 " cout $end
$var wire 32 * bsel [31:0] $end
$var wire 32 + addSubRes [31:0] $end
$scope module adder_sub $end
$var wire 32 , a [31:0] $end
$var wire 32 - b [31:0] $end
$var wire 1 & cin $end
$var wire 32 . sum [31:0] $end
$var wire 1 " cout $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b101010 .
b10 -
b101000 ,
b101010 +
b10 *
b101010 )
b10 (
b101000 '
0&
0%
b10 $
b101000 #
0"
b101010 !
$end
#20
b110100 !
b110100 )
b110100 +
b110100 .
b110010 #
b110010 '
b110010 ,
#40
1"
b11111111111111111111111111111101 *
b11111111111111111111111111111101 -
b1000 !
b1000 )
b1000 +
b1000 .
b1010 #
b1010 '
b1010 ,
1&
#60
b10010 !
b10010 )
b10010 +
b10010 .
b10100 #
b10100 '
b10100 ,
#80
b10 !
b10 )
1%
#100
0"
b10 *
b10 -
b110100 +
b110100 .
b110010 #
b110010 '
b110010 ,
0&
#120
