
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )


-- Executing script file `/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/yosys_script.ys' --

1. Executing Verilog-2005 frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v
Parsing Verilog input from `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v' to AST representation.
Generating RTLIL representation for module `\seqDetector'.
Note: Assuming pure combinatorial block at /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:18.5-26.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: seqDetector         
Automatically selected seqDetector as design top module.

2.2. Analyzing design hierarchy..
Top module:  \seqDetector

2.3. Analyzing design hierarchy..
Top module:  \seqDetector
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \seqDetector

3.1.2. Analyzing design hierarchy..
Top module:  \seqDetector
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:18$2 in module seqDetector.
Marked 1 switch rules as full_case in process $proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:11$1 in module seqDetector.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:18$2'.
     1/1: $1\ns[2:0]
Creating decoders for process `\seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:11$1'.
     1/1: $0\ps[2:0]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\seqDetector.\ns' from process `\seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:18$2'.

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\seqDetector.\ps' using process `\seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:11$1'.
  created $dff cell `$procdff$22' with positive edge clock.

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:18$2'.
Removing empty process `seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:18$2'.
Found and cleaned up 1 empty switch in `\seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:11$1'.
Removing empty process `seqDetector.$proc$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:11$1'.
Cleaned up 2 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.
<suppressed ~5 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module seqDetector...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
    New ctrl vector for $pmux cell $procmux$14: { $procmux$18_CMP $procmux$16_CMP $auto$opt_reduce.cc:134:opt_mux$24 }
  Optimizing cells in module \seqDetector.
Performed a total of 1 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.6.20. Executing OPT_DFF pass (perform DFF optimizations).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register seqDetector.ps.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\ps' from module `\seqDetector'.
  found $dff cell for state register: $procdff$22
  root of input selection tree: $0\ps[2:0]
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \rst
  found ctrl input: $auto$opt_reduce.cc:134:opt_mux$24
  found ctrl input: $procmux$16_CMP
  found ctrl input: $procmux$18_CMP
  found state code: 3'000
  found ctrl input: \serIn
  found state code: 3'010
  found state code: 3'001
  found state code: 3'011
  found ctrl output: $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:28$11_Y
  found ctrl output: $procmux$16_CMP
  found ctrl output: $procmux$17_CMP
  found ctrl output: $procmux$18_CMP
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_mux$24 \serIn \rst }
  ctrl outputs: { $procmux$18_CMP $procmux$17_CMP $procmux$16_CMP $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:28$11_Y $0\ps[2:0] }
  transition:      3'000 3'-00 ->      3'000 7'1000000
  transition:      3'000 3'-10 ->      3'001 7'1000001
  transition:      3'000 3'--1 ->      3'000 7'1000000
  transition:      3'010 3'-00 ->      3'000 7'0010000
  transition:      3'010 3'-10 ->      3'011 7'0010011
  transition:      3'010 3'--1 ->      3'000 7'0010000
  transition:      3'001 3'-00 ->      3'010 7'0100010
  transition:      3'001 3'-10 ->      3'001 7'0100001
  transition:      3'001 3'--1 ->      3'000 7'0100000
  transition:      3'011 3'-00 ->      3'010 7'0001010
  transition:      3'011 3'-10 ->      3'001 7'0001001
  transition:      3'011 3'--1 ->      3'000 7'0001000

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ps$25' from module `\seqDetector'.
  Removing unused input signal $auto$opt_reduce.cc:134:opt_mux$24.

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 11 unused cells and 11 unused wires.
<suppressed ~13 debug messages>

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\ps$25' from module `\seqDetector'.
  Removing unused output signal $0\ps[2:0] [0].
  Removing unused output signal $0\ps[2:0] [1].
  Removing unused output signal $0\ps[2:0] [2].
  Removing unused output signal $procmux$16_CMP.
  Removing unused output signal $procmux$17_CMP.
  Removing unused output signal $procmux$18_CMP.

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\ps$25' from module `\seqDetector' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ---1
  010 -> --1-
  001 -> -1--
  011 -> 1---

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\ps$25' from module `seqDetector':
-------------------------------------

  Information on FSM $fsm$\ps$25 (\ps):

  Number of input signals:    2
  Number of output signals:   1
  Number of state bits:       4

  Input signals:
    0: \rst
    1: \serIn

  Output signals:
    0: $eq$/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/amir_seqDetector/seqDetector.v:28$11_Y

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 2'00   ->     0 1'0
      1:     0 2'-1   ->     0 1'0
      2:     0 2'10   ->     2 1'0
      3:     1 2'00   ->     0 1'0
      4:     1 2'-1   ->     0 1'0
      5:     1 2'10   ->     3 1'0
      6:     2 2'-1   ->     0 1'0
      7:     2 2'00   ->     1 1'0
      8:     2 2'10   ->     2 1'0
      9:     3 2'-1   ->     0 1'1
     10:     3 2'00   ->     1 1'1
     11:     3 2'10   ->     2 1'1

-------------------------------------

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\ps$25' from module `\seqDetector'.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.
<suppressed ~3 debug messages>

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module seqDetector:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.
<suppressed ~1 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/share/yosys/techmap.v
Parsing Verilog input from `/usr/local/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~84 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.
<suppressed ~2 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\seqDetector' to `<abc-temp-dir>/input.blif'..
Extracted 14 gates and 20 wires to a netlist network with 6 inputs and 4 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        4
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:        3
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:        internal signals:       10
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        4
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \seqDetector

3.24.2. Analyzing design hierarchy..
Top module:  \seqDetector
Removed 0 unused modules.

3.25. Printing statistics.

=== seqDetector ===

   Number of wires:                 16
   Number of wire bits:             19
   Number of public wires:           5
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $_ANDNOT_                       4
     $_DFF_P_                        4
     $_NOR_                          3
     $_ORNOT_                        1
     $_OR_                           3

3.26. Executing CHECK pass (checking for obvious problems).
Checking module seqDetector...
Found and reported 0 problems.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

4.10. Finished OPT passes. (There is nothing left to do.)

5. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF_N (noninv, pins=3, area=0.00) is a direct match for cell type $_DFF_N_.
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  cell DFF_NN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN0_.
  cell DFF_NN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NN1_.
  cell DFF_NP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP0_.
  cell DFF_NP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_NP1_.
  cell DFF_PN0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN0_.
  cell DFF_PN1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PN1_.
  cell DFF_PP0 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP0_.
  cell DFF_PP1 (noninv, pins=4, area=0.00) is a direct match for cell type $_DFF_PP1_.
  final dff cell mappings:
    \DFF_N _DFF_N_ (.C( C), .D( D), .Q( Q));
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    \DFF_NN0 _DFF_NN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NN1 _DFF_NN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP0 _DFF_NP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_NP1 _DFF_NP1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN0 _DFF_PN0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PN1 _DFF_PN1_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP0 _DFF_PP0_ (.C( C), .D( D), .Q( Q), .R( R));
    \DFF_PP1 _DFF_PP1_ (.C( C), .D( D), .Q( Q), .R( R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

5.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\seqDetector':
  mapped 4 $_DFF_P_ cells to \DFF cells.

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing ABC pass (technology mapping using ABC).

7.1. Extracting gate netlist of module `\seqDetector' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 17 wires to a netlist network with 6 inputs and 4 outputs.

7.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/mycells_yosys.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_N".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_NP1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PN1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP0".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_PP1".
ABC: Library "demo" from "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/mycells_yosys.lib" has 6 cells (10 skipped: 10 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:        5
ABC RESULTS:        internal signals:        7
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        4
Removing temp directory.

8. Executing FLATTEN pass (flatten design).

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing SPLITNETS pass (splitting up multi-bit signals).

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /usr/local/share/yosys/techmap.v
Parsing Verilog input from `/usr/local/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\seqDetector' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

13.9. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 1 unused wires.

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

15. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port seqDetector.clk using BUFX2.
Mapping port seqDetector.rst using BUFX2.
Mapping port seqDetector.serIn using BUFX2.
Don't map output port seqDetector.serOutValid: Missing option -outpad.

16. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port seqDetector.clk: Missing option -inpad.
Don't map input port seqDetector.rst: Missing option -inpad.
Don't map input port seqDetector.serIn: Missing option -inpad.
Mapping port seqDetector.serOutValid using BUFX2.

17. Executing Verilog backend.
Dumping module `\seqDetector'.

18. Executing BLIF backend.

19. Executing JSON backend.

20. Executing TECHMAP pass (map to technology primitives).

20.1. Executing Verilog-2005 frontend: /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/DFF_map.v
Parsing Verilog input from `/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/DFF_map.v' to AST representation.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\DFF_N'.
Generating RTLIL representation for module `\DFF_PP0'.
Generating RTLIL representation for module `\DFF_PP1'.
Generating RTLIL representation for module `\DFF_PN0'.
Generating RTLIL representation for module `\DFF_PN1'.
Generating RTLIL representation for module `\DFF_NN0'.
Generating RTLIL representation for module `\DFF_NN1'.
Generating RTLIL representation for module `\DFF_NP0'.
Generating RTLIL representation for module `\DFF_NP1'.
Successfully finished Verilog frontend.

20.2. Continuing TECHMAP pass.
Using template DFF for cells of type DFF.
No more expansions possible.
<suppressed ~16 debug messages>

21. Executing ABC pass (technology mapping using ABC).

21.1. Extracting gate netlist of module `\seqDetector' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing TECHMAP pass (map to technology primitives).

23.1. Executing Verilog-2005 frontend: /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/Logic_map.v
Parsing Verilog input from `/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/utdate/lib/Logic_map.v' to AST representation.
Generating RTLIL representation for module `\BUF'.
Generating RTLIL representation for module `\TIELOM'.
Generating RTLIL representation for module `\TIEHIM'.
Generating RTLIL representation for module `\IBUF'.
Generating RTLIL representation for module `\OBUF'.
Generating RTLIL representation for module `\NOT'.
Generating RTLIL representation for module `\AND'.
Generating RTLIL representation for module `\NAND'.
Generating RTLIL representation for module `\OR'.
Generating RTLIL representation for module `\NOR'.
Generating RTLIL representation for module `\XOR'.
Generating RTLIL representation for module `\XNOR'.
Successfully finished Verilog frontend.

23.2. Continuing TECHMAP pass.
Using template NOT for cells of type NOT.
Using template NAND for cells of type NAND.
Using template NOR for cells of type NOR.
No more expansions possible.
<suppressed ~29 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..
Removed 0 unused cells and 40 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seqDetector..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seqDetector.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seqDetector'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module seqDetector.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seqDetector..

26. Printing statistics.

=== seqDetector ===

   Number of wires:                 30
   Number of wire bits:             30
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 23
     BUFX2                           4
     dff                             4
     nand_n                          2
     nor_n                           8
     notg                            5

27. Executing Verilog backend.
Dumping module `\seqDetector'.

28. Executing JSON backend.

End of script. Logfile hash: 3a58a0229a, CPU: user 1.07s system 0.05s
Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 )
Time spent: 20% 31x opt_expr (0 sec), 17% 6x read_verilog (0 sec), ...
