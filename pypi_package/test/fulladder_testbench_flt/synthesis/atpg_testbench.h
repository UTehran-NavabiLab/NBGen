#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <map>
#include <math.h>
#include "systemc.h"
#include "systemC_netlist.h"
#include "idd_testing.h"
#include "utilities.h"


using namespace sc_core;

SC_MODULE( testbench ) {

    sc_signal<sc_logic> N1 = sc_signal<sc_logic>("N1");
    sc_signal<sc_logic> N4 = sc_signal<sc_logic>("N4");
    sc_signal<sc_logic> N8 = sc_signal<sc_logic>("N8");
    sc_signal<sc_logic> N11 = sc_signal<sc_logic>("N11");
    sc_signal<sc_logic> N14 = sc_signal<sc_logic>("N14");
    sc_signal<sc_logic> N17 = sc_signal<sc_logic>("N17");
    sc_signal<sc_logic> N21 = sc_signal<sc_logic>("N21");
    sc_signal<sc_logic> N24 = sc_signal<sc_logic>("N24");
    sc_signal<sc_logic> N27 = sc_signal<sc_logic>("N27");
    sc_signal<sc_logic> N30 = sc_signal<sc_logic>("N30");
    sc_signal<sc_logic> N34 = sc_signal<sc_logic>("N34");
    sc_signal<sc_logic> N37 = sc_signal<sc_logic>("N37");
    sc_signal<sc_logic> N40 = sc_signal<sc_logic>("N40");
    sc_signal<sc_logic> N43 = sc_signal<sc_logic>("N43");
    sc_signal<sc_logic> N47 = sc_signal<sc_logic>("N47");
    sc_signal<sc_logic> N50 = sc_signal<sc_logic>("N50");
    sc_signal<sc_logic> N53 = sc_signal<sc_logic>("N53");
    sc_signal<sc_logic> N56 = sc_signal<sc_logic>("N56");
    sc_signal<sc_logic> N60 = sc_signal<sc_logic>("N60");
    sc_signal<sc_logic> N63 = sc_signal<sc_logic>("N63");
    sc_signal<sc_logic> N66 = sc_signal<sc_logic>("N66");
    sc_signal<sc_logic> N69 = sc_signal<sc_logic>("N69");
    sc_signal<sc_logic> N73 = sc_signal<sc_logic>("N73");
    sc_signal<sc_logic> N76 = sc_signal<sc_logic>("N76");
    sc_signal<sc_logic> N79 = sc_signal<sc_logic>("N79");
    sc_signal<sc_logic> N82 = sc_signal<sc_logic>("N82");
    sc_signal<sc_logic> N86 = sc_signal<sc_logic>("N86");
    sc_signal<sc_logic> N89 = sc_signal<sc_logic>("N89");
    sc_signal<sc_logic> N92 = sc_signal<sc_logic>("N92");
    sc_signal<sc_logic> N95 = sc_signal<sc_logic>("N95");
    sc_signal<sc_logic> N99 = sc_signal<sc_logic>("N99");
    sc_signal<sc_logic> N102 = sc_signal<sc_logic>("N102");
    sc_signal<sc_logic> N105 = sc_signal<sc_logic>("N105");
    sc_signal<sc_logic> N108 = sc_signal<sc_logic>("N108");
    sc_signal<sc_logic> N112 = sc_signal<sc_logic>("N112");
    sc_signal<sc_logic> N115 = sc_signal<sc_logic>("N115");
    sc_signal<sc_logic> N223 = sc_signal<sc_logic>("N223");
    sc_signal<sc_logic> N329 = sc_signal<sc_logic>("N329");
    sc_signal<sc_logic> N370 = sc_signal<sc_logic>("N370");
    sc_signal<sc_logic> N421 = sc_signal<sc_logic>("N421");
    sc_signal<sc_logic> N430 = sc_signal<sc_logic>("N430");
    sc_signal<sc_logic> N431 = sc_signal<sc_logic>("N431");
    sc_signal<sc_logic> N432 = sc_signal<sc_logic>("N432");

    sc_event ready2update;

    c432* cut;
    itest idd_test = itest("gate_signal_json_file.json", "gate_properties.json");
    std::array<sc_core::sc_signal<sc_dt::sc_logic>*, 175> signal_arr;

    SC_HAS_PROCESS(testbench);
    testbench(sc_module_name _name){
        cut = new c432("cut");
            cut->N1(N1);
            cut->N4(N4);
            cut->N8(N8);
            cut->N11(N11);
            cut->N14(N14);
            cut->N17(N17);
            cut->N21(N21);
            cut->N24(N24);
            cut->N27(N27);
            cut->N30(N30);
            cut->N34(N34);
            cut->N37(N37);
            cut->N40(N40);
            cut->N43(N43);
            cut->N47(N47);
            cut->N50(N50);
            cut->N53(N53);
            cut->N56(N56);
            cut->N60(N60);
            cut->N63(N63);
            cut->N66(N66);
            cut->N69(N69);
            cut->N73(N73);
            cut->N76(N76);
            cut->N79(N79);
            cut->N82(N82);
            cut->N86(N86);
            cut->N89(N89);
            cut->N92(N92);
            cut->N95(N95);
            cut->N99(N99);
            cut->N102(N102);
            cut->N105(N105);
            cut->N108(N108);
            cut->N112(N112);
            cut->N115(N115);
            cut->N223(N223);
            cut->N329(N329);
            cut->N370(N370);
            cut->N421(N421);
            cut->N430(N430);
            cut->N431(N431);
            cut->N432(N432);

        SC_THREAD(signaling);

        SC_METHOD(run_idd_testing);
            sensitive << ready2update;
            dont_initialize();

        access_signals();


    }

    void signaling(void){
        for (int i=0; i < pow(2, 36); i++){
            N1.write(input_signalling(0, i));
            N4.write(input_signalling(1, i));
            N8.write(input_signalling(2, i));
            N11.write(input_signalling(3, i));
            N14.write(input_signalling(4, i));
            N17.write(input_signalling(5, i));
            N21.write(input_signalling(6, i));
            N24.write(input_signalling(7, i));
            N27.write(input_signalling(8, i));
            N30.write(input_signalling(9, i));
            N34.write(input_signalling(10, i));
            N37.write(input_signalling(11, i));
            N40.write(input_signalling(12, i));
            N43.write(input_signalling(13, i));
            N47.write(input_signalling(14, i));
            N50.write(input_signalling(15, i));
            N53.write(input_signalling(16, i));
            N56.write(input_signalling(17, i));
            N60.write(input_signalling(18, i));
            N63.write(input_signalling(19, i));
            N66.write(input_signalling(20, i));
            N69.write(input_signalling(21, i));
            N73.write(input_signalling(22, i));
            N76.write(input_signalling(23, i));
            N79.write(input_signalling(24, i));
            N82.write(input_signalling(25, i));
            N86.write(input_signalling(26, i));
            N89.write(input_signalling(27, i));
            N92.write(input_signalling(28, i));
            N95.write(input_signalling(29, i));
            N99.write(input_signalling(30, i));
            N102.write(input_signalling(31, i));
            N105.write(input_signalling(32, i));
            N108.write(input_signalling(33, i));
            N112.write(input_signalling(34, i));
            N115.write(input_signalling(35, i));
            wait(SC_ZERO_TIME);
            std::cout << "--------- Apply New input vector: " << std::endl; 
            std::cout << "input signals:  N1, N4, N8, N11, N14, N17, N21, N24, N27, N30, N34, N37, N40, N43, N47, N50, N53, N56, N60, N63, N66, N69, N73, N76, N79, N82, N86, N89, N92, N95, N99, N102, N105, N108, N112, N115 = " << N1.read() << N4.read() << N8.read() << N11.read() << N14.read() << N17.read() << N21.read() << N24.read() << N27.read() << N30.read() << N34.read() << N37.read() << N40.read() << N43.read() << N47.read() << N50.read() << N53.read() << N56.read() << N60.read() << N63.read() << N66.read() << N69.read() << N73.read() << N76.read() << N79.read() << N82.read() << N86.read() << N89.read() << N92.read() << N95.read() << N99.read() << N102.read() << N105.read() << N108.read() << N112.read() << N115.read()  << std::endl; 
            wait(5, SC_NS);
            ready2update.notify();
            wait(SC_ZERO_TIME);
        }
    }

    void run_idd_testing(void){
        idd_test.update_signal<sc_dt::sc_logic, 175>(signal_arr);
        idd_test.back_trace("N223");
        idd_test.back_trace("N329");
        idd_test.back_trace("N370");
        idd_test.back_trace("N421");
        idd_test.back_trace("N430");
        idd_test.back_trace("N431");
        idd_test.back_trace("N432");
        idd_test.mark_multiplath();
        idd_test.print_critical_path_list();
        idd_test.clear_critical_path_list();
    }

    void access_signals(void){
        signal_arr[0] = &(N1);
        idd_test.add_to_port_list("N1");
        signal_arr[1] = &(N4);
        idd_test.add_to_port_list("N4");
        signal_arr[2] = &(N8);
        idd_test.add_to_port_list("N8");
        signal_arr[3] = &(N11);
        idd_test.add_to_port_list("N11");
        signal_arr[4] = &(N14);
        idd_test.add_to_port_list("N14");
        signal_arr[5] = &(N17);
        idd_test.add_to_port_list("N17");
        signal_arr[6] = &(N21);
        idd_test.add_to_port_list("N21");
        signal_arr[7] = &(N24);
        idd_test.add_to_port_list("N24");
        signal_arr[8] = &(N27);
        idd_test.add_to_port_list("N27");
        signal_arr[9] = &(N30);
        idd_test.add_to_port_list("N30");
        signal_arr[10] = &(N34);
        idd_test.add_to_port_list("N34");
        signal_arr[11] = &(N37);
        idd_test.add_to_port_list("N37");
        signal_arr[12] = &(N40);
        idd_test.add_to_port_list("N40");
        signal_arr[13] = &(N43);
        idd_test.add_to_port_list("N43");
        signal_arr[14] = &(N47);
        idd_test.add_to_port_list("N47");
        signal_arr[15] = &(N50);
        idd_test.add_to_port_list("N50");
        signal_arr[16] = &(N53);
        idd_test.add_to_port_list("N53");
        signal_arr[17] = &(N56);
        idd_test.add_to_port_list("N56");
        signal_arr[18] = &(N60);
        idd_test.add_to_port_list("N60");
        signal_arr[19] = &(N63);
        idd_test.add_to_port_list("N63");
        signal_arr[20] = &(N66);
        idd_test.add_to_port_list("N66");
        signal_arr[21] = &(N69);
        idd_test.add_to_port_list("N69");
        signal_arr[22] = &(N73);
        idd_test.add_to_port_list("N73");
        signal_arr[23] = &(N76);
        idd_test.add_to_port_list("N76");
        signal_arr[24] = &(N79);
        idd_test.add_to_port_list("N79");
        signal_arr[25] = &(N82);
        idd_test.add_to_port_list("N82");
        signal_arr[26] = &(N86);
        idd_test.add_to_port_list("N86");
        signal_arr[27] = &(N89);
        idd_test.add_to_port_list("N89");
        signal_arr[28] = &(N92);
        idd_test.add_to_port_list("N92");
        signal_arr[29] = &(N95);
        idd_test.add_to_port_list("N95");
        signal_arr[30] = &(N99);
        idd_test.add_to_port_list("N99");
        signal_arr[31] = &(N102);
        idd_test.add_to_port_list("N102");
        signal_arr[32] = &(N105);
        idd_test.add_to_port_list("N105");
        signal_arr[33] = &(N108);
        idd_test.add_to_port_list("N108");
        signal_arr[34] = &(N112);
        idd_test.add_to_port_list("N112");
        signal_arr[35] = &(N115);
        idd_test.add_to_port_list("N115");
        signal_arr[36] = &(N223);
        signal_arr[37] = &(N329);
        signal_arr[38] = &(N370);
        signal_arr[39] = &(N421);
        signal_arr[40] = &(N430);
        signal_arr[41] = &(N431);
        signal_arr[42] = &(N432);
        signal_arr[43] = &(cut->_0_);
        signal_arr[44] = &(cut->_100_);
        signal_arr[45] = &(cut->_101_);
        signal_arr[46] = &(cut->_102_);
        signal_arr[47] = &(cut->_103_);
        signal_arr[48] = &(cut->_104_);
        signal_arr[49] = &(cut->_105_);
        signal_arr[50] = &(cut->_106_);
        signal_arr[51] = &(cut->_107_);
        signal_arr[52] = &(cut->_108_);
        signal_arr[53] = &(cut->_109_);
        signal_arr[54] = &(cut->_10_);
        signal_arr[55] = &(cut->_110_);
        signal_arr[56] = &(cut->_111_);
        signal_arr[57] = &(cut->_112_);
        signal_arr[58] = &(cut->_113_);
        signal_arr[59] = &(cut->_114_);
        signal_arr[60] = &(cut->_115_);
        signal_arr[61] = &(cut->_116_);
        signal_arr[62] = &(cut->_117_);
        signal_arr[63] = &(cut->_118_);
        signal_arr[64] = &(cut->_119_);
        signal_arr[65] = &(cut->_11_);
        signal_arr[66] = &(cut->_120_);
        signal_arr[67] = &(cut->_121_);
        signal_arr[68] = &(cut->_122_);
        signal_arr[69] = &(cut->_123_);
        signal_arr[70] = &(cut->_124_);
        signal_arr[71] = &(cut->_125_);
        signal_arr[72] = &(cut->_126_);
        signal_arr[73] = &(cut->_127_);
        signal_arr[74] = &(cut->_128_);
        signal_arr[75] = &(cut->_129_);
        signal_arr[76] = &(cut->_12_);
        signal_arr[77] = &(cut->_130_);
        signal_arr[78] = &(cut->_131_);
        signal_arr[79] = &(cut->_13_);
        signal_arr[80] = &(cut->_14_);
        signal_arr[81] = &(cut->_15_);
        signal_arr[82] = &(cut->_16_);
        signal_arr[83] = &(cut->_17_);
        signal_arr[84] = &(cut->_18_);
        signal_arr[85] = &(cut->_19_);
        signal_arr[86] = &(cut->_1_);
        signal_arr[87] = &(cut->_20_);
        signal_arr[88] = &(cut->_21_);
        signal_arr[89] = &(cut->_22_);
        signal_arr[90] = &(cut->_23_);
        signal_arr[91] = &(cut->_24_);
        signal_arr[92] = &(cut->_25_);
        signal_arr[93] = &(cut->_26_);
        signal_arr[94] = &(cut->_27_);
        signal_arr[95] = &(cut->_28_);
        signal_arr[96] = &(cut->_29_);
        signal_arr[97] = &(cut->_2_);
        signal_arr[98] = &(cut->_30_);
        signal_arr[99] = &(cut->_31_);
        signal_arr[100] = &(cut->_32_);
        signal_arr[101] = &(cut->_33_);
        signal_arr[102] = &(cut->_34_);
        signal_arr[103] = &(cut->_35_);
        signal_arr[104] = &(cut->_36_);
        signal_arr[105] = &(cut->_37_);
        signal_arr[106] = &(cut->_38_);
        signal_arr[107] = &(cut->_39_);
        signal_arr[108] = &(cut->_3_);
        signal_arr[109] = &(cut->_40_);
        signal_arr[110] = &(cut->_41_);
        signal_arr[111] = &(cut->_42_);
        signal_arr[112] = &(cut->_43_);
        signal_arr[113] = &(cut->_44_);
        signal_arr[114] = &(cut->_45_);
        signal_arr[115] = &(cut->_46_);
        signal_arr[116] = &(cut->_47_);
        signal_arr[117] = &(cut->_48_);
        signal_arr[118] = &(cut->_49_);
        signal_arr[119] = &(cut->_4_);
        signal_arr[120] = &(cut->_50_);
        signal_arr[121] = &(cut->_51_);
        signal_arr[122] = &(cut->_52_);
        signal_arr[123] = &(cut->_53_);
        signal_arr[124] = &(cut->_54_);
        signal_arr[125] = &(cut->_55_);
        signal_arr[126] = &(cut->_56_);
        signal_arr[127] = &(cut->_57_);
        signal_arr[128] = &(cut->_58_);
        signal_arr[129] = &(cut->_59_);
        signal_arr[130] = &(cut->_5_);
        signal_arr[131] = &(cut->_60_);
        signal_arr[132] = &(cut->_61_);
        signal_arr[133] = &(cut->_62_);
        signal_arr[134] = &(cut->_63_);
        signal_arr[135] = &(cut->_64_);
        signal_arr[136] = &(cut->_65_);
        signal_arr[137] = &(cut->_66_);
        signal_arr[138] = &(cut->_67_);
        signal_arr[139] = &(cut->_68_);
        signal_arr[140] = &(cut->_69_);
        signal_arr[141] = &(cut->_6_);
        signal_arr[142] = &(cut->_70_);
        signal_arr[143] = &(cut->_71_);
        signal_arr[144] = &(cut->_72_);
        signal_arr[145] = &(cut->_73_);
        signal_arr[146] = &(cut->_74_);
        signal_arr[147] = &(cut->_75_);
        signal_arr[148] = &(cut->_76_);
        signal_arr[149] = &(cut->_77_);
        signal_arr[150] = &(cut->_78_);
        signal_arr[151] = &(cut->_79_);
        signal_arr[152] = &(cut->_7_);
        signal_arr[153] = &(cut->_80_);
        signal_arr[154] = &(cut->_81_);
        signal_arr[155] = &(cut->_82_);
        signal_arr[156] = &(cut->_83_);
        signal_arr[157] = &(cut->_84_);
        signal_arr[158] = &(cut->_85_);
        signal_arr[159] = &(cut->_86_);
        signal_arr[160] = &(cut->_87_);
        signal_arr[161] = &(cut->_88_);
        signal_arr[162] = &(cut->_89_);
        signal_arr[163] = &(cut->_8_);
        signal_arr[164] = &(cut->_90_);
        signal_arr[165] = &(cut->_91_);
        signal_arr[166] = &(cut->_92_);
        signal_arr[167] = &(cut->_93_);
        signal_arr[168] = &(cut->_94_);
        signal_arr[169] = &(cut->_95_);
        signal_arr[170] = &(cut->_96_);
        signal_arr[171] = &(cut->_97_);
        signal_arr[172] = &(cut->_98_);
        signal_arr[173] = &(cut->_99_);
        signal_arr[174] = &(cut->_9_);
    }

};
