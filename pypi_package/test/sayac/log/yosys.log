
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.36 (git sha1 8f07a0d8404, clang 15.0.0 -fPIC -Os)


-- Executing script file `/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/yosys_script.ys' --

1. Executing GHDL.
Importing module LGC.
Importing module dpu.
Importing module ccu.
Importing module inc_4.
Importing module mux2ofnbits_4.
Importing module mux8of16bits.
Importing module flags.
Importing module reg.
Importing module imm.
Importing module mux2ofnbits_16.
Importing module add_16.
Importing module mux3of16bits.
Importing module inc_16.
Importing module mdu.
Importing module cmp.
Importing module asu.
Importing module llu.
Importing module mux2ofnbits_5.
Importing module shu.
Importing module iff.
Importing module comp.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: comp                
root of   0 design levels: iff                 
root of   0 design levels: shu                 
root of   0 design levels: mux2ofnbits_5       
root of   1 design levels: llu                 
root of   0 design levels: asu                 
root of   0 design levels: cmp                 
root of   0 design levels: mdu                 
root of   0 design levels: inc_16              
root of   0 design levels: mux3of16bits        
root of   0 design levels: add_16              
root of   0 design levels: mux2ofnbits_16      
root of   0 design levels: imm                 
root of   0 design levels: reg                 
root of   1 design levels: flags               
root of   0 design levels: mux8of16bits        
root of   0 design levels: mux2ofnbits_4       
root of   0 design levels: inc_4               
root of   0 design levels: ccu                 
root of   2 design levels: dpu                 
root of   3 design levels: LGC                 
Automatically selected LGC as design top module.

2.2. Analyzing design hierarchy..
Top module:  \LGC
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \flags
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4

2.3. Analyzing design hierarchy..
Top module:  \LGC
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \flags
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4
Removed 0 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \LGC
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \flags
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4

3.1.2. Analyzing design hierarchy..
Top module:  \LGC
Used module:     \ccu
Used module:     \dpu
Used module:         \shu
Used module:         \mux2ofnbits_5
Used module:         \llu
Used module:             \comp
Used module:         \asu
Used module:         \cmp
Used module:         \mux2ofnbits_16
Used module:         \mdu
Used module:         \reg
Used module:         \inc_16
Used module:         \mux3of16bits
Used module:         \add_16
Used module:         \imm
Used module:         \flags
Used module:             \iff
Used module:         \mux8of16bits
Used module:         \mux2ofnbits_4
Used module:         \inc_4
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module comp.
Optimizing module iff.
<suppressed ~1 debug messages>
Optimizing module shu.
<suppressed ~1 debug messages>
Optimizing module mux2ofnbits_5.
Optimizing module llu.
Optimizing module asu.
Optimizing module cmp.
Optimizing module mdu.
Optimizing module inc_16.
<suppressed ~2 debug messages>
Optimizing module mux3of16bits.
Optimizing module add_16.
Optimizing module mux2ofnbits_16.
Optimizing module imm.
Optimizing module reg.
Optimizing module flags.
Optimizing module mux8of16bits.
Optimizing module mux2ofnbits_4.
Optimizing module inc_4.
<suppressed ~2 debug messages>
Optimizing module ccu.
<suppressed ~23 debug messages>
Optimizing module dpu.
<suppressed ~1 debug messages>
Optimizing module LGC.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module comp.
Optimizing module iff.
Optimizing module shu.
Optimizing module mux2ofnbits_5.
Optimizing module llu.
Optimizing module asu.
Optimizing module cmp.
Optimizing module mdu.
Optimizing module inc_16.
Optimizing module mux3of16bits.
Optimizing module add_16.
Optimizing module mux2ofnbits_16.
Optimizing module imm.
Optimizing module reg.
Optimizing module flags.
Optimizing module mux8of16bits.
Optimizing module mux2ofnbits_4.
Optimizing module inc_4.
Optimizing module ccu.
Optimizing module dpu.
Optimizing module LGC.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \shu..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \LGC..
Removed 10 unused cells and 293 unused wires.
<suppressed ~30 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module LGC...
Checking module add_16...
Checking module asu...
Checking module ccu...
Checking module cmp...
Checking module comp...
Checking module dpu...
Checking module flags...
Checking module iff...
Checking module imm...
Checking module inc_16...
Checking module inc_4...
Checking module llu...
Checking module mdu...
Checking module mux2ofnbits_16...
Checking module mux2ofnbits_4...
Checking module mux2ofnbits_5...
Checking module mux3of16bits...
Checking module mux8of16bits...
Checking module reg...
Checking module shu...
Warning: found logic loop in module shu:
    cell \1961 ($pmux)
    wire \right_shu_reg [0]
Warning: found logic loop in module shu:
    cell \1979 ($pmux)
    wire \right_shu_reg [1]
Warning: found logic loop in module shu:
    cell \1997 ($pmux)
    wire \right_shu_reg [2]
Warning: found logic loop in module shu:
    cell \2015 ($pmux)
    wire \right_shu_reg [3]
Warning: found logic loop in module shu:
    cell \2033 ($pmux)
    wire \right_shu_reg [4]
Warning: found logic loop in module shu:
    cell \2051 ($pmux)
    wire \right_shu_reg [5]
Warning: found logic loop in module shu:
    cell \2069 ($pmux)
    wire \right_shu_reg [6]
Warning: found logic loop in module shu:
    cell \2087 ($pmux)
    wire \right_shu_reg [7]
Warning: found logic loop in module shu:
    cell \2105 ($pmux)
    wire \right_shu_reg [8]
Warning: found logic loop in module shu:
    cell \2123 ($pmux)
    wire \right_shu_reg [9]
Warning: found logic loop in module shu:
    cell \2141 ($pmux)
    wire \right_shu_reg [10]
Warning: found logic loop in module shu:
    cell \2159 ($pmux)
    wire \right_shu_reg [11]
Warning: found logic loop in module shu:
    cell \2177 ($pmux)
    wire \right_shu_reg [12]
Warning: found logic loop in module shu:
    cell \2195 ($pmux)
    wire \right_shu_reg [13]
Warning: found logic loop in module shu:
    cell \2213 ($pmux)
    wire \right_shu_reg [14]
Warning: found logic loop in module shu:
    cell \2231 ($pmux)
    wire \right_shu_reg [15]
Warning: found logic loop in module shu:
    cell \2248 ($pmux)
    wire \right_shu_reg [16]
Warning: found logic loop in module shu:
    cell \2265 ($pmux)
    wire \left_shu_reg [0]
Warning: found logic loop in module shu:
    cell \2283 ($pmux)
    wire \left_shu_reg [1]
Warning: found logic loop in module shu:
    cell \2301 ($pmux)
    wire \left_shu_reg [2]
Warning: found logic loop in module shu:
    cell \2319 ($pmux)
    wire \left_shu_reg [3]
Warning: found logic loop in module shu:
    cell \2337 ($pmux)
    wire \left_shu_reg [4]
Warning: found logic loop in module shu:
    cell \2355 ($pmux)
    wire \left_shu_reg [5]
Warning: found logic loop in module shu:
    cell \2373 ($pmux)
    wire \left_shu_reg [6]
Warning: found logic loop in module shu:
    cell \2391 ($pmux)
    wire \left_shu_reg [7]
Warning: found logic loop in module shu:
    cell \2409 ($pmux)
    wire \left_shu_reg [8]
Warning: found logic loop in module shu:
    cell \2427 ($pmux)
    wire \left_shu_reg [9]
Warning: found logic loop in module shu:
    cell \2445 ($pmux)
    wire \left_shu_reg [10]
Warning: found logic loop in module shu:
    cell \2463 ($pmux)
    wire \left_shu_reg [11]
Warning: found logic loop in module shu:
    cell \2481 ($pmux)
    wire \left_shu_reg [12]
Warning: found logic loop in module shu:
    cell \2499 ($pmux)
    wire \left_shu_reg [13]
Warning: found logic loop in module shu:
    cell \2517 ($pmux)
    wire \left_shu_reg [14]
Warning: found logic loop in module shu:
    cell \2534 ($pmux)
    wire \left_shu_reg [15]
Warning: found logic loop in module shu:
    cell \2536 ($pmux)
    wire \left_shu_reg [16]
Found and reported 34 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~162 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
<suppressed ~45 debug messages>
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 69 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~110 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
    New ctrl vector for $pmux cell \1182: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$704 }
    New ctrl vector for $pmux cell \1186: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$706 }
    New ctrl vector for $pmux cell \1190: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$708 }
    New ctrl vector for $pmux cell \1194: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$710 }
    New ctrl vector for $pmux cell \1198: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$712 }
    New ctrl vector for $pmux cell \1202: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$714 }
    New ctrl vector for $pmux cell \1206: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$716 }
    New ctrl vector for $pmux cell \1210: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$718 }
    New ctrl vector for $pmux cell \1214: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$720 }
    New ctrl vector for $pmux cell \1218: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$722 }
    New ctrl vector for $pmux cell \1222: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$724 }
    New ctrl vector for $pmux cell \1226: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$726 }
    New ctrl vector for $pmux cell \1230: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$728 }
    New ctrl vector for $pmux cell \1234: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$730 }
    New ctrl vector for $pmux cell \1238: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$732 }
    New ctrl vector for $pmux cell \1242: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$734 }
    New ctrl vector for $pmux cell \1246: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$736 }
    New ctrl vector for $pmux cell \1250: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$738 }
    New ctrl vector for $pmux cell \1255: { $auto$opt_reduce.cc:134:opt_pmux$740 $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 }
    New ctrl vector for $pmux cell \1259: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$742 }
    New ctrl vector for $pmux cell \1267: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$744 }
    New ctrl vector for $pmux cell \1271: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$746 }
    New ctrl vector for $pmux cell \1275: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$748 }
    New ctrl vector for $pmux cell \1279: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$750 }
    New ctrl vector for $pmux cell \1283: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$752 }
    New ctrl vector for $pmux cell \1287: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$754 }
    New ctrl vector for $pmux cell \1313: $auto$ghdl.cc:806:import_module$425
    New ctrl vector for $pmux cell \1003: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1007: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1378: { $auto$ghdl.cc:806:import_module$339 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \1009: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1398: $auto$ghdl.cc:806:import_module$425
    New ctrl vector for $pmux cell \1017: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1020: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1023: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1029: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1037: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1040: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1043: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1046: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \1049: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \234: { $auto$ghdl.cc:806:import_module$427 $auto$ghdl.cc:806:import_module$426 }
    New ctrl vector for $pmux cell \239: $auto$opt_reduce.cc:134:opt_pmux$756
    New ctrl vector for $pmux cell \243: $auto$ghdl.cc:806:import_module$424
    New ctrl vector for $pmux cell \247: { $auto$ghdl.cc:806:import_module$427 $auto$ghdl.cc:806:import_module$426 }
    New ctrl vector for $pmux cell \251: { $auto$ghdl.cc:806:import_module$427 $auto$ghdl.cc:806:import_module$426 }
    New ctrl vector for $pmux cell \257: $auto$opt_reduce.cc:134:opt_pmux$758
    New ctrl vector for $pmux cell \261: $auto$ghdl.cc:806:import_module$427
    New ctrl vector for $pmux cell \266: $auto$opt_reduce.cc:134:opt_pmux$760
    New ctrl vector for $pmux cell \270: $auto$ghdl.cc:806:import_module$427
    New ctrl vector for $pmux cell \275: $auto$opt_reduce.cc:134:opt_pmux$762
    New ctrl vector for $pmux cell \280: $auto$opt_reduce.cc:134:opt_pmux$764
    New ctrl vector for $pmux cell \1178: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$766 }
    New ctrl vector for $pmux cell \1059: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1062: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1065: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1068: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1071: $auto$ghdl.cc:806:import_module$339
    New ctrl vector for $pmux cell \1077: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$768 }
    New ctrl vector for $pmux cell \1081: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$770 }
    New ctrl vector for $pmux cell \1085: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$772 }
    New ctrl vector for $pmux cell \1089: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$774 }
    New ctrl vector for $pmux cell \1093: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$776 }
    New ctrl vector for $pmux cell \419: $auto$opt_reduce.cc:134:opt_pmux$778
    New ctrl vector for $pmux cell \1097: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$780 }
    New ctrl vector for $pmux cell \1101: { $auto$ghdl.cc:806:import_module$366 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$782 }
    New ctrl vector for $pmux cell \1105: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$784 }
    New ctrl vector for $pmux cell \1109: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$786 }
    New ctrl vector for $pmux cell \1113: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$788 }
    New ctrl vector for $pmux cell \1117: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$790 }
    New ctrl vector for $pmux cell \1121: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$792 }
    New ctrl vector for $pmux cell \1125: { $auto$ghdl.cc:806:import_module$357 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$794 }
    New ctrl vector for $pmux cell \1129: { $auto$ghdl.cc:806:import_module$366 $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$796 }
    New ctrl vector for $pmux cell \1137: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$798 }
    New ctrl vector for $pmux cell \1141: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$800 }
    New ctrl vector for $pmux cell \527: { $auto$ghdl.cc:806:import_module$163 $auto$ghdl.cc:806:import_module$157 $auto$ghdl.cc:806:import_module$152 $auto$ghdl.cc:806:import_module$148 $auto$ghdl.cc:806:import_module$141 }
    New ctrl vector for $pmux cell \529: $auto$ghdl.cc:806:import_module$168
    New ctrl vector for $pmux cell \541: $auto$opt_reduce.cc:134:opt_pmux$802
    New ctrl vector for $pmux cell \569: $auto$opt_reduce.cc:134:opt_pmux$804
    New ctrl vector for $pmux cell \574: $auto$opt_reduce.cc:134:opt_pmux$806
    New ctrl vector for $pmux cell \579: { $auto$ghdl.cc:806:import_module$217 $auto$ghdl.cc:806:import_module$173 $auto$opt_reduce.cc:134:opt_pmux$808 }
    New ctrl vector for $pmux cell \585: $auto$ghdl.cc:806:import_module$136
    New ctrl vector for $pmux cell \590: $auto$opt_reduce.cc:134:opt_pmux$810
    New ctrl vector for $pmux cell \595: $auto$opt_reduce.cc:134:opt_pmux$812
    New ctrl vector for $pmux cell \597: $auto$ghdl.cc:806:import_module$217
    New ctrl vector for $pmux cell \600: { $auto$ghdl.cc:806:import_module$217 $auto$ghdl.cc:806:import_module$173 }
    New ctrl vector for $pmux cell \603: $auto$ghdl.cc:806:import_module$217
    New ctrl vector for $pmux cell \609: { $auto$ghdl.cc:806:import_module$217 $auto$ghdl.cc:806:import_module$173 $auto$opt_reduce.cc:134:opt_pmux$814 }
    New ctrl vector for $pmux cell \613: $auto$ghdl.cc:806:import_module$137
    New ctrl vector for $pmux cell \617: $auto$ghdl.cc:806:import_module$136
    New ctrl vector for $pmux cell \621: $auto$ghdl.cc:806:import_module$137
    New ctrl vector for $pmux cell \624: { $auto$ghdl.cc:806:import_module$225 $auto$ghdl.cc:806:import_module$221 }
    New ctrl vector for $pmux cell \627: { $auto$ghdl.cc:806:import_module$225 $auto$ghdl.cc:806:import_module$221 }
    New ctrl vector for $pmux cell \633: { $auto$ghdl.cc:806:import_module$217 $auto$ghdl.cc:806:import_module$173 $auto$opt_reduce.cc:134:opt_pmux$816 }
    New ctrl vector for $pmux cell \638: $auto$opt_reduce.cc:134:opt_pmux$818
    New ctrl vector for $pmux cell \643: $auto$opt_reduce.cc:134:opt_pmux$820
    New ctrl vector for $pmux cell \1145: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$822 }
    New ctrl vector for $pmux cell \652: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \657: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$824 }
    New ctrl vector for $pmux cell \662: $auto$opt_reduce.cc:134:opt_pmux$826
    New ctrl vector for $pmux cell \669: $auto$opt_reduce.cc:134:opt_pmux$828
    New ctrl vector for $pmux cell \680: $auto$opt_reduce.cc:134:opt_pmux$830
    New ctrl vector for $pmux cell \690: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$832 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \697: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$834 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \707: $auto$opt_reduce.cc:134:opt_pmux$836
    New ctrl vector for $pmux cell \710: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \723: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$838 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \739: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$840 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \742: { $auto$ghdl.cc:806:import_module$454 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \745: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \748: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \751: { $auto$ghdl.cc:806:import_module$454 $auto$ghdl.cc:806:import_module$430 }
    New ctrl vector for $pmux cell \766: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$842 }
    New ctrl vector for $pmux cell \775: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \778: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \782: $auto$ghdl.cc:806:import_module$432
    New ctrl vector for $pmux cell \788: $auto$opt_reduce.cc:134:opt_pmux$844
    New ctrl vector for $pmux cell \791: $auto$ghdl.cc:806:import_module$436
    New ctrl vector for $pmux cell \797: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$846 }
    New ctrl vector for $pmux cell \803: { $auto$ghdl.cc:806:import_module$454 $auto$opt_reduce.cc:134:opt_pmux$848 }
    New ctrl vector for $pmux cell \808: $auto$opt_reduce.cc:134:opt_pmux$850
    New ctrl vector for $pmux cell \813: $auto$opt_reduce.cc:134:opt_pmux$852
    New ctrl vector for $pmux cell \818: $auto$opt_reduce.cc:134:opt_pmux$854
    New ctrl vector for $pmux cell \821: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \824: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \829: $auto$opt_reduce.cc:134:opt_pmux$856
    New ctrl vector for $pmux cell \836: $auto$ghdl.cc:806:import_module$438
    New ctrl vector for $pmux cell \840: $auto$ghdl.cc:806:import_module$440
    New ctrl vector for $pmux cell \843: { $auto$ghdl.cc:806:import_module$359 $auto$ghdl.cc:806:import_module$358 }
    New ctrl vector for $pmux cell \850: $auto$ghdl.cc:806:import_module$358
    New ctrl vector for $pmux cell \854: $auto$ghdl.cc:806:import_module$359
    New ctrl vector for $pmux cell \857: { $auto$ghdl.cc:806:import_module$359 $auto$ghdl.cc:806:import_module$358 }
    New ctrl vector for $pmux cell \863: $auto$ghdl.cc:806:import_module$430
    New ctrl vector for $pmux cell \878: { $auto$ghdl.cc:806:import_module$454 $auto$ghdl.cc:806:import_module$430 $auto$opt_reduce.cc:134:opt_pmux$858 }
    New ctrl vector for $pmux cell \892: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \894: $auto$ghdl.cc:806:import_module$454
    New ctrl vector for $pmux cell \1149: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$860 }
    New ctrl vector for $pmux cell \1158: { $auto$opt_reduce.cc:134:opt_pmux$862 $auto$ghdl.cc:806:import_module$420 }
    New ctrl vector for $pmux cell \1162: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$864 }
    New ctrl vector for $pmux cell \958: $auto$ghdl.cc:806:import_module$423
    New ctrl vector for $pmux cell \961: $auto$ghdl.cc:806:import_module$424
    New ctrl vector for $pmux cell \965: $auto$ghdl.cc:806:import_module$423
    New ctrl vector for $pmux cell \968: $auto$ghdl.cc:806:import_module$423
    New ctrl vector for $pmux cell \972: $auto$opt_reduce.cc:134:opt_pmux$866
    New ctrl vector for $pmux cell \976: $auto$opt_reduce.cc:134:opt_pmux$868
    New ctrl vector for $pmux cell \979: $auto$ghdl.cc:806:import_module$424
    New ctrl vector for $pmux cell \984: $auto$ghdl.cc:806:import_module$423
    New ctrl vector for $pmux cell \987: $auto$ghdl.cc:806:import_module$424
    New ctrl vector for $pmux cell \990: $auto$ghdl.cc:806:import_module$423
    New ctrl vector for $pmux cell \993: $auto$ghdl.cc:806:import_module$424
    New ctrl vector for $pmux cell \1166: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$870 }
    New ctrl vector for $pmux cell \1170: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$872 }
    New ctrl vector for $pmux cell \1174: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$874 }
    New ctrl vector for $pmux cell \1234: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$876 }
    New ctrl vector for $pmux cell \1238: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$878 }
    New ctrl vector for $pmux cell \1242: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$880 }
    New ctrl vector for $pmux cell \1246: { $auto$ghdl.cc:806:import_module$458 $auto$opt_reduce.cc:134:opt_pmux$882 }
    New ctrl vector for $pmux cell \1255: { $auto$opt_reduce.cc:134:opt_pmux$884 $auto$ghdl.cc:806:import_module$420 }
    New ctrl vector for $pmux cell \1267: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$886 }
    New ctrl vector for $pmux cell \1271: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$888 }
    New ctrl vector for $pmux cell \1275: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$890 }
    New ctrl vector for $pmux cell \1279: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$892 }
    New ctrl vector for $pmux cell \1077: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$894 }
    New ctrl vector for $pmux cell \1097: { $auto$ghdl.cc:806:import_module$357 $auto$opt_reduce.cc:134:opt_pmux$896 }
    New ctrl vector for $pmux cell \1101: { $auto$ghdl.cc:806:import_module$366 $auto$opt_reduce.cc:134:opt_pmux$898 }
    New ctrl vector for $pmux cell \1129: { $auto$ghdl.cc:806:import_module$366 $auto$opt_reduce.cc:134:opt_pmux$900 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$875: { $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 $auto$ghdl.cc:806:import_module$357 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$877: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$879: { $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 $auto$ghdl.cc:806:import_module$357 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$881: { $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 $auto$ghdl.cc:806:import_module$357 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$883: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$366 $auto$ghdl.cc:806:import_module$357 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$885: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$887: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$889: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$891: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$893: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$895: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$366 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$897: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$357 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$899: { $auto$ghdl.cc:806:import_module$458 $auto$ghdl.cc:806:import_module$420 $auto$ghdl.cc:806:import_module$357 }
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
    New ctrl vector for $pmux cell \1997: { $auto$opt_reduce.cc:134:opt_pmux$902 $auto$ghdl.cc:806:import_module$588 $auto$ghdl.cc:806:import_module$587 $auto$ghdl.cc:806:import_module$586 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2015: { $auto$opt_reduce.cc:134:opt_pmux$904 $auto$ghdl.cc:806:import_module$587 $auto$ghdl.cc:806:import_module$586 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2033: { $auto$opt_reduce.cc:134:opt_pmux$906 $auto$ghdl.cc:806:import_module$586 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2051: { $auto$opt_reduce.cc:134:opt_pmux$908 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2069: { $auto$opt_reduce.cc:134:opt_pmux$910 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2087: { $auto$opt_reduce.cc:134:opt_pmux$912 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2105: { $auto$opt_reduce.cc:134:opt_pmux$914 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2123: { $auto$opt_reduce.cc:134:opt_pmux$916 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2141: { $auto$opt_reduce.cc:134:opt_pmux$918 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2159: { $auto$opt_reduce.cc:134:opt_pmux$920 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2177: { $auto$opt_reduce.cc:134:opt_pmux$922 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2195: { $auto$opt_reduce.cc:134:opt_pmux$924 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2213: { $auto$opt_reduce.cc:134:opt_pmux$926 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2231: { $auto$opt_reduce.cc:134:opt_pmux$928 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2248: $auto$opt_reduce.cc:134:opt_pmux$930
    New ctrl vector for $pmux cell \2265: { $auto$opt_reduce.cc:134:opt_pmux$932 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2283: { $auto$opt_reduce.cc:134:opt_pmux$934 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2301: { $auto$opt_reduce.cc:134:opt_pmux$936 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2319: { $auto$opt_reduce.cc:134:opt_pmux$938 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2337: { $auto$opt_reduce.cc:134:opt_pmux$940 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2355: { $auto$opt_reduce.cc:134:opt_pmux$942 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2373: { $auto$opt_reduce.cc:134:opt_pmux$944 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2391: { $auto$opt_reduce.cc:134:opt_pmux$946 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2409: { $auto$opt_reduce.cc:134:opt_pmux$948 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2427: { $auto$opt_reduce.cc:134:opt_pmux$950 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2445: { $auto$opt_reduce.cc:134:opt_pmux$952 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2463: { $auto$opt_reduce.cc:134:opt_pmux$954 $auto$ghdl.cc:806:import_module$586 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2481: { $auto$opt_reduce.cc:134:opt_pmux$956 $auto$ghdl.cc:806:import_module$587 $auto$ghdl.cc:806:import_module$586 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2499: { $auto$opt_reduce.cc:134:opt_pmux$958 $auto$ghdl.cc:806:import_module$588 $auto$ghdl.cc:806:import_module$587 $auto$ghdl.cc:806:import_module$586 $auto$ghdl.cc:806:import_module$585 $auto$ghdl.cc:806:import_module$584 $auto$ghdl.cc:806:import_module$583 $auto$ghdl.cc:806:import_module$582 $auto$ghdl.cc:806:import_module$581 $auto$ghdl.cc:806:import_module$580 $auto$ghdl.cc:806:import_module$579 $auto$ghdl.cc:806:import_module$578 $auto$ghdl.cc:806:import_module$577 $auto$ghdl.cc:806:import_module$576 $auto$ghdl.cc:806:import_module$575 }
    New ctrl vector for $pmux cell \2536: $auto$opt_reduce.cc:134:opt_pmux$960
    New ctrl vector for $pmux cell \2550: { $auto$opt_reduce.cc:134:opt_pmux$964 $auto$opt_reduce.cc:134:opt_pmux$962 }
  Optimizing cells in module \shu.
Performed a total of 227 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~456 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
<suppressed ~45 debug messages>
Removed a total of 167 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 12 unused cells and 260 unused wires.
<suppressed ~15 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~127 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
    New ctrl vector for $pmux cell \579: { $auto$opt_reduce.cc:134:opt_pmux$966 $auto$opt_reduce.cc:134:opt_pmux$808 }
    New ctrl vector for $pmux cell \609: { $auto$opt_reduce.cc:134:opt_pmux$968 $auto$opt_reduce.cc:134:opt_pmux$814 }
    New ctrl vector for $pmux cell \624: $auto$opt_reduce.cc:134:opt_pmux$970
    New ctrl vector for $pmux cell \627: $auto$opt_reduce.cc:134:opt_pmux$972
    New ctrl vector for $pmux cell \633: { $auto$opt_reduce.cc:134:opt_pmux$974 $auto$opt_reduce.cc:134:opt_pmux$814 }
    New ctrl vector for $pmux cell \843: $auto$opt_reduce.cc:134:opt_pmux$976
    New ctrl vector for $pmux cell \981: $auto$opt_reduce.cc:134:opt_pmux$978
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 7 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~15 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 5 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~127 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.6.20. Executing OPT_DFF pass (perform DFF optimizations).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking ccu.pstate as FSM state register:
    Register has an initialization value.
    Circuit seems to be self-resetting.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~127 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \2568 ($adff) from module iff (D = \inflag, Q = \outflag_ff).
Adding EN signal on \1735 ($adff) from module mdu (D = \outmdu_reg [31:16], Q = \outmdu2).
Adding EN signal on \1733 ($adff) from module mdu (D = \outmdu_reg [15:0], Q = \outmdu1).
Adding EN signal on \1510 ($adff) from module reg (D = \inreg, Q = \outreg).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 5 unused cells and 5 unused wires.
<suppressed ~9 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 32) from port A of cell add_16.\1575 ($add).
Removed top 16 bits (of 32) from port B of cell add_16.\1575 ($add).
Removed top 16 bits (of 32) from port Y of cell add_16.\1575 ($add).
Removed top 16 bits (of 32) from port A of cell asu.\1764 ($add).
Removed top 16 bits (of 32) from port B of cell asu.\1764 ($add).
Removed top 16 bits (of 32) from port Y of cell asu.\1764 ($add).
Removed top 16 bits (of 32) from port A of cell asu.\1772 ($sub).
Removed top 16 bits (of 32) from port B of cell asu.\1772 ($sub).
Removed top 16 bits (of 32) from port Y of cell asu.\1772 ($sub).
Removed top 16 bits (of 32) from wire asu.$auto$ghdl.cc:806:import_module$561.
Removed top 16 bits (of 32) from wire asu.$auto$ghdl.cc:806:import_module$563.
Removed top 2 bits (of 3) from port B of cell ccu.\322 ($eq).
Removed top 2 bits (of 3) from port B of cell ccu.\350 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\362 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\376 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\421 ($eq).
Removed top 1 bits (of 3) from port B of cell ccu.\543 ($eq).
Removed top 2 bits (of 8) from mux cell ccu.\643 ($mux).
Removed top 2 bits (of 8) from mux cell ccu.\894 ($mux).
Removed top 3 bits (of 4) from port B of cell ccu.\1298 ($eq).
Removed top 1 bits (of 2) from port B of cell ccu.\1302 ($eq).
Removed top 2 bits (of 4) from port B of cell ccu.\1315 ($eq).
Removed top 2 bits (of 4) from port B of cell ccu.\1317 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1319 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1322 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1325 ($eq).
Removed top 1 bits (of 4) from port B of cell ccu.\1328 ($eq).
Removed top 1 bits (of 2) from port B of cell ccu.\1385 ($eq).
Removed top 2 bits (of 8) from wire ccu.$auto$ghdl.cc:806:import_module$244.
Removed top 2 bits (of 8) from wire ccu.$auto$ghdl.cc:806:import_module$297.
Removed top 15 bits (of 32) from port A of cell cmp.\1749 ($gt).
Removed top 15 bits (of 32) from port B of cell cmp.\1749 ($gt).
Converting cell cmp.\1749 ($gt) from signed to unsigned.
Removed top 1 bits (of 17) from port A of cell cmp.\1749 ($gt).
Removed top 1 bits (of 17) from port B of cell cmp.\1749 ($gt).
Removed top 1 bits (of 16) from wire comp.carry.
Removed top 8 bits (of 16) from mux cell dpu.\100 ($mux).
Removed top 8 bits (of 16) from mux cell dpu.\105 ($mux).
Removed top 2 bits (of 8) from wire dpu.inflag.
Removed top 1 bits (of 16) from wire inc_16.carry.
Removed top 1 bits (of 4) from wire inc_4.carry.
Removed top 15 bits (of 32) from port A of cell mdu.\1697 ($mod).
Removed top 15 bits (of 32) from port B of cell mdu.\1697 ($mod).
Removed top 15 bits (of 32) from port A of cell mdu.\1704 ($div).
Removed top 15 bits (of 32) from port B of cell mdu.\1704 ($div).
Removed top 15 bits (of 32) from port A of cell mdu.\1689 ($mul).
Removed top 15 bits (of 32) from port B of cell mdu.\1689 ($mul).
Converting cell mdu.\1689 ($mul) from signed to unsigned.
Removed top 1 bits (of 32) from port Y of cell mdu.\1689 ($mul).
Removed top 1 bits (of 17) from port A of cell mdu.\1689 ($mul).
Removed top 1 bits (of 17) from port B of cell mdu.\1689 ($mul).
Removed top 1 bits (of 32) from wire mdu.$auto$ghdl.cc:806:import_module$545.
Removed top 3 bits (of 4) from port B of cell shu.\1812 ($eq).
Removed top 2 bits (of 4) from port B of cell shu.\1819 ($eq).
Removed top 2 bits (of 4) from port B of cell shu.\1826 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\1834 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\1843 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\1852 ($eq).
Removed top 1 bits (of 4) from port B of cell shu.\1861 ($eq).
Removed top 2 bits (of 3) from port B of cell shu.\2541 ($eq).
Removed top 1 bits (of 3) from port B of cell shu.\2543 ($eq).
Removed top 1 bits (of 17) from mux cell shu.\2550 ($pmux).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 3 unused cells and 11 unused wires.
<suppressed ~12 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module LGC:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module add_16:
  creating $macc model for \1575 ($add).
  creating $alu model for $macc \1575.
  creating $alu cell for \1575: $auto$alumacc.cc:485:replace_alu$994
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module asu:
  creating $macc model for \1764 ($add).
  creating $macc model for \1772 ($sub).
  creating $alu model for $macc \1772.
  creating $alu model for $macc \1764.
  creating $alu cell for \1764: $auto$alumacc.cc:485:replace_alu$997
  creating $alu cell for \1772: $auto$alumacc.cc:485:replace_alu$1000
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ccu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cmp:
  creating $alu model for \1749 ($gt): new $alu
  creating $alu model for \1744 ($eq): merged with \1749.
  creating $alu cell for \1749, \1744: $auto$alumacc.cc:485:replace_alu$1004
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module comp:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dpu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module flags:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module iff:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module imm:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module inc_16:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module inc_4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module llu:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mdu:
  creating $macc model for \1689 ($mul).
  creating $macc cell for \1689: $auto$alumacc.cc:365:replace_macc$1015
  created 0 $alu and 1 $macc cells.
Extracting $alu and $macc cells in module mux2ofnbits_16:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2ofnbits_4:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux2ofnbits_5:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux3of16bits:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module mux8of16bits:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module reg:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module shu:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module mdu that may be considered for resource sharing.
  Analyzing resource sharing options for \1704 ($div):
    Found 1 activation_patterns using ctrl signal { $auto$ghdl.cc:806:import_module$549 \arithmul }.
    No candidates found.
  Analyzing resource sharing options for \1697 ($mod):
    Found 1 activation_patterns using ctrl signal { $auto$ghdl.cc:806:import_module$549 \arithmul }.
    No candidates found.

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
<suppressed ~1 debug messages>
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~121 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~121 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
<suppressed ~130 debug messages>
Optimizing module cmp.
<suppressed ~2 debug messages>
Optimizing module comp.
Optimizing module dpu.
<suppressed ~1 debug messages>
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
<suppressed ~1 debug messages>
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
<suppressed ~3 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 3 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 1 unused cells and 45 unused wires.
<suppressed ~4 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~102 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
    Consolidated identical input bits for $mux cell \1287:
      Old ports: A={ 2'00 $auto$ghdl.cc:806:import_module$297 }, B=8'00000000, Y=\selflag
      New ports: A=$auto$ghdl.cc:806:import_module$297, B=6'000000, Y=\selflag [5:0]
      New connections: \selflag [7:6] = 2'00
    Consolidated identical input bits for $mux cell \1313:
      Old ports: A=2'00, B=2'10, Y=$auto$ghdl.cc:806:import_module$429
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:806:import_module$429 [1]
      New connections: $auto$ghdl.cc:806:import_module$429 [0] = 1'0
    Consolidated identical input bits for $mux cell \1389:
      Old ports: A=2'10, B=2'00, Y=$auto$ghdl.cc:806:import_module$459
      New ports: A=1'1, B=1'0, Y=$auto$ghdl.cc:806:import_module$459 [1]
      New connections: $auto$ghdl.cc:806:import_module$459 [0] = 1'0
    Consolidated identical input bits for $mux cell \643:
      Old ports: A=6'000000, B=6'110000, Y=$auto$ghdl.cc:806:import_module$244
      New ports: A=1'0, B=1'1, Y=$auto$ghdl.cc:806:import_module$244 [4]
      New connections: { $auto$ghdl.cc:806:import_module$244 [5] $auto$ghdl.cc:806:import_module$244 [3:0] } = { $auto$ghdl.cc:806:import_module$244 [4] 4'0000 }
  Optimizing cells in module \ccu.
    Consolidated identical input bits for $mux cell \1391:
      Old ports: A=$auto$ghdl.cc:806:import_module$459, B=2'00, Y=$auto$ghdl.cc:806:import_module$460
      New ports: A=$auto$ghdl.cc:806:import_module$459 [1], B=1'0, Y=$auto$ghdl.cc:806:import_module$460 [1]
      New connections: $auto$ghdl.cc:806:import_module$460 [0] = 1'0
    Consolidated identical input bits for $mux cell \894:
      Old ports: A=6'000000, B=$auto$ghdl.cc:806:import_module$244, Y=$auto$ghdl.cc:806:import_module$297
      New ports: A=1'0, B=$auto$ghdl.cc:806:import_module$244 [4], Y=$auto$ghdl.cc:806:import_module$297 [4]
      New connections: { $auto$ghdl.cc:806:import_module$297 [5] $auto$ghdl.cc:806:import_module$297 [3:0] } = { $auto$ghdl.cc:806:import_module$297 [4] 4'0000 }
  Optimizing cells in module \ccu.
    Consolidated identical input bits for $mux cell \1287:
      Old ports: A=$auto$ghdl.cc:806:import_module$297, B=6'000000, Y=\selflag [5:0]
      New ports: A=$auto$ghdl.cc:806:import_module$297 [4], B=1'0, Y=\selflag [4]
      New connections: { \selflag [5] \selflag [3:0] } = { \selflag [4] 4'0000 }
    Consolidated identical input bits for $mux cell \1398:
      Old ports: A=2'00, B=$auto$ghdl.cc:806:import_module$460, Y=$auto$ghdl.cc:806:import_module$464
      New ports: A=1'0, B=$auto$ghdl.cc:806:import_module$460 [1], Y=$auto$ghdl.cc:806:import_module$464 [1]
      New connections: $auto$ghdl.cc:806:import_module$464 [0] = 1'0
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 8 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
<suppressed ~5 debug messages>
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~103 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~6 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 2 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~102 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/Cellar/yosys/0.36/share/yosys/techmap.v
Parsing Verilog input from `/usr/local/Cellar/yosys/0.36/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$60e8138c14f9daeb5369878e57f9a804623b8bc8\_90_pmux for cells of type $pmux.
Using template $paramod$556548cb7038fa09465db9fdc5b10cb4e4ea85e6\_90_pmux for cells of type $pmux.
Using template $paramod$3ab9a015ab781a81f86ab59e92093de7732cf40e\_90_pmux for cells of type $pmux.
Using template $paramod$f1a1302b8e09c99a2717f99de3f6cd758facf154\_90_pmux for cells of type $pmux.
Using template $paramod$29b56fed7bdb16c8b09b02aa2858037931055703\_90_pmux for cells of type $pmux.
Using template $paramod$0e0051568375348277517457a77d9a6514e45e4f\_90_pmux for cells of type $pmux.
Using template $paramod$7433a73939f62b85caa06b2dbffe4eadcc0f64ca\_90_pmux for cells of type $pmux.
Using template $paramod$eb7b5fa594d21f32e2ff3bd05b81752f0f326d5f\_90_pmux for cells of type $pmux.
Using template $paramod$aa21a8cfcdb2d038c61c16c25c37cdf209d597be\_90_pmux for cells of type $pmux.
Using template $paramod$bf541dd3c0ba8228982b61e7bfbc350a2c253f4c\_90_pmux for cells of type $pmux.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$b3b6ac92d800c6f07aa48f510f923d86a674e5a7\_90_pmux for cells of type $pmux.
Using template $paramod$d629d85c8826a74239b9178d1930215a43b0ceb0\_90_pmux for cells of type $pmux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$0d149ffe75563ef6fcc1a3dddc59d00af28651a7\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $adffe.
Using template $paramod$73f03f2a046c2525d676de29570563a5b39716c2\_90_mod for cells of type $mod.
Using template $paramod$73f03f2a046c2525d676de29570563a5b39716c2\_90_div for cells of type $div.
Using extmapper simplemap for cells of type $or.
Using extmapper maccmap for cells of type $macc.
  add \in1 * \in2 (16x16 bits, unsigned)
Using template $paramod$73f03f2a046c2525d676de29570563a5b39716c2\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000011111 for cells of type $fa.
Using template $paramod$ebf89ea36a793f0f77858f212141d47c833068ad\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=32:A_WIDTH=32:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000100000 for cells of type $__div_mod_u.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011111 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=32:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=32:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=33:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=33:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=34:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=34:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=35:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=35:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=36:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=36:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=37:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=37:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=38:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=38:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=39:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=39:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=40:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=40:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=41:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=41:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=42:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=42:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=43:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=43:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=44:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=44:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=45:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=45:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=46:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=46:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=47:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=47:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=48:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=48:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=49:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=49:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=50:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=50:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=51:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=51:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=52:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=52:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=53:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=53:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=54:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=54:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=55:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=55:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=56:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=56:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=57:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=57:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=58:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=58:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=59:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=59:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=60:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=60:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=61:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=61:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=62:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=62:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=63:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=63:A_WIDTH=32:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$789c344356a154d2afc7b832b41d1067dbc946ba\_90_alu for cells of type $alu.
Using template $paramod$e39069e3f4ee35c1eea86993bd74689959babaab\_90_alu for cells of type $alu.
Using template $paramod$d7aca3dc44b07ff19908fb1a3b606577588c15f1\_90_alu for cells of type $alu.
Using template $paramod$f9e3a3c4b84f99cb56fad07743ec44ad55b11c8b\_90_alu for cells of type $alu.
Using template $paramod$dd5ba471f7dcf35707f23b88cfd15b9582f97277\_90_alu for cells of type $alu.
Using template $paramod$b7531bc0616f8d4cdd8159edd2237c9ddbb2ce01\_90_alu for cells of type $alu.
Using template $paramod$ff8ba121d2f8e85b775c9f35ef677a1a276e7e1b\_90_alu for cells of type $alu.
Using template $paramod$9a66d4bebbc4fab84566caffef9f094a1a467389\_90_alu for cells of type $alu.
Using template $paramod$57bc309a5d8a948cec8981d26d896ee1cbf54d58\_90_alu for cells of type $alu.
Using template $paramod$f94cfdb8ad389f4fc4515bcb65bccd7e2d189e95\_90_alu for cells of type $alu.
Using template $paramod$2a25669ccd39fe7c0fbfb2a4d17416fc78667f00\_90_alu for cells of type $alu.
Using template $paramod$d9397dfdf5f7cf5715aebc9527845402880218a0\_90_alu for cells of type $alu.
Using template $paramod$acc477ace2583cc2ee0cf651c72a385d2bbbe9f1\_90_alu for cells of type $alu.
Using template $paramod$415abdcadc251df4f0f033b62b8f3296b8461b4e\_90_alu for cells of type $alu.
Using template $paramod$6573c1c269218f299badf6e04ca86aa37fdb352c\_90_alu for cells of type $alu.
Using template $paramod$6a21b72c9c0b32e81b169c7e08a4d8b9c462448f\_90_alu for cells of type $alu.
Using template $paramod$324e0706ebb77f1915b22f4a136962ec3fd1d7ff\_90_alu for cells of type $alu.
Using template $paramod$461fc931d630cb01bec1fea87f37fbcc53f6f6a4\_90_alu for cells of type $alu.
Using template $paramod$fe074227b1c5fbaa1ea56076182c29dbcf3a782a\_90_alu for cells of type $alu.
Using template $paramod$85502450775e62e9c6a2fe29020b3433d4335647\_90_alu for cells of type $alu.
Using template $paramod$e32c921f95fe0e2350204f4ecefc9e296355521b\_90_alu for cells of type $alu.
Using template $paramod$05d913fba320393c7e943e625bef3af776153b60\_90_alu for cells of type $alu.
Using template $paramod$8e07e2c0a3efc148d2f3714f3901076678774ed1\_90_alu for cells of type $alu.
Using template $paramod$5b7e592b3c2951af6800b7fd597f66a79b72b91c\_90_alu for cells of type $alu.
Using template $paramod$90182783100594e2dd636a282c4723cfc9adaedd\_90_alu for cells of type $alu.
Using template $paramod$851c5c9b30913ea2deae68e3ca9e9c4e649723bc\_90_alu for cells of type $alu.
Using template $paramod$1445aacdb5f2a1ef9fedf1373097ffa45438211d\_90_alu for cells of type $alu.
Using template $paramod$7add42b712fe5bbbba521e93062103d6bf78a453\_90_alu for cells of type $alu.
Using template $paramod$b6f86f6a0c43c26b22ee55f51e05d5951f0e6562\_90_alu for cells of type $alu.
Using template $paramod$044fdceace8c449ec99f900b42120ac005ff4065\_90_alu for cells of type $alu.
Using template $paramod$b6b58933bcf3c8b9e3e5de18c2637bd0e12c7c47\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000101111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000110111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000111111 for cells of type $lcu.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
No more expansions possible.
<suppressed ~38777 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
<suppressed ~20 debug messages>
Optimizing module asu.
<suppressed ~39 debug messages>
Optimizing module ccu.
<suppressed ~145 debug messages>
Optimizing module cmp.
<suppressed ~19 debug messages>
Optimizing module comp.
Optimizing module dpu.
<suppressed ~8 debug messages>
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
<suppressed ~35405 debug messages>
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
<suppressed ~102 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~426 debug messages>
Finding identical cells in module `\cmp'.
<suppressed ~33 debug messages>
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
<suppressed ~87342 debug messages>
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
<suppressed ~1299 debug messages>
Removed a total of 29700 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 912 unused cells and 30436 unused wires.
<suppressed ~920 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\LGC' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 6 wires to a netlist network with 4 inputs and 2 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

3.22.2. Extracting gate netlist of module `\add_16' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

3.22.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:                OR cells:       16
ABC RESULTS:              XNOR cells:       18
ABC RESULTS:              NAND cells:       10
ABC RESULTS:               NOR cells:       11
ABC RESULTS:            ANDNOT cells:       23
ABC RESULTS:               XOR cells:       13
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.3. Extracting gate netlist of module `\asu' to `<abc-temp-dir>/input.blif'..
Extracted 246 gates and 281 wires to a netlist network with 34 inputs and 16 outputs.

3.22.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        8
ABC RESULTS:               AND cells:       12
ABC RESULTS:                OR cells:       40
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:              XNOR cells:       20
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        5
ABC RESULTS:            ANDNOT cells:       81
ABC RESULTS:               XOR cells:       42
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:      231
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.4. Extracting gate netlist of module `\ccu' to `<abc-temp-dir>/input.blif'..
Extracted 385 gates and 403 wires to a netlist network with 17 inputs and 49 outputs.

3.22.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               AND cells:       21
ABC RESULTS:               NOR cells:       39
ABC RESULTS:               MUX cells:        8
ABC RESULTS:               NOT cells:       10
ABC RESULTS:             ORNOT cells:       20
ABC RESULTS:                OR cells:       94
ABC RESULTS:            ANDNOT cells:      124
ABC RESULTS:        internal signals:      337
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       49
Removing temp directory.

3.22.5. Extracting gate netlist of module `\cmp' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 131 wires to a netlist network with 32 inputs and 2 outputs.

3.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        6
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               AND cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:                OR cells:        4
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:               NOR cells:        3
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:        internal signals:       97
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        2
Removing temp directory.

3.22.6. Extracting gate netlist of module `\comp' to `<abc-temp-dir>/input.blif'..
Extracted 47 gates and 64 wires to a netlist network with 17 inputs and 16 outputs.

3.22.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.6.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:                OR cells:       14
ABC RESULTS:               XOR cells:       15
ABC RESULTS:        internal signals:       31
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.7. Extracting gate netlist of module `\dpu' to `<abc-temp-dir>/input.blif'..
Extracted 30 gates and 62 wires to a netlist network with 32 inputs and 16 outputs.

3.22.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.7.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.8. Extracting gate netlist of module `\flags' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.9. Extracting gate netlist of module `\iff' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 5 wires to a netlist network with 3 inputs and 1 outputs.

3.22.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.9.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.10. Extracting gate netlist of module `\imm' to `<abc-temp-dir>/input.blif'..
Extracted 80 gates and 102 wires to a netlist network with 21 inputs and 16 outputs.

3.22.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.10.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        8
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        8
ABC RESULTS:            ANDNOT cells:        8
ABC RESULTS:               MUX cells:       56
ABC RESULTS:        internal signals:       65
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.11. Extracting gate netlist of module `\inc_16' to `<abc-temp-dir>/input.blif'..
Extracted 30 gates and 46 wires to a netlist network with 16 inputs and 16 outputs.

3.22.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.11.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOT cells:       13
ABC RESULTS:                OR cells:       12
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.12. Extracting gate netlist of module `\inc_4' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

3.22.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.12.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              NAND cells:        1
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               XOR cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.13. Extracting gate netlist of module `\llu' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 102 wires to a netlist network with 51 inputs and 17 outputs.

3.22.13.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.13.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       17
Removing temp directory.

3.22.14. Extracting gate netlist of module `\mdu' to `<abc-temp-dir>/input.blif'..
Extracted 9033 gates and 9069 wires to a netlist network with 35 inputs and 33 outputs.

3.22.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.14.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:      150
ABC RESULTS:              XNOR cells:      424
ABC RESULTS:               NOT cells:      460
ABC RESULTS:               AND cells:      329
ABC RESULTS:             ORNOT cells:      290
ABC RESULTS:               NOR cells:      562
ABC RESULTS:               XOR cells:     1330
ABC RESULTS:               MUX cells:      935
ABC RESULTS:            ANDNOT cells:     3162
ABC RESULTS:                OR cells:      744
ABC RESULTS:        internal signals:     9001
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       33
Removing temp directory.

3.22.15. Extracting gate netlist of module `\mux2ofnbits_16' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 67 wires to a netlist network with 34 inputs and 16 outputs.

3.22.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.15.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       16
ABC RESULTS:        internal signals:       17
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.16. Extracting gate netlist of module `\mux2ofnbits_4' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 19 wires to a netlist network with 10 inputs and 4 outputs.

3.22.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.16.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        4
ABC RESULTS:               MUX cells:        4
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        4
Removing temp directory.

3.22.17. Extracting gate netlist of module `\mux2ofnbits_5' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 23 wires to a netlist network with 12 inputs and 5 outputs.

3.22.17.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.17.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        5
ABC RESULTS:               MUX cells:        5
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        5
Removing temp directory.

3.22.18. Extracting gate netlist of module `\mux3of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 100 wires to a netlist network with 51 inputs and 16 outputs.

3.22.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.18.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       32
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.19. Extracting gate netlist of module `\mux8of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 128 gates and 265 wires to a netlist network with 136 inputs and 16 outputs.

3.22.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.19.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:      112
ABC RESULTS:        internal signals:      113
ABC RESULTS:           input signals:      136
ABC RESULTS:          output signals:       16
Removing temp directory.

3.22.20. Extracting gate netlist of module `\reg' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.22.21. Extracting gate netlist of module `\shu' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$103804: \1961.A -> \1961.A
                                                \1961.A -> \2550.B_OR[0].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103805: \1979.A -> \1979.A
                                                \1979.A -> \2550.B_OR[1].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103806: \1997.A -> \1997.A
                                                \1997.A -> \2550.B_OR[2].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103807: \2015.A -> \2015.A
                                                \2015.A -> \2550.B_OR[3].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103808: \2033.A -> \2033.A
                                                \2033.A -> \2550.B_OR[4].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103809: \2051.A -> \2051.A
                                                \2051.A -> \2550.B_OR[5].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103810: \2069.A -> \2069.A
                                                \2069.A -> \2550.B_OR[6].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103811: \2087.A -> \2087.A
                                                \2087.A -> \2550.B_OR[7].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103812: \2105.A -> \2105.A
                                                \2105.A -> \2550.B_OR[8].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103813: \2123.A -> \2123.A
                                                \2123.A -> \2550.B_OR[9].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103814: \2141.A -> \2141.A
                                                \2141.A -> \2550.B_OR[10].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103815: \2159.A -> \2159.A
                                                \2159.A -> \2550.B_OR[11].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103816: \2177.A -> \2177.A
                                                \2177.A -> \2550.B_OR[12].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103817: \2195.A -> \2195.A
                                                \2195.A -> \2550.B_OR[13].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103818: \2213.A -> \2213.A
                                                \2213.A -> \2550.B_OR[14].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103819: \2231.A -> \2231.A
                                                \2231.A -> \2550.B_OR[15].B_AND_BITS [0]
Breaking loop using new signal $abcloop$103820: \2265.A -> \2265.A
                                                \2265.A -> \2550.B_OR[0].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103821: \2283.A -> \2283.A
                                                \2283.A -> \2550.B_OR[1].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103822: \2301.A -> \2301.A
                                                \2301.A -> \2550.B_OR[2].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103823: \2319.A -> \2319.A
                                                \2319.A -> \2550.B_OR[3].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103824: \2337.A -> \2337.A
                                                \2337.A -> \2550.B_OR[4].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103825: \2355.A -> \2355.A
                                                \2355.A -> \2550.B_OR[5].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103826: \2373.A -> \2373.A
                                                \2373.A -> \2550.B_OR[6].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103827: \2391.A -> \2391.A
                                                \2391.A -> \2550.B_OR[7].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103828: \2409.A -> \2409.A
                                                \2409.A -> \2550.B_OR[8].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103829: \2427.A -> \2427.A
                                                \2427.A -> \2550.B_OR[9].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103830: \2445.A -> \2445.A
                                                \2445.A -> \2550.B_OR[10].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103831: \2463.A -> \2463.A
                                                \2463.A -> \2550.B_OR[11].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103832: \2481.A -> \2481.A
                                                \2481.A -> \2550.B_OR[12].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103833: \2499.A -> \2499.A
                                                \2499.A -> \2550.B_OR[13].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103834: \2517.A -> \2517.A
                                                \2517.A -> \2550.B_OR[14].B_AND_BITS [1]
Breaking loop using new signal $abcloop$103835: \2534.A -> \2534.A
                                                \2534.A -> \2550.B_OR[15].B_AND_BITS [1]
Extracted 698 gates and 754 wires to a netlist network with 55 inputs and 48 outputs.

3.22.21.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.21.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               MUX cells:       32
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:      293
ABC RESULTS:              NAND cells:       15
ABC RESULTS:               AND cells:       60
ABC RESULTS:             ORNOT cells:       24
ABC RESULTS:            ANDNOT cells:      236
ABC RESULTS:        internal signals:      651
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       48
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
<suppressed ~16 debug messages>
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
<suppressed ~16 debug messages>
Optimizing module mdu.
<suppressed ~30 debug messages>
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
<suppressed ~9 debug messages>
Finding identical cells in module `\ccu'.
<suppressed ~12 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
<suppressed ~327 debug messages>
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
<suppressed ~27 debug messages>
Removed a total of 125 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 2 unused cells and 4815 unused wires.
<suppressed ~271 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \LGC
Used module:     \ccu
Used module:     \dpu
Used module:         \asu
Used module:         \reg
Used module:         \cmp
Used module:         \flags
Used module:             \iff
Used module:         \imm
Used module:         \llu
Used module:             \comp
Used module:         \mdu
Used module:         \mux2ofnbits_16
Used module:         \mux8of16bits
Used module:         \mux3of16bits
Used module:         \mux2ofnbits_4
Used module:         \mux2ofnbits_5
Used module:         \inc_16
Used module:         \add_16
Used module:         \inc_4
Used module:         \shu

3.24.2. Analyzing design hierarchy..
Top module:  \LGC
Used module:     \ccu
Used module:     \dpu
Used module:         \asu
Used module:         \reg
Used module:         \cmp
Used module:         \flags
Used module:             \iff
Used module:         \imm
Used module:         \llu
Used module:             \comp
Used module:         \mdu
Used module:         \mux2ofnbits_16
Used module:         \mux8of16bits
Used module:         \mux3of16bits
Used module:         \mux2ofnbits_4
Used module:         \mux2ofnbits_5
Used module:         \inc_16
Used module:         \add_16
Used module:         \inc_4
Used module:         \shu
Removed 0 unused modules.

3.25. Printing statistics.

=== LGC ===

   Number of wires:                 73
   Number of wire bits:            197
   Number of public wires:          73
   Number of public wire bits:     197
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_OR_                           2
     ccu                             1
     dpu                             1

=== add_16 ===

   Number of wires:                 85
   Number of wire bits:            130
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     $_ANDNOT_                      23
     $_AND_                          5
     $_NAND_                        10
     $_NOR_                         11
     $_ORNOT_                        2
     $_OR_                          16
     $_XNOR_                        18
     $_XOR_                         13

=== asu ===

   Number of wires:                221
   Number of wire bits:            266
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                232
     $_ANDNOT_                      81
     $_AND_                         12
     $_MUX_                         16
     $_NAND_                         6
     $_NOR_                          5
     $_NOT_                          7
     $_ORNOT_                        6
     $_OR_                          40
     $_XNOR_                        17
     $_XOR_                         42

=== ccu ===

   Number of wires:                424
   Number of wire bits:            550
   Number of public wires:         144
   Number of public wire bits:     270
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                331
     $_ANDNOT_                     120
     $_AND_                         21
     $_DFF_PP0_                      2
     $_MUX_                          8
     $_NAND_                        17
     $_NOR_                         39
     $_NOT_                         10
     $_ORNOT_                       20
     $_OR_                          94

=== cmp ===

   Number of wires:                 81
   Number of wire bits:            111
   Number of public wires:           4
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_ANDNOT_                      32
     $_AND_                          1
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          1
     $_ORNOT_                       19
     $_OR_                           4
     $_XNOR_                        10
     $_XOR_                          6

=== comp ===

   Number of wires:                 18
   Number of wire bits:             48
   Number of public wires:           3
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 31
     $_ORNOT_                        1
     $_OR_                          14
     $_XNOR_                         1
     $_XOR_                         15

=== dpu ===

   Number of wires:                 97
   Number of wire bits:            495
   Number of public wires:          91
   Number of public wire bits:     489
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_ANDNOT_                       2
     $_AND_                          2
     $_MUX_                         16
     $_NAND_                         2
     add_16                          1
     asu                             1
     cmp                             1
     flags                           1
     imm                             1
     inc_16                          1
     inc_4                           1
     llu                             1
     mdu                             1
     mux2ofnbits_16                  3
     mux2ofnbits_4                   3
     mux2ofnbits_5                   1
     mux3of16bits                    1
     mux8of16bits                    1
     reg                             3
     shu                             1

=== flags ===

   Number of wires:                  7
   Number of wire bits:             28
   Number of public wires:           7
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     iff                             8

=== iff ===

   Number of wires:                 10
   Number of wire bits:             10
   Number of public wires:           8
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_ANDNOT_                       1
     $_DFFE_PP0P_                    1
     $_NOR_                          1

=== imm ===

   Number of wires:                 74
   Number of wire bits:            103
   Number of public wires:           8
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_ANDNOT_                       8
     $_AND_                          8
     $_MUX_                         56
     $_NAND_                         8
     $_NOT_                          2

=== inc_16 ===

   Number of wires:                 29
   Number of wire bits:             73
   Number of public wires:           3
   Number of public wire bits:      47
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     $_ANDNOT_                       1
     $_NAND_                         1
     $_NOT_                         13
     $_OR_                          12
     $_XNOR_                         1
     $_XOR_                         14

=== inc_4 ===

   Number of wires:                  5
   Number of wire bits:             13
   Number of public wires:           3
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $_ANDNOT_                       1
     $_NAND_                         1
     $_NOT_                          1
     $_XNOR_                         1
     $_XOR_                          2

=== llu ===

   Number of wires:                 41
   Number of wire bits:            101
   Number of public wires:           8
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $_ANDNOT_                      17
     $_AND_                         16
     $_MUX_                         16
     $_NOR_                          1
     comp                            1

=== mdu ===

   Number of wires:               8343
   Number of wire bits:          12964
   Number of public wires:          99
   Number of public wire bits:    4720
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               8309
     $_ANDNOT_                    3064
     $_AND_                        329
     $_DFFE_PP0P_                   32
     $_MUX_                        934
     $_NAND_                       150
     $_NOR_                        557
     $_NOT_                        458
     $_ORNOT_                      290
     $_OR_                         741
     $_XNOR_                       424
     $_XOR_                       1330

=== mux2ofnbits_16 ===

   Number of wires:                 21
   Number of wire bits:             66
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $_AND_                         16
     $_MUX_                         16

=== mux2ofnbits_4 ===

   Number of wires:                  9
   Number of wire bits:             18
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $_AND_                          4
     $_MUX_                          4

=== mux2ofnbits_5 ===

   Number of wires:                 10
   Number of wire bits:             22
   Number of public wires:           5
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $_AND_                          5
     $_MUX_                          5

=== mux3of16bits ===

   Number of wires:                 39
   Number of wire bits:             99
   Number of public wires:           7
   Number of public wire bits:      67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_AND_                         16
     $_MUX_                         32

=== mux8of16bits ===

   Number of wires:                129
   Number of wire bits:            264
   Number of public wires:          17
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     $_AND_                         16
     $_MUX_                        112

=== reg ===

   Number of wires:                  5
   Number of wire bits:             35
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_DFFE_PP0P_                   16

=== shu ===

   Number of wires:                755
   Number of wire bits:           1410
   Number of public wires:         139
   Number of public wire bits:     794
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                664
     $_ANDNOT_                     233
     $_AND_                         59
     $_MUX_                         32
     $_NAND_                        15
     $_NOR_                          9
     $_NOT_                          4
     $_ORNOT_                       24
     $_OR_                         288

=== design hierarchy ===

   LGC                               1
     ccu                             1
     dpu                             1
       add_16                        1
       asu                           1
       cmp                           1
       flags                         1
         iff                         8
       imm                           1
       inc_16                        1
       inc_4                         1
       llu                           1
         comp                        1
       mdu                           1
       mux2ofnbits_16                3
       mux2ofnbits_4                 3
       mux2ofnbits_5                 1
       mux3of16bits                  1
       mux8of16bits                  1
       reg                           3
       shu                           1

   Number of wires:              10616
   Number of wire bits:          17311
   Number of public wires:         728
   Number of public wire bits:    7423
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              10326
     $_ANDNOT_                    3590
     $_AND_                        550
     $_DFFE_PP0P_                   88
     $_DFF_PP0_                      2
     $_MUX_                       1287
     $_NAND_                       213
     $_NOR_                        633
     $_NOT_                        496
     $_ORNOT_                      362
     $_OR_                        1211
     $_XNOR_                       472
     $_XOR_                       1422

3.26. Executing CHECK pass (checking for obvious problems).
Checking module LGC...
Checking module add_16...
Checking module asu...
Checking module ccu...
Checking module cmp...
Checking module comp...
Checking module dpu...
Checking module flags...
Checking module iff...
Checking module imm...
Checking module inc_16...
Checking module inc_4...
Checking module llu...
Checking module mdu...
Checking module mux2ofnbits_16...
Checking module mux2ofnbits_4...
Checking module mux2ofnbits_5...
Checking module mux3of16bits...
Checking module mux8of16bits...
Checking module reg...
Checking module shu...
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$103898 ($_MUX_)
    wire \1961.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$103931 ($_MUX_)
    wire \1979.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$103963 ($_MUX_)
    wire \1997.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$103997 ($_MUX_)
    wire \2015.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104023 ($_MUX_)
    wire \2033.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104054 ($_MUX_)
    wire \2051.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104082 ($_MUX_)
    wire \2069.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104107 ($_MUX_)
    wire \2087.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104125 ($_MUX_)
    wire \2105.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104147 ($_MUX_)
    wire \2123.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104167 ($_MUX_)
    wire \2141.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104185 ($_MUX_)
    wire \2159.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104197 ($_MUX_)
    wire \2177.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104213 ($_MUX_)
    wire \2195.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104225 ($_MUX_)
    wire \2213.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104234 ($_MUX_)
    wire \2231.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104235 ($_MUX_)
    wire \2265.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104238 ($_MUX_)
    wire \2283.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104242 ($_MUX_)
    wire \2301.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104248 ($_MUX_)
    wire \2319.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104255 ($_MUX_)
    wire \2337.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104264 ($_MUX_)
    wire \2355.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104274 ($_MUX_)
    wire \2373.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104286 ($_MUX_)
    wire \2391.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104299 ($_MUX_)
    wire \2409.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104314 ($_MUX_)
    wire \2427.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104330 ($_MUX_)
    wire \2445.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104348 ($_MUX_)
    wire \2463.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104367 ($_MUX_)
    wire \2481.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104388 ($_MUX_)
    wire \2499.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104410 ($_MUX_)
    wire \2517.A
Warning: found logic loop in module shu:
    cell $abc$103803$auto$blifparse.cc:386:parse_blif$104434 ($_MUX_)
    wire \2534.A
Found and reported 32 problems.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
<suppressed ~57 debug messages>
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
<suppressed ~11 debug messages>
Optimizing module inc_4.
<suppressed ~2 debug messages>
Optimizing module llu.
Optimizing module mdu.
<suppressed ~642 debug messages>
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.
<suppressed ~92 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

4.6. Executing OPT_SHARE pass.

4.7. Executing OPT_DFF pass (perform DFF optimizations).

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

4.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

4.10. Finished OPT passes. (There is nothing left to do.)

5. Executing Liberty frontend: /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib
Imported 134 cell types from liberty file.

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

6.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\LGC':
Mapping DFF cells in module `\add_16':
Mapping DFF cells in module `\asu':
Mapping DFF cells in module `\ccu':
  mapped 2 $_DFF_PN0_ cells to \DFFR_X1 cells.
Mapping DFF cells in module `\cmp':
Mapping DFF cells in module `\comp':
Mapping DFF cells in module `\dpu':
Mapping DFF cells in module `\flags':
Mapping DFF cells in module `\iff':
  mapped 1 $_DFF_PN0_ cells to \DFFR_X1 cells.
Mapping DFF cells in module `\imm':
Mapping DFF cells in module `\inc_16':
Mapping DFF cells in module `\inc_4':
Mapping DFF cells in module `\llu':
Mapping DFF cells in module `\mdu':
  mapped 32 $_DFF_PN0_ cells to \DFFR_X1 cells.
Mapping DFF cells in module `\mux2ofnbits_16':
Mapping DFF cells in module `\mux2ofnbits_4':
Mapping DFF cells in module `\mux2ofnbits_5':
Mapping DFF cells in module `\mux3of16bits':
Mapping DFF cells in module `\mux8of16bits':
Mapping DFF cells in module `\reg':
  mapped 16 $_DFF_PN0_ cells to \DFFR_X1 cells.
Mapping DFF cells in module `\shu':

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
<suppressed ~93 debug messages>
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
<suppressed ~45 debug messages>
Finding identical cells in module `\shu'.
Removed a total of 47 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

7.6. Executing OPT_DFF pass (perform DFF optimizations).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 0 unused cells and 47 unused wires.
<suppressed ~3 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

7.9. Rerunning OPT passes. (Maybe there is more to do..)

7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

7.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

7.16. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\LGC' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 6 wires to a netlist network with 4 inputs and 2 outputs.

8.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:            INV_X1 cells:        4
ABC RESULTS:          NAND2_X1 cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

8.2. Extracting gate netlist of module `\add_16' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 130 wires to a netlist network with 32 inputs and 16 outputs.

8.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:        2
ABC RESULTS:          NAND4_X1 cells:        3
ABC RESULTS:          NAND3_X1 cells:        1
ABC RESULTS:           NOR3_X1 cells:        1
ABC RESULTS:           XOR2_X1 cells:        3
ABC RESULTS:            OR2_X1 cells:        6
ABC RESULTS:           NOR2_X1 cells:       15
ABC RESULTS:          XNOR2_X1 cells:       13
ABC RESULTS:         OAI211_X1 cells:        3
ABC RESULTS:            INV_X1 cells:       26
ABC RESULTS:          AOI21_X1 cells:       11
ABC RESULTS:          OAI21_X1 cells:       12
ABC RESULTS:          NAND2_X1 cells:       30
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

8.3. Extracting gate netlist of module `\asu' to `<abc-temp-dir>/input.blif'..
Extracted 232 gates and 266 wires to a netlist network with 34 inputs and 16 outputs.

8.3.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.3.2. Re-integrating ABC results.
ABC RESULTS:           AND4_X1 cells:        1
ABC RESULTS:         OAI221_X1 cells:        1
ABC RESULTS:           AND2_X1 cells:        5
ABC RESULTS:            OR2_X1 cells:        1
ABC RESULTS:           NOR2_X1 cells:       36
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:          NAND4_X1 cells:        4
ABC RESULTS:           XOR2_X1 cells:        1
ABC RESULTS:           NOR3_X1 cells:        5
ABC RESULTS:          OAI21_X1 cells:       31
ABC RESULTS:          XNOR2_X1 cells:       15
ABC RESULTS:          NAND3_X1 cells:        6
ABC RESULTS:            INV_X1 cells:       57
ABC RESULTS:          AOI21_X1 cells:       21
ABC RESULTS:         OAI211_X1 cells:        5
ABC RESULTS:          NAND2_X1 cells:       73
ABC RESULTS:          OAI22_X1 cells:       11
ABC RESULTS:        internal signals:      216
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

8.4. Extracting gate netlist of module `\ccu' to `<abc-temp-dir>/input.blif'..
Extracted 330 gates and 348 wires to a netlist network with 18 inputs and 50 outputs.

8.4.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.4.2. Re-integrating ABC results.
ABC RESULTS:           NOR4_X1 cells:        1
ABC RESULTS:         AOI211_X1 cells:        1
ABC RESULTS:          OAI22_X1 cells:        2
ABC RESULTS:           AND3_X1 cells:        3
ABC RESULTS:           AND2_X1 cells:        2
ABC RESULTS:           NOR3_X1 cells:       10
ABC RESULTS:            OR2_X1 cells:        1
ABC RESULTS:          AOI22_X1 cells:        3
ABC RESULTS:          NAND2_X1 cells:       28
ABC RESULTS:          AOI21_X1 cells:       10
ABC RESULTS:          OAI21_X1 cells:       16
ABC RESULTS:          NAND4_X1 cells:        7
ABC RESULTS:          NAND3_X1 cells:       10
ABC RESULTS:           NOR2_X1 cells:       37
ABC RESULTS:         OAI211_X1 cells:        6
ABC RESULTS:            INV_X1 cells:       36
ABC RESULTS:        internal signals:      280
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       50
Removing temp directory.

8.5. Extracting gate netlist of module `\cmp' to `<abc-temp-dir>/input.blif'..
Extracted 79 gates and 111 wires to a netlist network with 32 inputs and 2 outputs.

8.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.14 sec
ABC: Memory =   11.38 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.5.2. Re-integrating ABC results.
ABC RESULTS:           AND4_X1 cells:        2
ABC RESULTS:          XNOR2_X1 cells:        4
ABC RESULTS:          OAI22_X1 cells:        1
ABC RESULTS:           NOR3_X1 cells:        1
ABC RESULTS:           AND2_X1 cells:        5
ABC RESULTS:          AOI22_X1 cells:        5
ABC RESULTS:          OAI21_X1 cells:        2
ABC RESULTS:          NAND2_X1 cells:       16
ABC RESULTS:          NAND4_X1 cells:        6
ABC RESULTS:           NOR2_X1 cells:       13
ABC RESULTS:            INV_X1 cells:       32
ABC RESULTS:          NAND3_X1 cells:        2
ABC RESULTS:         OAI211_X1 cells:        3
ABC RESULTS:          AOI21_X1 cells:        8
ABC RESULTS:        internal signals:       77
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:        2
Removing temp directory.

8.6. Extracting gate netlist of module `\comp' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 48 wires to a netlist network with 17 inputs and 16 outputs.

8.6.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.15 sec
ABC: Memory =   11.38 MB. Time =     0.15 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.6.2. Re-integrating ABC results.
ABC RESULTS:          AOI21_X1 cells:        2
ABC RESULTS:          OAI21_X1 cells:        2
ABC RESULTS:           AND2_X1 cells:        2
ABC RESULTS:           XOR2_X1 cells:        2
ABC RESULTS:           NOR3_X1 cells:        2
ABC RESULTS:           NOR4_X1 cells:        3
ABC RESULTS:           NOR2_X1 cells:        4
ABC RESULTS:          XNOR2_X1 cells:        7
ABC RESULTS:          NAND3_X1 cells:        2
ABC RESULTS:            INV_X1 cells:       15
ABC RESULTS:          NAND4_X1 cells:        6
ABC RESULTS:          NAND2_X1 cells:        4
ABC RESULTS:        internal signals:       15
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       16
Removing temp directory.

8.7. Extracting gate netlist of module `\dpu' to `<abc-temp-dir>/input.blif'..
Extracted 22 gates and 54 wires to a netlist network with 32 inputs and 16 outputs.

8.7.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.7.2. Re-integrating ABC results.
ABC RESULTS:          NAND4_X1 cells:        2
ABC RESULTS:           AND2_X1 cells:        4
ABC RESULTS:          NAND3_X1 cells:       16
ABC RESULTS:          NAND2_X1 cells:       32
ABC RESULTS:        internal signals:        6
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

8.8. Extracting gate netlist of module `\flags' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

8.9. Extracting gate netlist of module `\iff' to `<abc-temp-dir>/input.blif'..
Extracted 4 gates and 10 wires to a netlist network with 6 inputs and 2 outputs.

8.9.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.14 sec
ABC: Memory =   11.38 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.9.2. Re-integrating ABC results.
ABC RESULTS:            INV_X1 cells:        1
ABC RESULTS:         OAI211_X1 cells:        1
ABC RESULTS:          OAI21_X1 cells:        1
ABC RESULTS:          NAND2_X1 cells:        2
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        2
Removing temp directory.

8.10. Extracting gate netlist of module `\imm' to `<abc-temp-dir>/input.blif'..
Extracted 82 gates and 103 wires to a netlist network with 21 inputs and 16 outputs.

8.10.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.12 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.19 sec
ABC: Memory =   11.38 MB. Time =     0.19 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.10.2. Re-integrating ABC results.
ABC RESULTS:          NAND3_X1 cells:        1
ABC RESULTS:           AND2_X1 cells:        1
ABC RESULTS:            INV_X1 cells:        7
ABC RESULTS:         OAI211_X1 cells:        1
ABC RESULTS:          NAND2_X1 cells:       29
ABC RESULTS:           NOR2_X1 cells:        2
ABC RESULTS:          AOI21_X1 cells:       13
ABC RESULTS:          OAI21_X1 cells:       20
ABC RESULTS:        internal signals:       66
ABC RESULTS:           input signals:       21
ABC RESULTS:          output signals:       16
Removing temp directory.

8.11. Extracting gate netlist of module `\inc_16' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 58 wires to a netlist network with 16 inputs and 16 outputs.

8.11.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.17 sec
ABC: Memory =   11.38 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.11.2. Re-integrating ABC results.
ABC RESULTS:          AOI21_X1 cells:        1
ABC RESULTS:           XOR2_X1 cells:        2
ABC RESULTS:          OAI21_X1 cells:        1
ABC RESULTS:           AND2_X1 cells:        1
ABC RESULTS:           NOR3_X1 cells:        1
ABC RESULTS:           NOR4_X1 cells:        2
ABC RESULTS:           NOR2_X1 cells:        7
ABC RESULTS:          XNOR2_X1 cells:        7
ABC RESULTS:          NAND3_X1 cells:        2
ABC RESULTS:            INV_X1 cells:       12
ABC RESULTS:          NAND4_X1 cells:        4
ABC RESULTS:          NAND2_X1 cells:        7
ABC RESULTS:        internal signals:       26
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

8.12. Extracting gate netlist of module `\inc_4' to `<abc-temp-dir>/input.blif'..
Extracted 6 gates and 10 wires to a netlist network with 4 inputs and 4 outputs.

8.12.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.13 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.17 sec
ABC: Memory =   11.38 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.12.2. Re-integrating ABC results.
ABC RESULTS:           XOR2_X1 cells:        1
ABC RESULTS:          NAND3_X1 cells:        2
ABC RESULTS:            INV_X1 cells:        3
ABC RESULTS:          NAND4_X1 cells:        1
ABC RESULTS:          NAND2_X1 cells:        5
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

8.13. Extracting gate netlist of module `\llu' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 101 wires to a netlist network with 51 inputs and 17 outputs.

8.13.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.17 sec
ABC: Memory =   11.38 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.13.2. Re-integrating ABC results.
ABC RESULTS:            INV_X1 cells:        1
ABC RESULTS:           NOR2_X1 cells:        1
ABC RESULTS:          NAND3_X1 cells:       16
ABC RESULTS:          OAI21_X1 cells:       32
ABC RESULTS:        internal signals:       33
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       17
Removing temp directory.

8.14. Extracting gate netlist of module `\mdu' to `<abc-temp-dir>/input.blif'..
Extracted 8310 gates and 8380 wires to a netlist network with 70 inputs and 34 outputs.

8.14.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.17 sec
ABC: Memory =   11.38 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.14.2. Re-integrating ABC results.
ABC RESULTS:         OAI221_X1 cells:        3
ABC RESULTS:           AND4_X1 cells:       22
ABC RESULTS:          AOI22_X1 cells:       11
ABC RESULTS:           AND3_X1 cells:       23
ABC RESULTS:          NAND4_X1 cells:       93
ABC RESULTS:            OR4_X1 cells:        1
ABC RESULTS:           NOR4_X1 cells:        1
ABC RESULTS:            OR3_X1 cells:        6
ABC RESULTS:           NOR3_X1 cells:       34
ABC RESULTS:          NAND3_X1 cells:      446
ABC RESULTS:           XOR2_X1 cells:      337
ABC RESULTS:          XNOR2_X1 cells:      111
ABC RESULTS:         AOI211_X1 cells:       11
ABC RESULTS:           AND2_X1 cells:       76
ABC RESULTS:           NOR2_X1 cells:      320
ABC RESULTS:          OAI22_X1 cells:       13
ABC RESULTS:            INV_X1 cells:      332
ABC RESULTS:            OR2_X1 cells:       31
ABC RESULTS:          NAND2_X1 cells:     1018
ABC RESULTS:          AOI21_X1 cells:      334
ABC RESULTS:         OAI211_X1 cells:      174
ABC RESULTS:          OAI21_X1 cells:      356
ABC RESULTS:        internal signals:     8276
ABC RESULTS:           input signals:       70
ABC RESULTS:          output signals:       34
Removing temp directory.

8.15. Extracting gate netlist of module `\mux2ofnbits_16' to `<abc-temp-dir>/input.blif'..
Extracted 32 gates and 66 wires to a netlist network with 34 inputs and 16 outputs.

8.15.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.13 sec
ABC: Memory =   11.38 MB. Time =     0.13 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.15.2. Re-integrating ABC results.
ABC RESULTS:          NAND2_X1 cells:       32
ABC RESULTS:          OAI21_X1 cells:       16
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       16
Removing temp directory.

8.16. Extracting gate netlist of module `\mux2ofnbits_4' to `<abc-temp-dir>/input.blif'..
Extracted 8 gates and 18 wires to a netlist network with 10 inputs and 4 outputs.

8.16.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.16.2. Re-integrating ABC results.
ABC RESULTS:          NAND2_X1 cells:        8
ABC RESULTS:          OAI21_X1 cells:        4
ABC RESULTS:        internal signals:        4
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        4
Removing temp directory.

8.17. Extracting gate netlist of module `\mux2ofnbits_5' to `<abc-temp-dir>/input.blif'..
Extracted 10 gates and 22 wires to a netlist network with 12 inputs and 5 outputs.

8.17.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.14 sec
ABC: Memory =   11.38 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.17.2. Re-integrating ABC results.
ABC RESULTS:          NAND2_X1 cells:       10
ABC RESULTS:          OAI21_X1 cells:        5
ABC RESULTS:        internal signals:        5
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:        5
Removing temp directory.

8.18. Extracting gate netlist of module `\mux3of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 48 gates and 99 wires to a netlist network with 51 inputs and 16 outputs.

8.18.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.18.2. Re-integrating ABC results.
ABC RESULTS:            INV_X1 cells:       17
ABC RESULTS:          NAND3_X1 cells:       16
ABC RESULTS:          AOI21_X1 cells:       16
ABC RESULTS:          AOI22_X1 cells:       16
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:       51
ABC RESULTS:          output signals:       16
Removing temp directory.

8.19. Extracting gate netlist of module `\mux8of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 128 gates and 264 wires to a netlist network with 136 inputs and 16 outputs.

8.19.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.19.2. Re-integrating ABC results.
ABC RESULTS:          NAND2_X1 cells:       48
ABC RESULTS:         OAI211_X1 cells:       16
ABC RESULTS:           AND2_X1 cells:       16
ABC RESULTS:           NOR2_X1 cells:       16
ABC RESULTS:            INV_X1 cells:       37
ABC RESULTS:          AOI21_X1 cells:       64
ABC RESULTS:          OAI21_X1 cells:       48
ABC RESULTS:        internal signals:      112
ABC RESULTS:           input signals:      136
ABC RESULTS:          output signals:       16
Removing temp directory.

8.20. Extracting gate netlist of module `\reg' to `<abc-temp-dir>/input.blif'..
Extracted 17 gates and 51 wires to a netlist network with 34 inputs and 17 outputs.

8.20.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.12 sec
ABC: Memory =   11.38 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.20.2. Re-integrating ABC results.
ABC RESULTS:            INV_X1 cells:       17
ABC RESULTS:          NAND2_X1 cells:       16
ABC RESULTS:          OAI21_X1 cells:       16
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       17
Removing temp directory.

8.21. Extracting gate netlist of module `\shu' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$109940: \1961.A -> $abc$103803$new_n709
                                                \1961.A -> \1961.A
Breaking loop using new signal $abcloop$109941: \1979.A -> $abc$103803$new_n717
                                                \1979.A -> \1979.A
Breaking loop using new signal $abcloop$109942: \1997.A -> $abc$103803$new_n721
                                                \1997.A -> \1997.A
Breaking loop using new signal $abcloop$109943: \2015.A -> $abc$103803$new_n725
                                                \2015.A -> \2015.A
Breaking loop using new signal $abcloop$109944: \2033.A -> $abc$103803$new_n729
                                                \2033.A -> \2033.A
Breaking loop using new signal $abcloop$109945: \2051.A -> $abc$103803$new_n733
                                                \2051.A -> \2051.A
Breaking loop using new signal $abcloop$109946: \2069.A -> $abc$103803$new_n737
                                                \2069.A -> \2069.A
Breaking loop using new signal $abcloop$109947: \2087.A -> $abc$103803$new_n741
                                                \2087.A -> \2087.A
Breaking loop using new signal $abcloop$109948: \2105.A -> $abc$103803$new_n745
                                                \2105.A -> \2105.A
Breaking loop using new signal $abcloop$109949: \2123.A -> $abc$103803$new_n749
                                                \2123.A -> \2123.A
Breaking loop using new signal $abcloop$109950: \2141.A -> $abc$103803$new_n753
                                                \2141.A -> \2141.A
Breaking loop using new signal $abcloop$109951: \2159.A -> $abc$103803$new_n757
                                                \2159.A -> \2159.A
Breaking loop using new signal $abcloop$109952: \2177.A -> $abc$103803$new_n761
                                                \2177.A -> \2177.A
Breaking loop using new signal $abcloop$109953: \2195.A -> $abc$103803$new_n765
                                                \2195.A -> \2195.A
Breaking loop using new signal $abcloop$109954: \2213.A -> $abc$103803$new_n769
                                                \2213.A -> \2213.A
Breaking loop using new signal $abcloop$109955: \2231.A -> $abc$103803$new_n773
                                                \2231.A -> \2231.A
Breaking loop using new signal $abcloop$109956: \2265.A -> $abc$103803$new_n713
                                                \2265.A -> \2265.A
Breaking loop using new signal $abcloop$109957: \2283.A -> $abc$103803$new_n718
                                                \2283.A -> \2283.A
Breaking loop using new signal $abcloop$109958: \2301.A -> $abc$103803$new_n722
                                                \2301.A -> \2301.A
Breaking loop using new signal $abcloop$109959: \2319.A -> $abc$103803$new_n726
                                                \2319.A -> \2319.A
Breaking loop using new signal $abcloop$109960: \2337.A -> $abc$103803$new_n730
                                                \2337.A -> \2337.A
Breaking loop using new signal $abcloop$109961: \2355.A -> $abc$103803$new_n734
                                                \2355.A -> \2355.A
Breaking loop using new signal $abcloop$109962: \2373.A -> $abc$103803$new_n738
                                                \2373.A -> \2373.A
Breaking loop using new signal $abcloop$109963: \2391.A -> $abc$103803$new_n742
                                                \2391.A -> \2391.A
Breaking loop using new signal $abcloop$109964: \2409.A -> $abc$103803$new_n746
                                                \2409.A -> \2409.A
Breaking loop using new signal $abcloop$109965: \2427.A -> $abc$103803$new_n750
                                                \2427.A -> \2427.A
Breaking loop using new signal $abcloop$109966: \2445.A -> $abc$103803$new_n754
                                                \2445.A -> \2445.A
Breaking loop using new signal $abcloop$109967: \2463.A -> $abc$103803$new_n758
                                                \2463.A -> \2463.A
Breaking loop using new signal $abcloop$109968: \2481.A -> $abc$103803$new_n762
                                                \2481.A -> \2481.A
Breaking loop using new signal $abcloop$109969: \2499.A -> $abc$103803$new_n766
                                                \2499.A -> \2499.A
Breaking loop using new signal $abcloop$109970: \2517.A -> $abc$103803$new_n770
                                                \2517.A -> \2517.A
Breaking loop using new signal $abcloop$109971: \2534.A -> $abc$103803$new_n774
                                                \2534.A -> \2534.A
Extracted 664 gates and 719 wires to a netlist network with 55 inputs and 48 outputs.

8.21.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X16" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "NangateOpenCellLibrary" from "/Users/ebinouri/Documents/UNi/NBGen/pypi_package/test/sayac/tech/NangateOpenCellLibrary_typical.lib" has 90 cells (35 skipped: 21 seq; 6 tri-state; 8 no func; 9 dont_use).  Time =     0.14 sec
ABC: Memory =   11.38 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.21.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:        4
ABC RESULTS:         OAI211_X1 cells:        5
ABC RESULTS:          AOI21_X1 cells:        8
ABC RESULTS:           NOR3_X1 cells:        3
ABC RESULTS:          AOI22_X1 cells:       16
ABC RESULTS:          OAI21_X1 cells:       19
ABC RESULTS:           AND3_X1 cells:       11
ABC RESULTS:           NOR2_X1 cells:       35
ABC RESULTS:           AND4_X1 cells:       23
ABC RESULTS:          NAND4_X1 cells:       44
ABC RESULTS:            OR2_X1 cells:        1
ABC RESULTS:          NAND2_X1 cells:       26
ABC RESULTS:          NAND3_X1 cells:      114
ABC RESULTS:            INV_X1 cells:       59
ABC RESULTS:          OAI22_X1 cells:       33
ABC RESULTS:        internal signals:      616
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       48
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 0 unused cells and 10865 unused wires.
<suppressed ~21 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing SPLITNETS pass (splitting up multi-bit signals).

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /usr/local/Cellar/yosys/0.36/share/yosys/techmap.v
Parsing Verilog input from `/usr/local/Cellar/yosys/0.36/share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

12. Executing ABC pass (technology mapping using ABC).

12.1. Extracting gate netlist of module `\LGC' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.2. Extracting gate netlist of module `\add_16' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.3. Extracting gate netlist of module `\asu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.4. Extracting gate netlist of module `\ccu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.5. Extracting gate netlist of module `\cmp' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.6. Extracting gate netlist of module `\comp' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.7. Extracting gate netlist of module `\dpu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.8. Extracting gate netlist of module `\flags' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.9. Extracting gate netlist of module `\iff' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.10. Extracting gate netlist of module `\imm' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.11. Extracting gate netlist of module `\inc_16' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.12. Extracting gate netlist of module `\inc_4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.13. Extracting gate netlist of module `\llu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.14. Extracting gate netlist of module `\mdu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.15. Extracting gate netlist of module `\mux2ofnbits_16' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.16. Extracting gate netlist of module `\mux2ofnbits_4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.17. Extracting gate netlist of module `\mux2ofnbits_5' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.18. Extracting gate netlist of module `\mux3of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.19. Extracting gate netlist of module `\mux8of16bits' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.20. Extracting gate netlist of module `\reg' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12.21. Extracting gate netlist of module `\shu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

13. Executing OPT pass (performing simple optimizations).

13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

13.6. Executing OPT_DFF pass (perform DFF optimizations).

13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

13.9. Finished OPT passes. (There is nothing left to do.)
Removed 0 unused cells and 5585 unused wires.

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

15. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map output port LGC.addrBus: Missing option -outpad.
Mapping port LGC.clk using BUF_X1.
Mapping port LGC.dataBusIn using BUF_X1.
Don't map output port LGC.dataBusOut: Missing option -outpad.
Don't map output port LGC.inDataTRF: Missing option -outpad.
Don't map output port LGC.outMuxrd: Missing option -outpad.
Don't map output port LGC.outMuxrs1: Missing option -outpad.
Don't map output port LGC.outMuxrs2: Missing option -outpad.
Mapping port LGC.p1TRF using BUF_X1.
Mapping port LGC.p2TRF using BUF_X1.
Don't map output port LGC.readInst: Missing option -outpad.
Don't map output port LGC.readMM: Missing option -outpad.
Mapping port LGC.readyMEM using BUF_X1.
Mapping port LGC.rst using BUF_X1.
Don't map output port LGC.writeMM: Missing option -outpad.
Don't map output port LGC.writeTRF: Missing option -outpad.
Mapping port add_16.in1 using BUF_X1.
Mapping port add_16.in2 using BUF_X1.
Don't map output port add_16.outadd: Missing option -outpad.
Mapping port asu.arithadd using BUF_X1.
Mapping port asu.arithsub using BUF_X1.
Mapping port asu.in1 using BUF_X1.
Mapping port asu.in2 using BUF_X1.
Don't map output port asu.outasu: Missing option -outpad.
Don't map output port ccu.arithadd: Missing option -outpad.
Don't map output port ccu.arithdiv: Missing option -outpad.
Don't map output port ccu.arithmul: Missing option -outpad.
Don't map output port ccu.arithsh: Missing option -outpad.
Don't map output port ccu.arithsub: Missing option -outpad.
Mapping port ccu.clk using BUF_X1.
Don't map output port ccu.drivedatabus: Missing option -outpad.
Don't map output port ccu.enflag: Missing option -outpad.
Mapping port ccu.fib using BUF_X1.
Don't map output port ccu.ldadr: Missing option -outpad.
Don't map output port ccu.ldir: Missing option -outpad.
Don't map output port ccu.ldmdu1: Missing option -outpad.
Don't map output port ccu.ldmdu2: Missing option -outpad.
Don't map output port ccu.ldpc: Missing option -outpad.
Don't map output port ccu.logicand: Missing option -outpad.
Don't map output port ccu.logicsh: Missing option -outpad.
Don't map output port ccu.onescomp: Missing option -outpad.
Mapping port ccu.opcode using BUF_X1.
Mapping port ccu.outflag using BUF_X1.
Don't map output port ccu.p1lowbits: Missing option -outpad.
Don't map output port ccu.readio: Missing option -outpad.
Don't map output port ccu.readmem: Missing option -outpad.
Mapping port ccu.readymdu using BUF_X1.
Mapping port ccu.readymem using BUF_X1.
Mapping port ccu.rst using BUF_X1.
Don't map output port ccu.se5bits: Missing option -outpad.
Don't map output port ccu.se6bits: Missing option -outpad.
Don't map output port ccu.se8bits: Missing option -outpad.
Don't map output port ccu.seladr_mem: Missing option -outpad.
Don't map output port ccu.selasu_trf: Missing option -outpad.
Don't map output port ccu.seldatabus_trf: Missing option -outpad.
Don't map output port ccu.selflag: Missing option -outpad.
Don't map output port ccu.selimm_asu: Missing option -outpad.
Don't map output port ccu.selimm_pcp: Missing option -outpad.
Don't map output port ccu.selimm_trf: Missing option -outpad.
Don't map output port ccu.selllu_trf: Missing option -outpad.
Don't map output port ccu.selmdu1_trf: Missing option -outpad.
Don't map output port ccu.selmdu2_trf: Missing option -outpad.
Don't map output port ccu.selp1_pc: Missing option -outpad.
Don't map output port ccu.selp1_pcp: Missing option -outpad.
Don't map output port ccu.selp2_asu: Missing option -outpad.
Don't map output port ccu.selp2_shu: Missing option -outpad.
Don't map output port ccu.selpc1_pc: Missing option -outpad.
Don't map output port ccu.selpc1_trf: Missing option -outpad.
Don't map output port ccu.selpc_mem: Missing option -outpad.
Don't map output port ccu.selpcadd_pc: Missing option -outpad.
Don't map output port ccu.selrd0_trf: Missing option -outpad.
Don't map output port ccu.selrd1_trf: Missing option -outpad.
Don't map output port ccu.selrd_1_trf: Missing option -outpad.
Don't map output port ccu.selrd_2_trf: Missing option -outpad.
Don't map output port ccu.selrs1_trf: Missing option -outpad.
Don't map output port ccu.selrs2_trf: Missing option -outpad.
Don't map output port ccu.selshim_shu: Missing option -outpad.
Don't map output port ccu.selshu_trf: Missing option -outpad.
Don't map output port ccu.setflags: Missing option -outpad.
Don't map output port ccu.startmdu: Missing option -outpad.
Don't map output port ccu.twoscomp: Missing option -outpad.
Don't map output port ccu.use8bits: Missing option -outpad.
Don't map output port ccu.writeio: Missing option -outpad.
Don't map output port ccu.writemem: Missing option -outpad.
Don't map output port ccu.writetrf: Missing option -outpad.
Don't map output port cmp.eq: Missing option -outpad.
Don't map output port cmp.gt: Missing option -outpad.
Mapping port cmp.in1 using BUF_X1.
Mapping port cmp.in2 using BUF_X1.
Mapping port comp.incomp using BUF_X1.
Mapping port comp.onebartwo using BUF_X1.
Don't map output port comp.outcomp: Missing option -outpad.
Don't map output port dpu.addrbus: Missing option -outpad.
Mapping port dpu.arithadd using BUF_X1.
Mapping port dpu.arithdiv using BUF_X1.
Mapping port dpu.arithmul using BUF_X1.
Mapping port dpu.arithsh using BUF_X1.
Mapping port dpu.arithsub using BUF_X1.
Mapping port dpu.clk using BUF_X1.
Mapping port dpu.databusin using BUF_X1.
Don't map output port dpu.databusout: Missing option -outpad.
Mapping port dpu.drivedatabus using BUF_X1.
Mapping port dpu.enflag using BUF_X1.
Don't map output port dpu.fib: Missing option -outpad.
Don't map output port dpu.indatatrf: Missing option -outpad.
Mapping port dpu.ldadr using BUF_X1.
Mapping port dpu.ldir using BUF_X1.
Mapping port dpu.ldmdu1 using BUF_X1.
Mapping port dpu.ldmdu2 using BUF_X1.
Mapping port dpu.ldpc using BUF_X1.
Mapping port dpu.logicand using BUF_X1.
Mapping port dpu.logicsh using BUF_X1.
Mapping port dpu.onescomp using BUF_X1.
Don't map output port dpu.opcode: Missing option -outpad.
Don't map output port dpu.outflag: Missing option -outpad.
Don't map output port dpu.outmuxrd: Missing option -outpad.
Don't map output port dpu.outmuxrs1: Missing option -outpad.
Don't map output port dpu.outmuxrs2: Missing option -outpad.
Mapping port dpu.p1lowbits using BUF_X1.
Mapping port dpu.p1trf using BUF_X1.
Mapping port dpu.p2trf using BUF_X1.
Don't map output port dpu.readymdu: Missing option -outpad.
Mapping port dpu.rst using BUF_X1.
Mapping port dpu.se5bits using BUF_X1.
Mapping port dpu.se6bits using BUF_X1.
Mapping port dpu.se8bits using BUF_X1.
Mapping port dpu.seladr_mem using BUF_X1.
Mapping port dpu.selasu_trf using BUF_X1.
Mapping port dpu.seldatabus_trf using BUF_X1.
Mapping port dpu.selflag using BUF_X1.
Mapping port dpu.selimm_asu using BUF_X1.
Mapping port dpu.selimm_pcp using BUF_X1.
Mapping port dpu.selimm_trf using BUF_X1.
Mapping port dpu.selllu_trf using BUF_X1.
Mapping port dpu.selmdu1_trf using BUF_X1.
Mapping port dpu.selmdu2_trf using BUF_X1.
Mapping port dpu.selp1_pc using BUF_X1.
Mapping port dpu.selp1_pcp using BUF_X1.
Mapping port dpu.selp2_asu using BUF_X1.
Mapping port dpu.selp2_shu using BUF_X1.
Mapping port dpu.selpc1_pc using BUF_X1.
Mapping port dpu.selpc1_trf using BUF_X1.
Mapping port dpu.selpc_mem using BUF_X1.
Mapping port dpu.selpcadd_pc using BUF_X1.
Mapping port dpu.selrd0_trf using BUF_X1.
Mapping port dpu.selrd1_trf using BUF_X1.
Mapping port dpu.selrd_1_trf using BUF_X1.
Mapping port dpu.selrd_2_trf using BUF_X1.
Mapping port dpu.selrs1_trf using BUF_X1.
Mapping port dpu.selrs2_trf using BUF_X1.
Mapping port dpu.selshim_shu using BUF_X1.
Mapping port dpu.selshu_trf using BUF_X1.
Mapping port dpu.setflags using BUF_X1.
Mapping port dpu.startmdu using BUF_X1.
Mapping port dpu.twoscomp using BUF_X1.
Mapping port dpu.use8bits using BUF_X1.
Mapping port flags.clk using BUF_X1.
Mapping port flags.enflag using BUF_X1.
Mapping port flags.inflag using BUF_X1.
Don't map output port flags.outflag: Missing option -outpad.
Mapping port flags.rst using BUF_X1.
Mapping port flags.selflag using BUF_X1.
Mapping port flags.setflags using BUF_X1.
Mapping port iff.clk using BUF_X1.
Mapping port iff.enflag using BUF_X1.
Mapping port iff.inflag using BUF_X1.
Don't map output port iff.outflag: Missing option -outpad.
Mapping port iff.rst using BUF_X1.
Mapping port iff.selflag using BUF_X1.
Mapping port iff.setflags using BUF_X1.
Mapping port imm.in1 using BUF_X1.
Mapping port imm.in2 using BUF_X1.
Don't map output port imm.outimm: Missing option -outpad.
Mapping port imm.p1lowbits using BUF_X1.
Mapping port imm.se5bits using BUF_X1.
Mapping port imm.se6bits using BUF_X1.
Mapping port imm.se8bits using BUF_X1.
Mapping port imm.use8bits using BUF_X1.
Mapping port inc_16.ininc using BUF_X1.
Don't map output port inc_16.outinc: Missing option -outpad.
Mapping port inc_4.ininc using BUF_X1.
Don't map output port inc_4.outinc: Missing option -outpad.
Mapping port llu.in1 using BUF_X1.
Mapping port llu.in2 using BUF_X1.
Mapping port llu.logicand using BUF_X1.
Mapping port llu.onescomp using BUF_X1.
Don't map output port llu.outllu: Missing option -outpad.
Mapping port llu.twoscomp using BUF_X1.
Mapping port mdu.arithdiv using BUF_X1.
Mapping port mdu.arithmul using BUF_X1.
Mapping port mdu.clk using BUF_X1.
Mapping port mdu.in1 using BUF_X1.
Mapping port mdu.in2 using BUF_X1.
Mapping port mdu.ldmdu1 using BUF_X1.
Mapping port mdu.ldmdu2 using BUF_X1.
Don't map output port mdu.outmdu1: Missing option -outpad.
Don't map output port mdu.outmdu2: Missing option -outpad.
Don't map output port mdu.readymdu: Missing option -outpad.
Mapping port mdu.rst using BUF_X1.
Mapping port mdu.startmdu using BUF_X1.
Mapping port mux2ofnbits_16.in1 using BUF_X1.
Mapping port mux2ofnbits_16.in2 using BUF_X1.
Don't map output port mux2ofnbits_16.outmux: Missing option -outpad.
Mapping port mux2ofnbits_16.sel1 using BUF_X1.
Mapping port mux2ofnbits_16.sel2 using BUF_X1.
Mapping port mux2ofnbits_4.in1 using BUF_X1.
Mapping port mux2ofnbits_4.in2 using BUF_X1.
Don't map output port mux2ofnbits_4.outmux: Missing option -outpad.
Mapping port mux2ofnbits_4.sel1 using BUF_X1.
Mapping port mux2ofnbits_4.sel2 using BUF_X1.
Mapping port mux2ofnbits_5.in1 using BUF_X1.
Mapping port mux2ofnbits_5.in2 using BUF_X1.
Don't map output port mux2ofnbits_5.outmux: Missing option -outpad.
Mapping port mux2ofnbits_5.sel1 using BUF_X1.
Mapping port mux2ofnbits_5.sel2 using BUF_X1.
Mapping port mux3of16bits.in1 using BUF_X1.
Mapping port mux3of16bits.in2 using BUF_X1.
Mapping port mux3of16bits.in3 using BUF_X1.
Don't map output port mux3of16bits.outmux: Missing option -outpad.
Mapping port mux3of16bits.sel1 using BUF_X1.
Mapping port mux3of16bits.sel2 using BUF_X1.
Mapping port mux3of16bits.sel3 using BUF_X1.
Mapping port mux8of16bits.in1 using BUF_X1.
Mapping port mux8of16bits.in2 using BUF_X1.
Mapping port mux8of16bits.in3 using BUF_X1.
Mapping port mux8of16bits.in4 using BUF_X1.
Mapping port mux8of16bits.in5 using BUF_X1.
Mapping port mux8of16bits.in6 using BUF_X1.
Mapping port mux8of16bits.in7 using BUF_X1.
Mapping port mux8of16bits.in8 using BUF_X1.
Don't map output port mux8of16bits.outmux: Missing option -outpad.
Mapping port mux8of16bits.sel1 using BUF_X1.
Mapping port mux8of16bits.sel2 using BUF_X1.
Mapping port mux8of16bits.sel3 using BUF_X1.
Mapping port mux8of16bits.sel4 using BUF_X1.
Mapping port mux8of16bits.sel5 using BUF_X1.
Mapping port mux8of16bits.sel6 using BUF_X1.
Mapping port mux8of16bits.sel7 using BUF_X1.
Mapping port mux8of16bits.sel8 using BUF_X1.
Mapping port reg.clk using BUF_X1.
Mapping port reg.inreg using BUF_X1.
Mapping port reg.ld using BUF_X1.
Don't map output port reg.outreg: Missing option -outpad.
Mapping port reg.rst using BUF_X1.
Mapping port shu.arithsh using BUF_X1.
Mapping port shu.in1 using BUF_X1.
Mapping port shu.in2 using BUF_X1.
Mapping port shu.logicsh using BUF_X1.
Don't map output port shu.outshu: Missing option -outpad.

16. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Marking already mapped port: BUF_X1.Z[0].
Marking already mapped port: dpu.databusout[8].
Marking already mapped port: dpu.databusout[9].
Marking already mapped port: dpu.databusout[10].
Marking already mapped port: dpu.databusout[11].
Marking already mapped port: dpu.databusout[12].
Marking already mapped port: dpu.databusout[13].
Marking already mapped port: dpu.databusout[14].
Marking already mapped port: dpu.databusout[15].
Marking already mapped port: LGC.dataBusOut[8].
Marking already mapped port: LGC.dataBusOut[9].
Marking already mapped port: LGC.dataBusOut[10].
Marking already mapped port: LGC.dataBusOut[11].
Marking already mapped port: LGC.dataBusOut[12].
Marking already mapped port: LGC.dataBusOut[13].
Marking already mapped port: LGC.dataBusOut[14].
Marking already mapped port: LGC.dataBusOut[15].
Don't map input port LGC.clk: Missing option -inpad.
Don't map input port LGC.dataBusIn: Missing option -inpad.
Don't map input port LGC.p1TRF: Missing option -inpad.
Don't map input port LGC.p2TRF: Missing option -inpad.
Don't map input port LGC.readyMEM: Missing option -inpad.
Don't map input port LGC.rst: Missing option -inpad.
Mapping port LGC.addrBus using BUF_X1.
Mapping port LGC.dataBusOut using BUF_X1.
Mapping port LGC.inDataTRF using BUF_X1.
Mapping port LGC.outMuxrd using BUF_X1.
Mapping port LGC.outMuxrs1 using BUF_X1.
Mapping port LGC.outMuxrs2 using BUF_X1.
Mapping port LGC.readInst using BUF_X1.
Mapping port LGC.readMM using BUF_X1.
Mapping port LGC.writeMM using BUF_X1.
Mapping port LGC.writeTRF using BUF_X1.
Don't map input port add_16.in1: Missing option -inpad.
Don't map input port add_16.in2: Missing option -inpad.
Mapping port add_16.outadd using BUF_X1.
Don't map input port asu.arithadd: Missing option -inpad.
Don't map input port asu.arithsub: Missing option -inpad.
Don't map input port asu.in1: Missing option -inpad.
Don't map input port asu.in2: Missing option -inpad.
Mapping port asu.outasu using BUF_X1.
Don't map input port ccu.clk: Missing option -inpad.
Don't map input port ccu.fib: Missing option -inpad.
Don't map input port ccu.opcode: Missing option -inpad.
Don't map input port ccu.outflag: Missing option -inpad.
Don't map input port ccu.readymdu: Missing option -inpad.
Don't map input port ccu.readymem: Missing option -inpad.
Don't map input port ccu.rst: Missing option -inpad.
Mapping port ccu.arithadd using BUF_X1.
Mapping port ccu.arithdiv using BUF_X1.
Mapping port ccu.arithmul using BUF_X1.
Mapping port ccu.arithsh using BUF_X1.
Mapping port ccu.arithsub using BUF_X1.
Mapping port ccu.drivedatabus using BUF_X1.
Mapping port ccu.enflag using BUF_X1.
Mapping port ccu.ldadr using BUF_X1.
Mapping port ccu.ldir using BUF_X1.
Mapping port ccu.ldmdu1 using BUF_X1.
Mapping port ccu.ldmdu2 using BUF_X1.
Mapping port ccu.ldpc using BUF_X1.
Mapping port ccu.logicand using BUF_X1.
Mapping port ccu.logicsh using BUF_X1.
Mapping port ccu.onescomp using BUF_X1.
Mapping port ccu.p1lowbits using BUF_X1.
Mapping port ccu.readio using BUF_X1.
Mapping port ccu.readmem using BUF_X1.
Mapping port ccu.se5bits using BUF_X1.
Mapping port ccu.se6bits using BUF_X1.
Mapping port ccu.se8bits using BUF_X1.
Mapping port ccu.seladr_mem using BUF_X1.
Mapping port ccu.selasu_trf using BUF_X1.
Mapping port ccu.seldatabus_trf using BUF_X1.
Mapping port ccu.selflag using BUF_X1.
Mapping port ccu.selimm_asu using BUF_X1.
Mapping port ccu.selimm_pcp using BUF_X1.
Mapping port ccu.selimm_trf using BUF_X1.
Mapping port ccu.selllu_trf using BUF_X1.
Mapping port ccu.selmdu1_trf using BUF_X1.
Mapping port ccu.selmdu2_trf using BUF_X1.
Mapping port ccu.selp1_pc using BUF_X1.
Mapping port ccu.selp1_pcp using BUF_X1.
Mapping port ccu.selp2_asu using BUF_X1.
Mapping port ccu.selp2_shu using BUF_X1.
Mapping port ccu.selpc1_pc using BUF_X1.
Mapping port ccu.selpc1_trf using BUF_X1.
Mapping port ccu.selpc_mem using BUF_X1.
Mapping port ccu.selpcadd_pc using BUF_X1.
Mapping port ccu.selrd0_trf using BUF_X1.
Mapping port ccu.selrd1_trf using BUF_X1.
Mapping port ccu.selrd_1_trf using BUF_X1.
Mapping port ccu.selrd_2_trf using BUF_X1.
Mapping port ccu.selrs1_trf using BUF_X1.
Mapping port ccu.selrs2_trf using BUF_X1.
Mapping port ccu.selshim_shu using BUF_X1.
Mapping port ccu.selshu_trf using BUF_X1.
Mapping port ccu.setflags using BUF_X1.
Mapping port ccu.startmdu using BUF_X1.
Mapping port ccu.twoscomp using BUF_X1.
Mapping port ccu.use8bits using BUF_X1.
Mapping port ccu.writeio using BUF_X1.
Mapping port ccu.writemem using BUF_X1.
Mapping port ccu.writetrf using BUF_X1.
Don't map input port cmp.in1: Missing option -inpad.
Don't map input port cmp.in2: Missing option -inpad.
Mapping port cmp.eq using BUF_X1.
Mapping port cmp.gt using BUF_X1.
Don't map input port comp.incomp: Missing option -inpad.
Don't map input port comp.onebartwo: Missing option -inpad.
Mapping port comp.outcomp using BUF_X1.
Don't map input port dpu.arithadd: Missing option -inpad.
Don't map input port dpu.arithdiv: Missing option -inpad.
Don't map input port dpu.arithmul: Missing option -inpad.
Don't map input port dpu.arithsh: Missing option -inpad.
Don't map input port dpu.arithsub: Missing option -inpad.
Don't map input port dpu.clk: Missing option -inpad.
Don't map input port dpu.databusin: Missing option -inpad.
Don't map input port dpu.drivedatabus: Missing option -inpad.
Don't map input port dpu.enflag: Missing option -inpad.
Don't map input port dpu.ldadr: Missing option -inpad.
Don't map input port dpu.ldir: Missing option -inpad.
Don't map input port dpu.ldmdu1: Missing option -inpad.
Don't map input port dpu.ldmdu2: Missing option -inpad.
Don't map input port dpu.ldpc: Missing option -inpad.
Don't map input port dpu.logicand: Missing option -inpad.
Don't map input port dpu.logicsh: Missing option -inpad.
Don't map input port dpu.onescomp: Missing option -inpad.
Don't map input port dpu.p1lowbits: Missing option -inpad.
Don't map input port dpu.p1trf: Missing option -inpad.
Don't map input port dpu.p2trf: Missing option -inpad.
Don't map input port dpu.rst: Missing option -inpad.
Don't map input port dpu.se5bits: Missing option -inpad.
Don't map input port dpu.se6bits: Missing option -inpad.
Don't map input port dpu.se8bits: Missing option -inpad.
Don't map input port dpu.seladr_mem: Missing option -inpad.
Don't map input port dpu.selasu_trf: Missing option -inpad.
Don't map input port dpu.seldatabus_trf: Missing option -inpad.
Don't map input port dpu.selflag: Missing option -inpad.
Don't map input port dpu.selimm_asu: Missing option -inpad.
Don't map input port dpu.selimm_pcp: Missing option -inpad.
Don't map input port dpu.selimm_trf: Missing option -inpad.
Don't map input port dpu.selllu_trf: Missing option -inpad.
Don't map input port dpu.selmdu1_trf: Missing option -inpad.
Don't map input port dpu.selmdu2_trf: Missing option -inpad.
Don't map input port dpu.selp1_pc: Missing option -inpad.
Don't map input port dpu.selp1_pcp: Missing option -inpad.
Don't map input port dpu.selp2_asu: Missing option -inpad.
Don't map input port dpu.selp2_shu: Missing option -inpad.
Don't map input port dpu.selpc1_pc: Missing option -inpad.
Don't map input port dpu.selpc1_trf: Missing option -inpad.
Don't map input port dpu.selpc_mem: Missing option -inpad.
Don't map input port dpu.selpcadd_pc: Missing option -inpad.
Don't map input port dpu.selrd0_trf: Missing option -inpad.
Don't map input port dpu.selrd1_trf: Missing option -inpad.
Don't map input port dpu.selrd_1_trf: Missing option -inpad.
Don't map input port dpu.selrd_2_trf: Missing option -inpad.
Don't map input port dpu.selrs1_trf: Missing option -inpad.
Don't map input port dpu.selrs2_trf: Missing option -inpad.
Don't map input port dpu.selshim_shu: Missing option -inpad.
Don't map input port dpu.selshu_trf: Missing option -inpad.
Don't map input port dpu.setflags: Missing option -inpad.
Don't map input port dpu.startmdu: Missing option -inpad.
Don't map input port dpu.twoscomp: Missing option -inpad.
Don't map input port dpu.use8bits: Missing option -inpad.
Mapping port dpu.addrbus using BUF_X1.
Mapping port dpu.databusout using BUF_X1.
Mapping port dpu.fib using BUF_X1.
Mapping port dpu.indatatrf using BUF_X1.
Mapping port dpu.opcode using BUF_X1.
Mapping port dpu.outflag using BUF_X1.
Mapping port dpu.outmuxrd using BUF_X1.
Mapping port dpu.outmuxrs1 using BUF_X1.
Mapping port dpu.outmuxrs2 using BUF_X1.
Mapping port dpu.readymdu using BUF_X1.
Don't map input port flags.clk: Missing option -inpad.
Don't map input port flags.enflag: Missing option -inpad.
Don't map input port flags.inflag: Missing option -inpad.
Don't map input port flags.rst: Missing option -inpad.
Don't map input port flags.selflag: Missing option -inpad.
Don't map input port flags.setflags: Missing option -inpad.
Mapping port flags.outflag using BUF_X1.
Don't map input port iff.clk: Missing option -inpad.
Don't map input port iff.enflag: Missing option -inpad.
Don't map input port iff.inflag: Missing option -inpad.
Don't map input port iff.rst: Missing option -inpad.
Don't map input port iff.selflag: Missing option -inpad.
Don't map input port iff.setflags: Missing option -inpad.
Mapping port iff.outflag using BUF_X1.
Don't map input port imm.in1: Missing option -inpad.
Don't map input port imm.in2: Missing option -inpad.
Don't map input port imm.p1lowbits: Missing option -inpad.
Don't map input port imm.se5bits: Missing option -inpad.
Don't map input port imm.se6bits: Missing option -inpad.
Don't map input port imm.se8bits: Missing option -inpad.
Don't map input port imm.use8bits: Missing option -inpad.
Mapping port imm.outimm using BUF_X1.
Don't map input port inc_16.ininc: Missing option -inpad.
Mapping port inc_16.outinc using BUF_X1.
Don't map input port inc_4.ininc: Missing option -inpad.
Mapping port inc_4.outinc using BUF_X1.
Don't map input port llu.in1: Missing option -inpad.
Don't map input port llu.in2: Missing option -inpad.
Don't map input port llu.logicand: Missing option -inpad.
Don't map input port llu.onescomp: Missing option -inpad.
Don't map input port llu.twoscomp: Missing option -inpad.
Mapping port llu.outllu using BUF_X1.
Don't map input port mdu.arithdiv: Missing option -inpad.
Don't map input port mdu.arithmul: Missing option -inpad.
Don't map input port mdu.clk: Missing option -inpad.
Don't map input port mdu.in1: Missing option -inpad.
Don't map input port mdu.in2: Missing option -inpad.
Don't map input port mdu.ldmdu1: Missing option -inpad.
Don't map input port mdu.ldmdu2: Missing option -inpad.
Don't map input port mdu.rst: Missing option -inpad.
Don't map input port mdu.startmdu: Missing option -inpad.
Mapping port mdu.outmdu1 using BUF_X1.
Mapping port mdu.outmdu2 using BUF_X1.
Mapping port mdu.readymdu using BUF_X1.
Don't map input port mux2ofnbits_16.in1: Missing option -inpad.
Don't map input port mux2ofnbits_16.in2: Missing option -inpad.
Don't map input port mux2ofnbits_16.sel1: Missing option -inpad.
Don't map input port mux2ofnbits_16.sel2: Missing option -inpad.
Mapping port mux2ofnbits_16.outmux using BUF_X1.
Don't map input port mux2ofnbits_4.in1: Missing option -inpad.
Don't map input port mux2ofnbits_4.in2: Missing option -inpad.
Don't map input port mux2ofnbits_4.sel1: Missing option -inpad.
Don't map input port mux2ofnbits_4.sel2: Missing option -inpad.
Mapping port mux2ofnbits_4.outmux using BUF_X1.
Don't map input port mux2ofnbits_5.in1: Missing option -inpad.
Don't map input port mux2ofnbits_5.in2: Missing option -inpad.
Don't map input port mux2ofnbits_5.sel1: Missing option -inpad.
Don't map input port mux2ofnbits_5.sel2: Missing option -inpad.
Mapping port mux2ofnbits_5.outmux using BUF_X1.
Don't map input port mux3of16bits.in1: Missing option -inpad.
Don't map input port mux3of16bits.in2: Missing option -inpad.
Don't map input port mux3of16bits.in3: Missing option -inpad.
Don't map input port mux3of16bits.sel1: Missing option -inpad.
Don't map input port mux3of16bits.sel2: Missing option -inpad.
Don't map input port mux3of16bits.sel3: Missing option -inpad.
Mapping port mux3of16bits.outmux using BUF_X1.
Don't map input port mux8of16bits.in1: Missing option -inpad.
Don't map input port mux8of16bits.in2: Missing option -inpad.
Don't map input port mux8of16bits.in3: Missing option -inpad.
Don't map input port mux8of16bits.in4: Missing option -inpad.
Don't map input port mux8of16bits.in5: Missing option -inpad.
Don't map input port mux8of16bits.in6: Missing option -inpad.
Don't map input port mux8of16bits.in7: Missing option -inpad.
Don't map input port mux8of16bits.in8: Missing option -inpad.
Don't map input port mux8of16bits.sel1: Missing option -inpad.
Don't map input port mux8of16bits.sel2: Missing option -inpad.
Don't map input port mux8of16bits.sel3: Missing option -inpad.
Don't map input port mux8of16bits.sel4: Missing option -inpad.
Don't map input port mux8of16bits.sel5: Missing option -inpad.
Don't map input port mux8of16bits.sel6: Missing option -inpad.
Don't map input port mux8of16bits.sel7: Missing option -inpad.
Don't map input port mux8of16bits.sel8: Missing option -inpad.
Mapping port mux8of16bits.outmux using BUF_X1.
Don't map input port reg.clk: Missing option -inpad.
Don't map input port reg.inreg: Missing option -inpad.
Don't map input port reg.ld: Missing option -inpad.
Don't map input port reg.rst: Missing option -inpad.
Mapping port reg.outreg using BUF_X1.
Don't map input port shu.arithsh: Missing option -inpad.
Don't map input port shu.in1: Missing option -inpad.
Don't map input port shu.in2: Missing option -inpad.
Don't map input port shu.logicsh: Missing option -inpad.
Mapping port shu.outshu using BUF_X1.

17. Executing Verilog backend.

17.1. Executing BMUXMAP pass.

17.2. Executing DEMUXMAP pass.
Dumping module `\LGC'.
Dumping module `\add_16'.
Dumping module `\asu'.
Dumping module `\ccu'.
Dumping module `\cmp'.
Dumping module `\comp'.
Dumping module `\dpu'.
Dumping module `\flags'.
Dumping module `\iff'.
Dumping module `\imm'.
Dumping module `\inc_16'.
Dumping module `\inc_4'.
Dumping module `\llu'.
Dumping module `\mdu'.
Dumping module `\mux2ofnbits_16'.
Dumping module `\mux2ofnbits_4'.
Dumping module `\mux2ofnbits_5'.
Dumping module `\mux3of16bits'.
Dumping module `\mux8of16bits'.
Dumping module `\reg'.
Dumping module `\shu'.

18. Executing BLIF backend.

19. Executing JSON backend.

20. Executing OPT pass (performing simple optimizations).

20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

20.6. Executing OPT_DFF pass (perform DFF optimizations).

20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..
Removed 0 unused cells and 9 unused wires.
<suppressed ~3 debug messages>

20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

20.9. Rerunning OPT passes. (Maybe there is more to do..)

20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \LGC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \add_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \asu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ccu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cmp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \comp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \flags..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \iff..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \imm..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \inc_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \llu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mdu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux2ofnbits_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux3of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mux8of16bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \shu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \LGC.
  Optimizing cells in module \add_16.
  Optimizing cells in module \asu.
  Optimizing cells in module \ccu.
  Optimizing cells in module \cmp.
  Optimizing cells in module \comp.
  Optimizing cells in module \dpu.
  Optimizing cells in module \flags.
  Optimizing cells in module \iff.
  Optimizing cells in module \imm.
  Optimizing cells in module \inc_16.
  Optimizing cells in module \inc_4.
  Optimizing cells in module \llu.
  Optimizing cells in module \mdu.
  Optimizing cells in module \mux2ofnbits_16.
  Optimizing cells in module \mux2ofnbits_4.
  Optimizing cells in module \mux2ofnbits_5.
  Optimizing cells in module \mux3of16bits.
  Optimizing cells in module \mux8of16bits.
  Optimizing cells in module \reg.
  Optimizing cells in module \shu.
Performed a total of 0 changes.

20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\LGC'.
Finding identical cells in module `\add_16'.
Finding identical cells in module `\asu'.
Finding identical cells in module `\ccu'.
Finding identical cells in module `\cmp'.
Finding identical cells in module `\comp'.
Finding identical cells in module `\dpu'.
Finding identical cells in module `\flags'.
Finding identical cells in module `\iff'.
Finding identical cells in module `\imm'.
Finding identical cells in module `\inc_16'.
Finding identical cells in module `\inc_4'.
Finding identical cells in module `\llu'.
Finding identical cells in module `\mdu'.
Finding identical cells in module `\mux2ofnbits_16'.
Finding identical cells in module `\mux2ofnbits_4'.
Finding identical cells in module `\mux2ofnbits_5'.
Finding identical cells in module `\mux3of16bits'.
Finding identical cells in module `\mux8of16bits'.
Finding identical cells in module `\reg'.
Finding identical cells in module `\shu'.
Removed a total of 0 cells.

20.13. Executing OPT_DFF pass (perform DFF optimizations).

20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module LGC.
Optimizing module add_16.
Optimizing module asu.
Optimizing module ccu.
Optimizing module cmp.
Optimizing module comp.
Optimizing module dpu.
Optimizing module flags.
Optimizing module iff.
Optimizing module imm.
Optimizing module inc_16.
Optimizing module inc_4.
Optimizing module llu.
Optimizing module mdu.
Optimizing module mux2ofnbits_16.
Optimizing module mux2ofnbits_4.
Optimizing module mux2ofnbits_5.
Optimizing module mux3of16bits.
Optimizing module mux8of16bits.
Optimizing module reg.
Optimizing module shu.

20.16. Finished OPT passes. (There is nothing left to do.)

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \LGC..
Finding unused cells or wires in module \add_16..
Finding unused cells or wires in module \asu..
Finding unused cells or wires in module \ccu..
Finding unused cells or wires in module \cmp..
Finding unused cells or wires in module \comp..
Finding unused cells or wires in module \dpu..
Finding unused cells or wires in module \flags..
Finding unused cells or wires in module \iff..
Finding unused cells or wires in module \imm..
Finding unused cells or wires in module \inc_16..
Finding unused cells or wires in module \inc_4..
Finding unused cells or wires in module \llu..
Finding unused cells or wires in module \mdu..
Finding unused cells or wires in module \mux2ofnbits_16..
Finding unused cells or wires in module \mux2ofnbits_4..
Finding unused cells or wires in module \mux2ofnbits_5..
Finding unused cells or wires in module \mux3of16bits..
Finding unused cells or wires in module \mux8of16bits..
Finding unused cells or wires in module \reg..
Finding unused cells or wires in module \shu..

22. Printing statistics.

=== LGC ===

   Number of wires:                117
   Number of wire bits:            315
   Number of public wires:          97
   Number of public wire bits:     196
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                115
     BUF_X1                        107
     INV_X1                          4
     NAND2_X1                        2
     ccu                             1
     dpu                             1

=== add_16 ===

   Number of wires:                116
   Number of wire bits:            206
   Number of public wires:           3
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                174
     AND2_X1                         2
     AOI21_X1                       11
     BUF_X1                         48
     INV_X1                         26
     NAND2_X1                       30
     NAND3_X1                        1
     NAND4_X1                        3
     NOR2_X1                        15
     NOR3_X1                         1
     OAI211_X1                       3
     OAI21_X1                       12
     OR2_X1                          6
     XNOR2_X1                       13
     XOR2_X1                         3

=== asu ===

   Number of wires:                268
   Number of wire bits:            358
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                324
     AND2_X1                         5
     AND4_X1                         1
     AOI211_X1                       1
     AOI21_X1                       21
     BUF_X1                         50
     INV_X1                         57
     NAND2_X1                       73
     NAND3_X1                        6
     NAND4_X1                        4
     NOR2_X1                        36
     NOR3_X1                         5
     OAI211_X1                       5
     OAI21_X1                       31
     OAI221_X1                       1
     OAI22_X1                       11
     OR2_X1                          1
     XNOR2_X1                       15
     XOR2_X1                         1

=== ccu ===

   Number of wires:                245
   Number of wire bits:            288
   Number of public wires:          65
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                261
     AND2_X1                         2
     AND3_X1                         3
     AOI211_X1                       1
     AOI21_X1                       10
     AOI22_X1                        3
     BUF_X1                         86
     DFFR_X1                         2
     INV_X1                         36
     NAND2_X1                       28
     NAND3_X1                       10
     NAND4_X1                        7
     NOR2_X1                        37
     NOR3_X1                        10
     NOR4_X1                         1
     OAI211_X1                       6
     OAI21_X1                       16
     OAI22_X1                        2
     OR2_X1                          1

=== cmp ===

   Number of wires:                106
   Number of wire bits:            166
   Number of public wires:           4
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                134
     AND2_X1                         5
     AND4_X1                         2
     AOI21_X1                        8
     AOI22_X1                        5
     BUF_X1                         34
     INV_X1                         32
     NAND2_X1                       16
     NAND3_X1                        2
     NAND4_X1                        6
     NOR2_X1                        13
     NOR3_X1                         1
     OAI211_X1                       3
     OAI21_X1                        2
     OAI22_X1                        1
     XNOR2_X1                        4

=== comp ===

   Number of wires:                 41
   Number of wire bits:            101
   Number of public wires:           3
   Number of public wire bits:      33
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 84
     AND2_X1                         2
     AOI21_X1                        2
     BUF_X1                         33
     INV_X1                         15
     NAND2_X1                        4
     NAND3_X1                        2
     NAND4_X1                        6
     NOR2_X1                         4
     NOR3_X1                         2
     NOR4_X1                         3
     OAI21_X1                        2
     XNOR2_X1                        7
     XOR2_X1                         2

=== dpu ===

   Number of wires:                404
   Number of wire bits:            637
   Number of public wires:         303
   Number of public wire bits:     427
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     AND2_X1                         4
     BUF_X1                        180
     NAND2_X1                       32
     NAND3_X1                       16
     NAND4_X1                        2
     add_16                          1
     asu                             1
     cmp                             1
     flags                           1
     imm                             1
     inc_16                          1
     inc_4                           1
     llu                             1
     mdu                             1
     mux2ofnbits_16                  3
     mux2ofnbits_4                   3
     mux2ofnbits_5                   1
     mux3of16bits                    1
     mux8of16bits                    1
     reg                             3
     shu                             1

=== flags ===

   Number of wires:                 14
   Number of wire bits:             56
   Number of public wires:           7
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     BUF_X1                         28
     iff                             8

=== iff ===

   Number of wires:                 20
   Number of wire bits:             20
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     BUF_X1                          7
     DFFR_X1                         1
     INV_X1                          1
     NAND2_X1                        2
     OAI211_X1                       1
     OAI21_X1                        1

=== imm ===

   Number of wires:                 74
   Number of wire bits:            132
   Number of public wires:           8
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                111
     AND2_X1                         1
     AOI21_X1                       13
     BUF_X1                         37
     INV_X1                          7
     NAND2_X1                       29
     NAND3_X1                        1
     NOR2_X1                         2
     OAI211_X1                       1
     OAI21_X1                       20

=== inc_16 ===

   Number of wires:                 35
   Number of wire bits:             95
   Number of public wires:           2
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     AND2_X1                         1
     AOI21_X1                        1
     BUF_X1                         32
     INV_X1                         12
     NAND2_X1                        7
     NAND3_X1                        2
     NAND4_X1                        4
     NOR2_X1                         7
     NOR3_X1                         1
     NOR4_X1                         2
     OAI21_X1                        1
     XNOR2_X1                        7
     XOR2_X1                         2

=== inc_4 ===

   Number of wires:                 12
   Number of wire bits:             24
   Number of public wires:           2
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     BUF_X1                          8
     INV_X1                          3
     NAND2_X1                        5
     NAND3_X1                        2
     NAND4_X1                        1
     XOR2_X1                         1

=== llu ===

   Number of wires:                 62
   Number of wire bits:            152
   Number of public wires:          23
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                102
     BUF_X1                         51
     INV_X1                          1
     NAND3_X1                       16
     NOR2_X1                         1
     OAI21_X1                       32
     comp                            1

=== mdu ===

   Number of wires:               3808
   Number of wire bits:           3928
   Number of public wires:          12
   Number of public wire bits:      72
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3857
     AND2_X1                        76
     AND3_X1                        23
     AND4_X1                        22
     AOI211_X1                      11
     AOI21_X1                      334
     AOI22_X1                       11
     BUF_X1                         72
     DFFR_X1                        32
     INV_X1                        332
     NAND2_X1                     1018
     NAND3_X1                      446
     NAND4_X1                       93
     NOR2_X1                       320
     NOR3_X1                        34
     NOR4_X1                         1
     OAI211_X1                     174
     OAI21_X1                      356
     OAI221_X1                       3
     OAI22_X1                       13
     OR2_X1                         31
     OR3_X1                          6
     OR4_X1                          1
     XNOR2_X1                      111
     XOR2_X1                       337

=== mux2ofnbits_16 ===

   Number of wires:                 42
   Number of wire bits:            132
   Number of public wires:           5
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     BUF_X1                         50
     NAND2_X1                       32
     OAI21_X1                       16

=== mux2ofnbits_4 ===

   Number of wires:                 18
   Number of wire bits:             36
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     BUF_X1                         14
     NAND2_X1                        8
     OAI21_X1                        4

=== mux2ofnbits_5 ===

   Number of wires:                 20
   Number of wire bits:             44
   Number of public wires:           5
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     BUF_X1                         17
     NAND2_X1                       10
     OAI21_X1                        5

=== mux3of16bits ===

   Number of wires:                 63
   Number of wire bits:            183
   Number of public wires:           7
   Number of public wire bits:      67
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                132
     AOI21_X1                       16
     AOI22_X1                       16
     BUF_X1                         67
     INV_X1                         17
     NAND3_X1                       16

=== mux8of16bits ===

   Number of wires:                263
   Number of wire bits:            533
   Number of public wires:          17
   Number of public wire bits:     152
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                397
     AND2_X1                        16
     AOI21_X1                       64
     BUF_X1                        152
     INV_X1                         37
     NAND2_X1                       48
     NOR2_X1                        16
     OAI211_X1                      16
     OAI21_X1                       48

=== reg ===

   Number of wires:                 75
   Number of wire bits:            135
   Number of public wires:           5
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     BUF_X1                         35
     DFFR_X1                        16
     INV_X1                         17
     NAND2_X1                       16
     OAI21_X1                       16

=== shu ===

   Number of wires:                410
   Number of wire bits:            463
   Number of public wires:          53
   Number of public wire bits:      87
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                440
     AND2_X1                         4
     AND3_X1                        11
     AND4_X1                        23
     AOI21_X1                        8
     AOI22_X1                       16
     BUF_X1                         39
     INV_X1                         59
     NAND2_X1                       26
     NAND3_X1                      114
     NAND4_X1                       44
     NOR2_X1                        35
     NOR3_X1                         3
     OAI211_X1                       5
     OAI21_X1                       19
     OAI22_X1                       33
     OR2_X1                          1

=== design hierarchy ===

   LGC                               1
     ccu                             1
     dpu                             1
       add_16                        1
       asu                           1
       cmp                           1
       flags                         1
         iff                         8
       imm                           1
       inc_16                        1
       inc_4                         1
       llu                           1
         comp                        1
       mdu                           1
       mux2ofnbits_16                3
       mux2ofnbits_4                 3
       mux2ofnbits_5                 1
       mux3of16bits                  1
       mux8of16bits                  1
       reg                           3
       shu                           1

   Number of wires:               6623
   Number of wire bits:           8750
   Number of public wires:         717
   Number of public wire bits:    1799
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               7297
     AND2_X1                       118
     AND3_X1                        37
     AND4_X1                        48
     AOI211_X1                      13
     AOI21_X1                      488
     AOI22_X1                       51
     BUF_X1                       1394
     DFFR_X1                        90
     INV_X1                        697
     NAND2_X1                     1512
     NAND3_X1                      634
     NAND4_X1                      170
     NOR2_X1                       486
     NOR3_X1                        57
     NOR4_X1                         7
     OAI211_X1                     221
     OAI21_X1                      660
     OAI221_X1                       4
     OAI22_X1                       60
     OR2_X1                         40
     OR3_X1                          6
     OR4_X1                          1
     XNOR2_X1                      157
     XOR2_X1                       346

Warnings: 74 unique messages, 138 total
End of script. Logfile hash: 840c3cb515, CPU: user 43.20s system 1.12s
Yosys 0.36 (git sha1 8f07a0d8404, clang 15.0.0 -fPIC -Os)
Time spent: 49% 64x opt_merge (27 sec), 20% 3x abc (11 sec), ...
