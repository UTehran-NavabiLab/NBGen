/* Generated by Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 ) */

module counter(clk, rst, en, count);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  input clk;
  output [3:0] count;
  input en;
  input rst;
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _32_ (
    .in(_23_),
    .out(_04_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _33_ (
    .in(_25_),
    .out(_05_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _34_ (
    .in(_27_),
    .out(_06_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _35_ (
    .in({ _22_, _26_ }),
    .out(_07_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _36_ (
    .in({ _22_, _26_ }),
    .out(_08_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _37_ (
    .in({ _27_, _08_ }),
    .out(_09_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _38_ (
    .in({ _07_, _09_ }),
    .out(_10_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _39_ (
    .in(_10_),
    .out(_00_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _40_ (
    .in({ _04_, _07_ }),
    .out(_11_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _41_ (
    .in({ _04_, _07_ }),
    .out(_12_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _42_ (
    .in({ _06_, _12_ }),
    .out(_13_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _43_ (
    .in({ _11_, _13_ }),
    .out(_01_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _44_ (
    .in({ _24_, _11_ }),
    .out(_14_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _45_ (
    .in({ _24_, _11_ }),
    .out(_15_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _46_ (
    .in({ _27_, _15_ }),
    .out(_16_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _47_ (
    .in({ _14_, _16_ }),
    .out(_17_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _48_ (
    .in(_17_),
    .out(_02_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _49_ (
    .in({ _05_, _14_ }),
    .out(_18_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _50_ (
    .in({ _05_, _14_ }),
    .out(_19_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _51_ (
    .in({ _06_, _19_ }),
    .out(_20_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _52_ (
    .in({ _18_, _20_ }),
    .out(_03_)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _53_ (
    .C(_21_),
    .CE(1'h1),
    .CLR(1'h0),
    .D(_00_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(_22_),
    .Si(_28_),
    .global_reset(1'h0)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _54_ (
    .C(_21_),
    .CE(1'h1),
    .CLR(1'h0),
    .D(_01_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(_23_),
    .Si(_29_),
    .global_reset(1'h0)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _55_ (
    .C(_21_),
    .CE(1'h1),
    .CLR(1'h0),
    .D(_02_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(_24_),
    .Si(_30_),
    .global_reset(1'h0)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _56_ (
    .C(_21_),
    .CE(1'h1),
    .CLR(1'h0),
    .D(_03_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(_25_),
    .Si(_31_),
    .global_reset(1'h0)
  );
  pin #(
    .n(32'sd1)
  ) _57_ (
    .in(clk),
    .out(_21_)
  );
  pout #(
    .n(32'sd1)
  ) _58_ (
    .in(_22_),
    .out(count[0])
  );
  pout #(
    .n(32'sd1)
  ) _59_ (
    .in(_23_),
    .out(count[1])
  );
  pout #(
    .n(32'sd1)
  ) _60_ (
    .in(_24_),
    .out(count[2])
  );
  pout #(
    .n(32'sd1)
  ) _61_ (
    .in(_25_),
    .out(count[3])
  );
  pin #(
    .n(32'sd1)
  ) _62_ (
    .in(en),
    .out(_26_)
  );
  pin #(
    .n(32'sd1)
  ) _63_ (
    .in(rst),
    .out(_27_)
  );
endmodule
