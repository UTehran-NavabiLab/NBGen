/* Generated by Yosys 0.10+12 (open-tool-forge build) (git sha1 356ec7bb, clang 11.0.3 ) */

module counter(clk, rst, en, co, counter);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  input clk;
  output co;
  output [3:0] counter;
  wire \counter_reg[0] ;
  wire \counter_reg[1] ;
  wire \counter_reg[2] ;
  wire \counter_reg[3] ;
  input en;
  input rst;
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _26_ (
    .in(\counter_reg[0] ),
    .out(_04_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _27_ (
    .in(\counter_reg[3] ),
    .out(_05_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _28_ (
    .in(_20_),
    .out(_06_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _29_ (
    .in({ \counter_reg[0] , \counter_reg[1]  }),
    .out(_07_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _30_ (
    .in({ \counter_reg[3] , \counter_reg[2]  }),
    .out(_08_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _31_ (
    .in({ _07_, _08_ }),
    .out(_19_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _32_ (
    .in({ _04_, _06_ }),
    .out(_09_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _33_ (
    .in({ \counter_reg[0] , _20_ }),
    .out(_10_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _34_ (
    .in({ _09_, _10_ }),
    .out(_00_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _35_ (
    .in({ _06_, _07_ }),
    .out(_11_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _36_ (
    .in({ \counter_reg[1] , _09_ }),
    .out(_12_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _37_ (
    .in({ _11_, _12_ }),
    .out(_01_)
  );
  nand_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _38_ (
    .in({ \counter_reg[2] , _11_ }),
    .out(_13_)
  );
  notg #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _39_ (
    .in(_13_),
    .out(_14_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _40_ (
    .in({ \counter_reg[2] , _11_ }),
    .out(_15_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _41_ (
    .in({ _14_, _15_ }),
    .out(_02_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _42_ (
    .in({ \counter_reg[3] , _14_ }),
    .out(_16_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _43_ (
    .in({ _05_, _13_ }),
    .out(_17_)
  );
  nor_n #(
    .n(32'sd2),
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _44_ (
    .in({ _16_, _17_ }),
    .out(_03_)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _45_ (
    .C(_18_),
    .CE(1'h1),
    .CLR(_21_),
    .D(_00_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(\counter_reg[0] ),
    .Si(_22_),
    .global_reset(1'h0)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _46_ (
    .C(_18_),
    .CE(1'h1),
    .CLR(_21_),
    .D(_01_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(\counter_reg[1] ),
    .Si(_23_),
    .global_reset(1'h0)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _47_ (
    .C(_18_),
    .CE(1'h1),
    .CLR(_21_),
    .D(_02_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(\counter_reg[2] ),
    .Si(_24_),
    .global_reset(1'h0)
  );
  dff #(
    .tphl(32'sd0),
    .tplh(32'sd0)
  ) _48_ (
    .C(_18_),
    .CE(1'h1),
    .CLR(_21_),
    .D(_03_),
    .NbarT(1'h0),
    .PRE(1'h0),
    .Q(\counter_reg[3] ),
    .Si(_25_),
    .global_reset(1'h0)
  );
  pin #(
    .n(32'sd1)
  ) _49_ (
    .in(clk),
    .out(_18_)
  );
  pout #(
    .n(32'sd1)
  ) _50_ (
    .in(_19_),
    .out(co)
  );
  pout #(
    .n(32'sd1)
  ) _51_ (
    .in(\counter_reg[0] ),
    .out(counter[0])
  );
  pout #(
    .n(32'sd1)
  ) _52_ (
    .in(\counter_reg[1] ),
    .out(counter[1])
  );
  pout #(
    .n(32'sd1)
  ) _53_ (
    .in(\counter_reg[2] ),
    .out(counter[2])
  );
  pout #(
    .n(32'sd1)
  ) _54_ (
    .in(\counter_reg[3] ),
    .out(counter[3])
  );
  pin #(
    .n(32'sd1)
  ) _55_ (
    .in(en),
    .out(_20_)
  );
  pin #(
    .n(32'sd1)
  ) _56_ (
    .in(rst),
    .out(_21_)
  );
endmodule
